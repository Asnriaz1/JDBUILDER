{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\JD\\\\JDBuilding\\\\JobOpening\\\\MetaFields\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CustomTextValidator from \"../../../../common/ReduxBased/CustomTextValidator/component\";\nimport { Grid, Tooltip, Zoom } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes, toHTML } from 'react-mui-draft-wysiwyg';\nimport ReactSelectValidator from \"../../../../common/ReduxBased/CustomReactSelectValidator/ReactSelectValidator\";\nimport { FormControlLabel, Switch, Radio, RadioGroup, FormLabel } from '@material-ui/core';\nimport { ContentState, convertToRaw, convertFromRaw } from 'draft-js';\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\nimport { Divider, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst editorConfig = {};\nconst rawContent = {\n  blocks: [],\n  entityMap: {}\n};\n\nclass JobOpeningMetaFields extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      window.scrollTo(0, null); // this.props.fetchDataIfNeeded();\n\n      let convertedData = convertFromHTML(this.props.rolesResHTMLData);\n      let convertedRawData = convertToRaw(convertedData);\n      const rawContents = {\n        blocks: [...convertedRawData.blocks],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedRolesResEditor(rawContents);\n    };\n\n    this.componentWillUnmount = () => {\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n    };\n\n    this.onChange = newState => {\n      this.setState({\n        editorState: newState\n      });\n    };\n\n    this.appendRolesToEditor = (value, index) => {\n      this.props.rolesActiveHandler(index);\n      let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n      let newItem = {\n        data: {},\n        depth: 0,\n        entityRanges: [],\n        inlineStyleRanges: [],\n        key: oldData.blocks.length + \"roles\",\n        text: value,\n        type: 'paragraph'\n      };\n      oldData = [...oldData.blocks, newItem];\n      const rawContents = {\n        blocks: [...oldData],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedRolesResEditor(rawContents);\n    };\n\n    this.appendResHandler = (value, index) => {\n      this.props.resActiveHandler(index);\n      let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n      let data = toHTML(this.state.editorState.getCurrentContent());\n      let newItem = {\n        data: {},\n        depth: 0,\n        entityRanges: [],\n        inlineStyleRanges: [],\n        key: oldData.blocks.length + \"res\",\n        text: value,\n        type: 'paragraph'\n      };\n      oldData = [...oldData.blocks, newItem];\n      const rawContents = {\n        blocks: [...oldData],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedRolesResEditor(rawContents);\n    };\n\n    this.state = {\n      editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(this.props.rawContentRolesRes))\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      fields,\n      textFieldChangeHandler,\n      addRoleIsExpanded,\n      toggleAddRoleExpansionPanel,\n      addResIsExpanded,\n      toggleAddResExpansionPanel,\n      rolesData,\n      resData,\n      selectFieldChangeHandler,\n      radioChangeHandler,\n      switchChangeHandler\n    } = this.props;\n    const config = {\n      toolbar: {\n        controls: [toolbarControlTypes.bold, toolbarControlTypes.italic, toolbarControlTypes.underline, toolbarControlTypes.unorderedList, toolbarControlTypes.orderedList]\n      },\n      editor: {\n        className: 'texteditor'\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.metafieldwrapper,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 8,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.jobTitleField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.jobTitleField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"text\",\n              placeholder: fields.jobTitleField.placeholder,\n              name: fields.jobTitleField.name,\n              value: fields.jobTitleField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.jobTitleField.name, value);\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"],\n              className: \"jobtitlefield\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.jobCodeField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.jobCodeField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"text\",\n              placeholder: fields.jobCodeField.placeholder,\n              name: fields.jobCodeField.name,\n              value: fields.jobCodeField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.jobCodeField.name, value);\n              },\n              disabled: true,\n              validators: [\"required\"],\n              errorMessages: [\"Required\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.rolesandreswrapper,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 8,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.metatitle,\n                children: \"Roles and Responsibilities\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.texteditorwrapper,\n                children: /*#__PURE__*/_jsxDEV(MUIEditor, {\n                  editorState: this.state.editorState,\n                  onChange: this.onChange,\n                  config: config\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(ExpansionPanel, {\n                className: classes.ExpansionPanel,\n                defaultExpanded: false,\n                expanded: addRoleIsExpanded,\n                onChange: () => toggleAddRoleExpansionPanel(addRoleIsExpanded),\n                children: [/*#__PURE__*/_jsxDEV(ExpansionPanelSummary, {\n                  className: classes.ExpansionPanelSummary,\n                  expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n                    className: classes.ExpandMoreIcon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 49\n                  }, this),\n                  \"aria-controls\": \"panel1a-content\",\n                  id: \"panel1a-header\",\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: classes.expansionPanelTitle,\n                    children: \"Add Role\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {\n                  className: classes.ExpansionDivider\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(ExpansionPanelDetails, {\n                  className: classes.ExpansionPanelDetails,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.suggesteditems,\n                    children: rolesData.map((item, index) => /*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: item.desc,\n                      arrow: true,\n                      placement: \"left\",\n                      TransitionComponent: Zoom,\n                      TransitionProps: {\n                        timeout: 600\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"item\",\n                        onClick: () => this.appendRolesToEditor(item.desc, index),\n                        children: [/*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n                          className: item.isActive ? classes.addeditembg : \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 250,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"description\",\n                          children: item.desc\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 251,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 249,\n                        columnNumber: 49\n                      }, this)\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 49\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(ExpansionPanel, {\n                className: classes.ExpansionPanel,\n                defaultExpanded: false,\n                expanded: addResIsExpanded,\n                onChange: () => toggleAddResExpansionPanel(addResIsExpanded),\n                children: [/*#__PURE__*/_jsxDEV(ExpansionPanelSummary, {\n                  className: classes.ExpansionPanelSummary,\n                  expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n                    className: classes.ExpandMoreIcon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 49\n                  }, this),\n                  \"aria-controls\": \"panel1a-content\",\n                  id: \"panel1a-header\",\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: classes.expansionPanelTitle,\n                    children: \"Add Responsibilities\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {\n                  className: classes.ExpansionDivider\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(ExpansionPanelDetails, {\n                  className: classes.ExpansionPanelDetails,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.suggesteditems,\n                    children: resData.map((item, index) => /*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: item.desc,\n                      arrow: true,\n                      placement: \"left\",\n                      TransitionComponent: Zoom,\n                      TransitionProps: {\n                        timeout: 600\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"item\",\n                        onClick: () => this.appendResHandler(item.desc, index),\n                        children: [/*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n                          className: item.isActive ? classes.addeditembg : \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 282,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          children: item.desc\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 283,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 281,\n                        columnNumber: 49\n                      }, this)\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 280,\n                      columnNumber: 49\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.sectiontitle,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Employment Detail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.distancewrapper,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 6,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.metatitle,\n                children: fields.industryField.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n                id: fields.industryField.name,\n                name: fields.industryField.name,\n                value: fields.industryField.value,\n                placeholder: fields.industryField.placeholder,\n                isClearable: true,\n                onChange: value => {\n                  selectFieldChangeHandler(fields.industryField.name, value);\n                },\n                isSearchable: true,\n                validators: [\"required\"],\n                errorMessages: [\"Required\"],\n                options: fields.industryField.options,\n                className: \"jobtitlefield\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 6,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.metatitle,\n                children: fields.functionField.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n                id: fields.functionField.name,\n                name: fields.functionField.name,\n                value: fields.functionField.value,\n                placeholder: fields.functionField.placeholder,\n                isClearable: true,\n                validators: [\"required\"],\n                errorMessages: [\"Required\"],\n                onChange: value => {\n                  selectFieldChangeHandler(fields.functionField.name, value);\n                },\n                isSearchable: true,\n                options: fields.functionField.options\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 5,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.employmenTypeField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n              id: fields.employmenTypeField.name,\n              name: fields.employmenTypeField.name,\n              value: fields.employmenTypeField.value,\n              placeholder: fields.employmenTypeField.placeholder,\n              isClearable: true,\n              onChange: value => {\n                selectFieldChangeHandler(fields.employmenTypeField.name, value);\n              },\n              isSearchable: true,\n              validators: [\"required\"],\n              errorMessages: [\"Required\"],\n              options: fields.employmenTypeField.options,\n              className: \"jobtitlefield\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 2,\n            className: classes.yeartooltips,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.minYearField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.minYearField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"number\",\n              placeholder: fields.minYearField.placeholder,\n              name: fields.minYearField.name,\n              value: fields.minYearField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.minYearField.name, value);\n              },\n              inputProps: {\n                min: \"0\",\n                max: \"30\"\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Minimum Required Experience\",\n              arrow: true,\n              placement: \"top\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ask\",\n                children: \"?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 2,\n            className: classes.yeartooltips,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.maxYearField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.maxYearField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"number\",\n              placeholder: fields.maxYearField.placeholder,\n              name: fields.maxYearField.name,\n              value: fields.maxYearField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.maxYearField.name, value);\n              },\n              inputProps: {\n                min: \"0\",\n                max: \"30\"\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Maximum Required Experience\",\n              arrow: true,\n              placement: \"top\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ask\",\n                children: \"?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 3,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.positionField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.positionField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"number\",\n              placeholder: fields.positionField.placeholder,\n              name: fields.positionField.name,\n              value: fields.positionField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.positionField.name, value);\n              },\n              inputProps: {\n                min: \"1\",\n                max: \"30\"\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                marginTop: 13,\n                display: \"block\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.AddressField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.AddressField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"text\",\n              placeholder: fields.AddressField.placeholder,\n              name: fields.AddressField.name,\n              value: fields.AddressField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.AddressField.name, value);\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"],\n              className: \"jobtitlefield\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.metatitle,\n              children: fields.QualificationField.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n              id: fields.QualificationField.name,\n              name: fields.QualificationField.name,\n              value: fields.QualificationField.value,\n              placeholder: fields.QualificationField.placeholder,\n              isClearable: true,\n              onChange: value => {\n                selectFieldChangeHandler(fields.QualificationField.name, value);\n              },\n              isSearchable: true,\n              options: fields.QualificationField.options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.switchfield,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: fields.remoteWorkingField.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: fields.remoteWorkingField.value,\n              onChange: e => switchChangeHandler(fields.remoteWorkingField.name, e),\n              name: fields.remoteWorkingField.name,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 25\n            }, this),\n            label: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            children: \"Salary Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            value: fields.salaryTypeField.value,\n            onChange: radioChangeHandler,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"hourly\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 75\n              }, this),\n              label: \"Hourly\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 33\n            }, this), fields.salaryTypeField.value === \"hourly\" ? /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.hourlyMaxRateField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"number\",\n              placeholder: fields.hourlyMaxRateField.placeholder,\n              name: fields.hourlyMaxRateField.name,\n              value: fields.hourlyMaxRateField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.hourlyMaxRateField.name, value);\n              },\n              inputProps: {\n                min: \"1\",\n                max: \"10000\"\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"],\n              className: classes.radioFields\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 33\n            }, this) : null, /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"monthly\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 76\n              }, this),\n              label: \"Monthly\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 33\n            }, this), fields.salaryTypeField.value === \"monthly\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"inline-block\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n                id: fields.monthlySalaryRangField.name,\n                name: fields.monthlySalaryRangField.name,\n                value: fields.monthlySalaryRangField.value,\n                placeholder: fields.monthlySalaryRangField.placeholder,\n                isClearable: true,\n                onChange: value => {\n                  selectFieldChangeHandler(fields.monthlySalaryRangField.name, value);\n                },\n                isSearchable: true,\n                options: fields.monthlySalaryRangField.options,\n                className: classes.radioFields\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n                id: fields.monthlyCurrencyField.name,\n                name: fields.monthlyCurrencyField.name,\n                value: fields.monthlyCurrencyField.value,\n                placeholder: fields.monthlyCurrencyField.placeholder,\n                isClearable: true,\n                onChange: value => {\n                  selectFieldChangeHandler(fields.monthlyCurrencyField.name, value);\n                },\n                isSearchable: true,\n                options: fields.monthlyCurrencyField.options,\n                className: classes.radioFields\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 33\n            }, this) : null, /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"yearly\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 75\n              }, this),\n              label: \"Yearly\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 33\n            }, this), fields.salaryTypeField.value === \"yearly\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"inline-block\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n                id: fields.yearlySalaryRangField.name,\n                name: fields.yearlySalaryRangField.name,\n                value: fields.yearlySalaryRangField.value,\n                placeholder: fields.yearlySalaryRangField.placeholder,\n                isClearable: true,\n                onChange: value => {\n                  selectFieldChangeHandler(fields.yearlySalaryRangField.name, value);\n                },\n                isSearchable: true,\n                options: fields.yearlySalaryRangField.options,\n                className: classes.radioFields\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ReactSelectValidator, {\n                id: fields.yearlyCurrencyField.name,\n                name: fields.yearlyCurrencyField.name,\n                value: fields.yearlyCurrencyField.value,\n                placeholder: fields.yearlyCurrencyField.placeholder,\n                isClearable: true,\n                onChange: value => {\n                  selectFieldChangeHandler(fields.yearlyCurrencyField.name, value);\n                },\n                isSearchable: true,\n                options: fields.yearlyCurrencyField.options,\n                className: classes.radioFields\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.switchfield,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: fields.showSalaryField.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: fields.showSalaryField.value,\n              onChange: e => switchChangeHandler(fields.showSalaryField.name, e),\n              name: fields.showSalaryField.name,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 25\n            }, this),\n            label: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default withStyles(styles)(JobOpeningMetaFields);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/MetaFields/component.js"],"names":["React","Component","styles","withStyles","CustomTextValidator","Grid","Tooltip","Zoom","ExpandMoreIcon","CheckCircleIcon","MUIEditor","MUIEditorState","toolbarControlTypes","toHTML","ReactSelectValidator","FormControlLabel","Switch","Radio","RadioGroup","FormLabel","ContentState","convertToRaw","convertFromRaw","convertToHTML","convertFromHTML","Divider","ExpansionPanel","ExpansionPanelDetails","ExpansionPanelSummary","editorConfig","rawContent","blocks","entityMap","JobOpeningMetaFields","constructor","props","componentDidMount","window","scrollTo","convertedData","rolesResHTMLData","convertedRawData","rawContents","setState","editorState","createWithContent","currentContentAsHTML","state","getCurrentContent","saveUpdatedRolesResAsHTML","saveUpdatedRolesResEditor","componentWillUnmount","onChange","newState","appendRolesToEditor","value","index","rolesActiveHandler","oldData","newItem","data","depth","entityRanges","inlineStyleRanges","key","length","text","type","appendResHandler","resActiveHandler","rawContentRolesRes","render","classes","fields","textFieldChangeHandler","addRoleIsExpanded","toggleAddRoleExpansionPanel","addResIsExpanded","toggleAddResExpansionPanel","rolesData","resData","selectFieldChangeHandler","radioChangeHandler","switchChangeHandler","config","toolbar","controls","bold","italic","underline","unorderedList","orderedList","editor","className","metafieldwrapper","metatitle","jobTitleField","label","name","placeholder","jobCodeField","rolesandreswrapper","texteditorwrapper","expansionPanelTitle","ExpansionDivider","suggesteditems","map","item","desc","timeout","isActive","addeditembg","sectiontitle","distancewrapper","industryField","options","functionField","employmenTypeField","yeartooltips","minYearField","min","max","maxYearField","positionField","marginTop","display","AddressField","QualificationField","switchfield","remoteWorkingField","e","salaryTypeField","hourlyMaxRateField","radioFields","monthlySalaryRangField","monthlyCurrencyField","yearlySalaryRangField","yearlyCurrencyField","showSalaryField"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CustomTextValidator from \"../../../../common/ReduxBased/CustomTextValidator/component\";\nimport { Grid, Tooltip, Zoom } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes, toHTML } from 'react-mui-draft-wysiwyg'\nimport ReactSelectValidator from \"../../../../common/ReduxBased/CustomReactSelectValidator/ReactSelectValidator\";\nimport { FormControlLabel, Switch, Radio, RadioGroup, FormLabel } from '@material-ui/core';\nimport { ContentState, convertToRaw, convertFromRaw } from 'draft-js'\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\n\nimport {\n    Divider,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n} from \"@material-ui/core\";\n\nconst editorConfig = {}\n  const rawContent = {\n    blocks: [],\n    entityMap: {},\n  }\n\nclass JobOpeningMetaFields extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(this.props.rawContentRolesRes),\n              )\n        }\n    }\n\n    componentDidMount = () => {\n        window.scrollTo(0, null);\n        // this.props.fetchDataIfNeeded();\n\n        let convertedData = convertFromHTML(this.props.rolesResHTMLData);\n        let convertedRawData = convertToRaw(convertedData);\n\n        const rawContents = {\n            blocks: [...convertedRawData.blocks],\n            entityMap: {},\n        }\n        this.setState({\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(rawContents),\n              )\n        })\n\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n\n        this.props.saveUpdatedRolesResEditor(rawContents);\n    }\n\n    componentWillUnmount = () => {\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n    }\n   \n    onChange = (newState) => {\n        this.setState({\n            editorState: newState\n        })\n      }\n\n    appendRolesToEditor = (value, index) => {\n\n        this.props.rolesActiveHandler(index);\n        let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n\n        let newItem = {\n            data: {},\n            depth: 0,\n            entityRanges: [],\n            inlineStyleRanges: [],\n            key: oldData.blocks.length+\"roles\",\n            text: value,\n            type: 'paragraph',\n          };\n        oldData = [...oldData.blocks, newItem]\n        const rawContents = {\n            blocks: [...oldData],\n            entityMap: {},\n        }\n        this.setState({\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(rawContents),\n              )\n        })\n\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n\n        this.props.saveUpdatedRolesResEditor(rawContents);\n    }\n\n    appendResHandler = (value, index) => {\n\n        this.props.resActiveHandler(index);\n        let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n        let data = toHTML(this.state.editorState.getCurrentContent());\n\n        let newItem = {\n            data: {},\n            depth: 0,\n            entityRanges: [],\n            inlineStyleRanges: [],\n            key: oldData.blocks.length+\"res\",\n            text: value,\n            type: 'paragraph',\n          };\n        oldData = [...oldData.blocks, newItem]\n        const rawContents = {\n            blocks: [...oldData],\n            entityMap: {},\n        }\n        this.setState({\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(rawContents),\n              )\n        })\n\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedRolesResAsHTML(currentContentAsHTML);\n\n        this.props.saveUpdatedRolesResEditor(rawContents);\n    }\n\n    render() {\n        const {\n            classes,\n            fields,\n            textFieldChangeHandler,\n            addRoleIsExpanded,\n            toggleAddRoleExpansionPanel,\n            addResIsExpanded,\n            toggleAddResExpansionPanel,\n            rolesData,\n            resData,\n            selectFieldChangeHandler,\n            radioChangeHandler,\n            switchChangeHandler\n        } = this.props;\n        const config = {\n            toolbar: {\n               controls: [\n                   toolbarControlTypes.bold,\n                   toolbarControlTypes.italic,\n                   toolbarControlTypes.underline,\n                   toolbarControlTypes.unorderedList,\n                   toolbarControlTypes.orderedList,\n                 ],\n               },\n               editor: {\n                className: 'texteditor',\n              },\n        }; \n        return (\n            <>\n                <div className={classes.metafieldwrapper}>\n                    <Grid container>\n                        <Grid item xs={12} md={8}>\n                            <span className={classes.metatitle}>{fields.jobTitleField.label}</span>\n                            <CustomTextValidator\n                                id={fields.jobTitleField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"text\"\n                                placeholder={fields.jobTitleField.placeholder}\n                                name={fields.jobTitleField.name}\n                                value={fields.jobTitleField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.jobTitleField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className=\"jobtitlefield\"\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <span className={classes.metatitle}>{fields.jobCodeField.label}</span>\n                            <CustomTextValidator\n                                id={fields.jobCodeField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"text\"\n                                placeholder={fields.jobCodeField.placeholder}\n                                name={fields.jobCodeField.name}\n                                value={fields.jobCodeField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.jobCodeField.name,\n                                        value\n                                    );\n                                }}\n                                disabled={true}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <div className={classes.rolesandreswrapper}>\n                    <Grid container>\n                        <Grid item xs={12} md={8}>\n                            <span className={classes.metatitle}>Roles and Responsibilities</span>\n                            <div className={classes.texteditorwrapper}>\n                                <MUIEditor editorState={this.state.editorState} \n                                    onChange={this.onChange}\n                                    config={config}\n                                />\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <ExpansionPanel\n                                className={classes.ExpansionPanel}\n                                defaultExpanded={false}\n                                expanded={addRoleIsExpanded}\n                                onChange={() => toggleAddRoleExpansionPanel(addRoleIsExpanded)}\n                            >\n                                <ExpansionPanelSummary\n                                    className={classes.ExpansionPanelSummary}\n                                    expandIcon={<ExpandMoreIcon className={classes.ExpandMoreIcon}/>}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <label className={classes.expansionPanelTitle}>Add Role</label>\n                                </ExpansionPanelSummary>\n                                <Divider className={classes.ExpansionDivider}/>\n                                <ExpansionPanelDetails className={classes.ExpansionPanelDetails}>\n                                    <div className={classes.suggesteditems}>\n                                        {\n                                            rolesData.map((item, index) => (\n                                                <Tooltip key={index} title={item.desc} arrow placement=\"left\" TransitionComponent={Zoom} TransitionProps={{ timeout: 600 }} >\n                                                <div className=\"item\"  onClick={() => this.appendRolesToEditor(item.desc, index)}>\n                                                    <CheckCircleIcon className={item.isActive ? classes.addeditembg : \"\"}/>\n                                                    <span className=\"description\">{item.desc}</span>\n                                                </div>\n                                                </Tooltip>\n                                            ))\n                                        }\n                                    </div>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n\n\n                            <ExpansionPanel\n                                className={classes.ExpansionPanel}\n                                defaultExpanded={false}\n                                expanded={addResIsExpanded}\n                                onChange={() => toggleAddResExpansionPanel(addResIsExpanded)}\n                            >\n                                <ExpansionPanelSummary\n                                    className={classes.ExpansionPanelSummary}\n                                    expandIcon={<ExpandMoreIcon className={classes.ExpandMoreIcon}/>}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <label className={classes.expansionPanelTitle}>Add Responsibilities</label>\n                                </ExpansionPanelSummary>\n                                <Divider className={classes.ExpansionDivider}/>\n                                <ExpansionPanelDetails className={classes.ExpansionPanelDetails}>\n                                    <div className={classes.suggesteditems}>\n                                        {\n                                            resData.map((item, index) => (\n                                                <Tooltip key={index} title={item.desc} arrow placement=\"left\" TransitionComponent={Zoom} TransitionProps={{ timeout: 600 }}>\n                                                <div className=\"item\" onClick={() => this.appendResHandler(item.desc, index)}>\n                                                    <CheckCircleIcon className={item.isActive ? classes.addeditembg : \"\"}/>\n                                                    <span>{item.desc}</span>\n                                                </div>\n                                                </Tooltip>\n                                            ))\n                                        }\n                                    </div>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                    </Grid>\n                    </div>\n\n                    {/* employment details starts here  */}\n                    <div className={classes.sectiontitle}>\n                        <span>Employment Detail</span>\n                    </div>\n                    <div className={classes.distancewrapper}>\n                        <Grid container>\n                        <Grid item xs={12} md={6}>\n                            <span className={classes.metatitle}>{fields.industryField.label}</span>\n                            <ReactSelectValidator\n                                    id={fields.industryField.name}\n                                    name={fields.industryField.name}\n                                    value={fields.industryField.value}\n                                    placeholder={fields.industryField.placeholder}\n                                    isClearable={true}\n                                    onChange={value => {\n                                        selectFieldChangeHandler(\n                                            fields.industryField.name,\n                                            value\n                                        );\n                                    }}\n                                    isSearchable={true}\n                                    validators={[\"required\"]}\n                                    errorMessages={[\"Required\"]}\n                                    options={fields.industryField.options}\n                                    className=\"jobtitlefield\"\n                                />\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <span className={classes.metatitle}>{fields.functionField.label}</span>\n                            <ReactSelectValidator\n                                    id={fields.functionField.name}\n                                    name={fields.functionField.name}\n                                    value={fields.functionField.value}\n                                    placeholder={fields.functionField.placeholder}\n                                    isClearable={true}\n                                    validators={[\"required\"]}\n                                    errorMessages={[\"Required\"]}\n                                    onChange={value => {\n                                        selectFieldChangeHandler(\n                                            fields.functionField.name,\n                                            value\n                                        );\n                                    }}\n                                    isSearchable={true}\n                                    options={fields.functionField.options}\n                                />\n                        </Grid>\n                    </Grid>\n                    </div>\n\n                    <Grid container>\n                        <Grid item xs={12} md={5}>\n                            <span className={classes.metatitle}>{fields.employmenTypeField.label}</span>\n                            <ReactSelectValidator\n                                    id={fields.employmenTypeField.name}\n                                    name={fields.employmenTypeField.name}\n                                    value={fields.employmenTypeField.value}\n                                    placeholder={fields.employmenTypeField.placeholder}\n                                    isClearable={true}\n                                    onChange={value => {\n                                        selectFieldChangeHandler(\n                                            fields.employmenTypeField.name,\n                                            value\n                                        );\n                                    }}\n                                    isSearchable={true}\n                                    validators={[\"required\"]}\n                                    errorMessages={[\"Required\"]}\n                                    options={fields.employmenTypeField.options}\n                                    className=\"jobtitlefield\"\n                                />\n                        </Grid>\n\n                        <Grid item xs={12} md={2} className={classes.yeartooltips}>\n                            <span className={classes.metatitle}>{fields.minYearField.label}</span>\n                            <CustomTextValidator\n                                id={fields.minYearField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"number\"\n                                placeholder={fields.minYearField.placeholder}\n                                name={fields.minYearField.name}\n                                value={fields.minYearField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.minYearField.name,\n                                        value\n                                    );\n                                }}\n                                inputProps={{ min: \"0\", max: \"30\", }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                            />\n                            <Tooltip title=\"Minimum Required Experience\" arrow placement=\"top\">\n                                <span className=\"ask\">?</span>\n                            </Tooltip>\n                        </Grid>\n                        <Grid item xs={12} md={2} className={classes.yeartooltips}>\n                            <span className={classes.metatitle}>{fields.maxYearField.label}</span>\n                            <CustomTextValidator\n                                id={fields.maxYearField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"number\"\n                                placeholder={fields.maxYearField.placeholder}\n                                name={fields.maxYearField.name}\n                                value={fields.maxYearField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.maxYearField.name,\n                                        value\n                                    );\n                                }}\n                                inputProps={{ min: \"0\", max: \"30\", }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                            />\n                            <Tooltip title=\"Maximum Required Experience\" arrow placement=\"top\">\n                                <span className=\"ask\">?</span>\n                            </Tooltip>\n                        </Grid>\n\n                        <Grid item xs={12} md={3}>\n                            <span className={classes.metatitle}>{fields.positionField.label}</span>\n                            <CustomTextValidator\n                                id={fields.positionField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"number\"\n                                placeholder={fields.positionField.placeholder}\n                                name={fields.positionField.name}\n                                value={fields.positionField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.positionField.name,\n                                        value\n                                    );\n                                }}\n                                inputProps={{ min: \"1\", max: \"30\", }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <span style={{marginTop: 13, display: \"block\"}}></span>\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <span className={classes.metatitle}>{fields.AddressField.label}</span>\n                            <CustomTextValidator\n                                id={fields.AddressField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"text\"\n                                placeholder={fields.AddressField.placeholder}\n                                name={fields.AddressField.name}\n                                value={fields.AddressField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.AddressField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className=\"jobtitlefield\"\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <span className={classes.metatitle}>{fields.QualificationField.label}</span>\n                            <ReactSelectValidator\n                                    id={fields.QualificationField.name}\n                                    name={fields.QualificationField.name}\n                                    value={fields.QualificationField.value}\n                                    placeholder={fields.QualificationField.placeholder}\n                                    isClearable={true}\n                                    onChange={value => {\n                                        selectFieldChangeHandler(\n                                            fields.QualificationField.name,\n                                            value\n                                        );\n                                    }}\n                                    isSearchable={true}\n                                    options={fields.QualificationField.options}\n                                />\n                        </Grid>\n                        \n                    </Grid>\n\n                    {/* salary details start here  */}\n                    <div className={classes.switchfield}>\n                    <span>{fields.remoteWorkingField.label}</span>\n                    <FormControlLabel\n                        control={\n                        <Switch\n                            checked={fields.remoteWorkingField.value}\n                            onChange={(e) => switchChangeHandler(fields.remoteWorkingField.name, e)}\n                            name={fields.remoteWorkingField.name}\n                            color=\"primary\"\n                        />\n                        }\n                        label=\"\"\n                    />\n                    </div>\n\n                    <div>\n                            <FormLabel component=\"legend\">Salary Type</FormLabel>\n                            <RadioGroup\n                                value={fields.salaryTypeField.value} \n                                onChange={radioChangeHandler}\n                            >\n                                <FormControlLabel value=\"hourly\" control={<Radio color=\"primary\" />} label=\"Hourly\" />\n                                {\n                                    fields.salaryTypeField.value === \"hourly\" ? \n                                <CustomTextValidator\n                                id={fields.hourlyMaxRateField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"number\"\n                                placeholder={fields.hourlyMaxRateField.placeholder}\n                                name={fields.hourlyMaxRateField.name}\n                                value={fields.hourlyMaxRateField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.hourlyMaxRateField.name,\n                                        value\n                                    );\n                                }}\n                                inputProps={{ min: \"1\", max: \"10000\", }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.radioFields}\n                            /> : null }\n                                \n                                <FormControlLabel value=\"monthly\" control={<Radio color=\"primary\" />} label=\"Monthly\" />\n\n                                {\n                                    fields.salaryTypeField.value === \"monthly\" ? \n                                <div style={{display: \"inline-block\"}}>\n                                    <ReactSelectValidator\n                                        id={fields.monthlySalaryRangField.name}\n                                        name={fields.monthlySalaryRangField.name}\n                                        value={fields.monthlySalaryRangField.value}\n                                        placeholder={fields.monthlySalaryRangField.placeholder}\n                                        isClearable={true}\n                                        onChange={value => {\n                                            selectFieldChangeHandler(\n                                                fields.monthlySalaryRangField.name,\n                                                value\n                                            );\n                                        }}\n                                        isSearchable={true}\n                                        options={fields.monthlySalaryRangField.options}\n                                        className={classes.radioFields}\n                                    />\n\n                                    <ReactSelectValidator\n                                        id={fields.monthlyCurrencyField.name}\n                                        name={fields.monthlyCurrencyField.name}\n                                        value={fields.monthlyCurrencyField.value}\n                                        placeholder={fields.monthlyCurrencyField.placeholder}\n                                        isClearable={true}\n                                        onChange={value => {\n                                            selectFieldChangeHandler(\n                                                fields.monthlyCurrencyField.name,\n                                                value\n                                            );\n                                        }}\n                                        isSearchable={true}\n                                        options={fields.monthlyCurrencyField.options}\n                                        className={classes.radioFields}\n                                    />\n                                </div> : null }\n\n                                <FormControlLabel value=\"yearly\" control={<Radio color=\"primary\" />} label=\"Yearly\" />\n                                {\n                                    fields.salaryTypeField.value === \"yearly\" ? \n                                <div style={{display: \"inline-block\"}}>\n                                    <ReactSelectValidator\n                                        id={fields.yearlySalaryRangField.name}\n                                        name={fields.yearlySalaryRangField.name}\n                                        value={fields.yearlySalaryRangField.value}\n                                        placeholder={fields.yearlySalaryRangField.placeholder}\n                                        isClearable={true}\n                                        onChange={value => {\n                                            selectFieldChangeHandler(\n                                                fields.yearlySalaryRangField.name,\n                                                value\n                                            );\n                                        }}\n                                        isSearchable={true}\n                                        options={fields.yearlySalaryRangField.options}\n                                        className={classes.radioFields}\n                                    />\n\n                                    <ReactSelectValidator\n                                        id={fields.yearlyCurrencyField.name}\n                                        name={fields.yearlyCurrencyField.name}\n                                        value={fields.yearlyCurrencyField.value}\n                                        placeholder={fields.yearlyCurrencyField.placeholder}\n                                        isClearable={true}\n                                        onChange={value => {\n                                            selectFieldChangeHandler(\n                                                fields.yearlyCurrencyField.name,\n                                                value\n                                            );\n                                        }}\n                                        isSearchable={true}\n                                        options={fields.yearlyCurrencyField.options}\n                                        className={classes.radioFields}\n                                    />\n                                </div> : null }\n                            </RadioGroup>\n                    </div>\n\n                    <div className={classes.switchfield}>\n                    <span>{fields.showSalaryField.label}</span>\n                    <FormControlLabel\n                        control={\n                        <Switch\n                            checked={fields.showSalaryField.value}\n                            onChange={(e) => switchChangeHandler(fields.showSalaryField.name, e)}\n                            name={fields.showSalaryField.name}\n                            color=\"primary\"\n                        />\n                        }\n                        label=\"\"\n                    />\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default withStyles(styles)(JobOpeningMetaFields);"]},"metadata":{},"sourceType":"module"}