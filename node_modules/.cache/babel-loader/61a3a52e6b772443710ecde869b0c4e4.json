{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\JD\\\\JDBuilding\\\\JobOpening\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport JobOpeningMetaFields from \"./MetaFields/container\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport AlertDialog from \"../../../common/ReduxBased/confirmationDialog/container\";\nimport Login from \"../../../Login/container\";\nimport CollaboratorAndPreview from \"../CollaboratorAndPreview/container\";\nimport { getAppStoreValue } from \"../../../common/Helpers\";\nimport ls from 'local-storage';\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\nimport Snackbar from '@material-ui/core/Snackbar';\n\nclass JobOpening extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.componentDidMount = () => {\n      const userId = getAppStoreValue('user_id');\n      const userName = getAppStoreValue('nameTitle');\n      let isLogin = userId && userName ? true : false;\n\n      if (isLogin) {\n        this.props.getJobCode();\n      }\n\n      this.props.fetchDataSuggestedTemplate();\n    };\n\n    this.SubmitHandler = () => {\n      this.props.headerPathActiveHandler(0);\n    };\n\n    this.saveJobOpening = () => {\n      var experience = {\n        \"min_exp\": this.props.minYearField,\n        \"max_exp\": this.props.maxYearField\n      };\n      var rolesDataFilter = this.props.rolesData.filter(item => {\n        return item.isActive == true;\n      }).map(item => item.id);\n      var resDataFilter = this.props.resData.filter(item => {\n        return item.isActive == true;\n      }).map(item => item.id);\n      console.log('these are props', this.props);\n      let salary_range = {\n        min_sal: null,\n        max_sal: null\n      };\n\n      if (this.props.salaryTypeField === \"yearly\") {\n        let min_max = this.props.yearlySalaryRangField[0].value.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      } else if (this.props.salaryTypeField === \"hourly\") {\n        let min_max = this.props.hourlyMaxRateField[0].value.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      } else if (this.props.salaryTypeField === \"monthly\") {\n        let min_max = this.props.monthlySalaryRangField[0].value.split('-');\n        salary_range.min_sal = parseInt(min_max[0]);\n        salary_range.max_sal = parseInt(min_max[1]);\n      }\n\n      let savedTempId = ls.get('suggestedTempId');\n      let paramVal = this.props.templateId ? this.props.templateId : savedTempId;\n      let data = {\n        job_code: this.props.jobCodeField,\n        template_id: paramVal,\n        title: this.props.jobTitle,\n        _selected_rr: {\n          htmlstring: this.props.rolesResHTMLData,\n          rol: rolesDataFilter,\n          res: resDataFilter\n        },\n        salary_detail: {\n          sal_range: salary_range,\n          type: this.props.salaryTypeField,\n          currency: 'Dollar',\n          visible: true\n        },\n        exp: experience,\n        _selected_industry: this.props.industryField[0].id,\n        _selected_function: this.props.functionField[0].id,\n        employment_type: this.props.employmenTypeField[0].value,\n        positions: parseInt(this.props.positionField),\n        remote_work: this.props.remoteWorkingField,\n        qualification: this.props.QualificationField,\n        address: this.props.AddressField\n      };\n      console.log(data);\n      instance.post(BASE_URL + '/UserTemplates', data).then(res => {\n        this.props.history.push('/create/info');\n      }).catch(error => {\n        this.setState({\n          open: true\n        });\n      });\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      headerPathActiveHandler,\n      isLogin\n    } = this.props;\n    const userText = getAppStoreValue(\"userText\");\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.jobopeningwrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(CollaboratorAndPreview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.SubmitHandler // autoComplete=\"off\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(JobOpeningMetaFields, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), userText ? React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      onClick: this.saveJobOpening,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Save & Next\") : React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Next\"))), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      },\n      open: this.state.open,\n      autoHideDuration: 600,\n      message: \"Please fill all the details\",\n      action: React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(styles)(withRouter(JobOpening));","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/component.js"],"names":["React","Component","styles","withStyles","Button","AddIcon","JobOpeningMetaFields","ValidatorForm","NavLink","withRouter","AlertDialog","Login","CollaboratorAndPreview","getAppStoreValue","ls","instance","BASE_URL","BASE_URL_SQL","Snackbar","JobOpening","state","open","componentDidMount","userId","userName","isLogin","props","getJobCode","fetchDataSuggestedTemplate","SubmitHandler","headerPathActiveHandler","saveJobOpening","experience","minYearField","maxYearField","rolesDataFilter","rolesData","filter","item","isActive","map","id","resDataFilter","resData","console","log","salary_range","min_sal","max_sal","salaryTypeField","min_max","yearlySalaryRangField","value","split","hourlyMaxRateField","monthlySalaryRangField","parseInt","savedTempId","get","paramVal","templateId","data","job_code","jobCodeField","template_id","title","jobTitle","_selected_rr","htmlstring","rolesResHTMLData","rol","res","salary_detail","sal_range","type","currency","visible","exp","_selected_industry","industryField","_selected_function","functionField","employment_type","employmenTypeField","positions","positionField","remote_work","remoteWorkingField","qualification","QualificationField","address","AddressField","post","then","history","push","catch","error","setState","render","classes","userText","jobopeningwrapper","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { styles } from \"./styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport JobOpeningMetaFields from \"./MetaFields/container\";\r\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport AlertDialog from \"../../../common/ReduxBased/confirmationDialog/container\";\r\nimport Login from \"../../../Login/container\";\r\nimport CollaboratorAndPreview from \"../CollaboratorAndPreview/container\";\r\nimport { getAppStoreValue } from \"../../../common/Helpers\";\r\nimport ls from 'local-storage';\r\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nclass JobOpening extends Component {\r\n    state = {\r\n      open:false\r\n        \r\n      }\r\n    componentDidMount = () => {\r\n        const userId = getAppStoreValue('user_id');\r\n        const userName = getAppStoreValue('nameTitle')\r\n        let isLogin = userId && userName ? true : false\r\n        if (isLogin) {\r\n            this.props.getJobCode();\r\n        }\r\n        this.props.fetchDataSuggestedTemplate();\r\n    }\r\n\r\n    SubmitHandler = () => {\r\n\r\n        this.props.headerPathActiveHandler(0);\r\n    }\r\n\r\n    saveJobOpening = () => {\r\n\r\n        var experience = { \"min_exp\": this.props.minYearField, \"max_exp\": this.props.maxYearField }\r\n        var rolesDataFilter = this.props.rolesData.filter((item) => {\r\n            return item.isActive == true\r\n        }).map(item => item.id)\r\n\r\n        var resDataFilter = this.props.resData.filter((item) => {\r\n            return item.isActive == true\r\n        }).map(item => item.id)\r\n        \r\n        console.log('these are props',this.props)\r\n\r\n\r\n        let salary_range = {\r\n            min_sal: null,\r\n            max_sal: null\r\n        };\r\n        if (this.props.salaryTypeField === \"yearly\") {\r\n          \r\n            let min_max = this.props.yearlySalaryRangField[0].value.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n\r\n        }\r\n        else if (this.props.salaryTypeField === \"hourly\") {\r\n            let min_max = this.props.hourlyMaxRateField[0].value.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n        }\r\n        else if (this.props.salaryTypeField === \"monthly\") {\r\n            \r\n            let min_max = this.props.monthlySalaryRangField[0].value.split('-');\r\n            salary_range.min_sal = parseInt(min_max[0]);\r\n            salary_range.max_sal = parseInt(min_max[1]);\r\n           \r\n        }\r\n        let savedTempId = ls.get('suggestedTempId')\r\n        let paramVal = this.props.templateId ? this.props.templateId : savedTempId\r\n\r\n    \r\n        let data = {\r\n\r\n            job_code: this.props.jobCodeField,\r\n            template_id: paramVal,\r\n            title: this.props.jobTitle,\r\n            _selected_rr: {\r\n                htmlstring: this.props.rolesResHTMLData,\r\n                rol: rolesDataFilter,\r\n                res: resDataFilter\r\n            },\r\n            salary_detail: {\r\n                sal_range: salary_range,\r\n                type: this.props.salaryTypeField,\r\n                currency: 'Dollar',\r\n                visible: true\r\n            },\r\n            exp: experience,\r\n            _selected_industry: this.props.industryField[0].id,\r\n            _selected_function: this.props.functionField[0].id,\r\n            employment_type: this.props.employmenTypeField[0].value,\r\n            positions: parseInt(this.props.positionField),\r\n            remote_work: this.props.remoteWorkingField,\r\n            qualification: this.props.QualificationField,\r\n            address: this.props.AddressField,\r\n\r\n\r\n        } \r\n        console.log(data)\r\n\r\n        instance.post(BASE_URL + '/UserTemplates', data)\r\n            .then(res => {\r\n                this.props.history.push('/create/info');\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    open: true\r\n                });\r\n            })\r\n\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            headerPathActiveHandler,\r\n            isLogin\r\n        } = this.props;\r\n        const userText = getAppStoreValue(\"userText\");\r\n\r\n        return (\r\n            <>\r\n                <div className={classes.jobopeningwrapper}>\r\n\r\n                    <CollaboratorAndPreview />\r\n\r\n                    <ValidatorForm\r\n                        onSubmit={this.SubmitHandler}\r\n                    // autoComplete=\"off\"\r\n                    >\r\n                        <JobOpeningMetaFields />\r\n\r\n                        {/* <NavLink\r\n                            to=\"/create/info\"\r\n                            className={classes.jdbuildingnextbtn}\r\n                            onClick={() => headerPathActiveHandler(0)}\r\n                        > */}\r\n                        {userText ?\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={this.saveJobOpening}>\r\n                                Save & Next\r\n                            </Button>\r\n                            :\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Next\r\n                            </Button>\r\n                        }\r\n                        {/* </NavLink> */}\r\n                    </ValidatorForm>\r\n                </div>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.open}\r\n                    autoHideDuration={600}\r\n                   \r\n                    message=\"Please fill all the details\"\r\n                    action={\r\n                        <React.Fragment>\r\n\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withRouter(JobOpening));"]},"metadata":{},"sourceType":"module"}