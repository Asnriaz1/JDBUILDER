{"ast":null,"code":"import { connect } from \"react-redux\";\nimport CompanySettingGeneral from \"./component\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../../../common/ReduxBased/LoadingSpinner/actions\";\nimport instance, { BASE_URL } from \"../../../../../../api/config\";\nimport { textFieldResetChangeHandler, saveCompanyGeneralInfo, saveCompanyGeneralInfoData } from \"../actions\";\n\nconst mapStateToProps = state => ({\n  fields: state.COMPANY_INFO.forms.companyInfoForm.fields,\n  generalInfoMessage: state.COMPANY_INFO.UISettings.generalInfoMessage\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  textFieldChangeHandler: (name, e) => {\n    if (typeof e.value !== \"string\") {\n      e.value = \"\";\n    }\n\n    dispatch(textFieldResetChangeHandler(name, e.value));\n  },\n  saveCompanyGeneralInfo: (NameField, NumberField, CountryField, ProvinceField, CityField) => {\n    let data = {\n      Name: NameField,\n      Contact: NumberField,\n      CountryName: CountryField,\n      StateName: ProvinceField,\n      CityName: CityField\n    };\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"updating general info\", \"large\"));\n    instance.put(BASE_URL + 'User/Dashboard/Company/UpdateCompanyGeneral', data).then(res => {\n      dispatch(saveCompanyGeneralInfo(res.data.message));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  },\n  fetchDataIfNeeded: () => {\n    instance.get(BASE_URL + 'User/Dashboard/Company/GetCompanyGeneral').then(res => {\n      dispatch(saveCompanyGeneralInfoData(res.data));\n    }).catch(error => {});\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  saveCompanyGeneralInfo: () => {\n    dispatchProps.saveCompanyGeneralInfo(stateProps.fields.NameField.value, stateProps.fields.NumberField.value, stateProps.fields.CountryField.value, stateProps.fields.ProvinceField.value, stateProps.fields.CityField.value);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(CompanySettingGeneral);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Dashboard/AboutCompany/CompanySettings/General/container.js"],"names":["connect","CompanySettingGeneral","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","instance","BASE_URL","textFieldResetChangeHandler","saveCompanyGeneralInfo","saveCompanyGeneralInfoData","mapStateToProps","state","fields","COMPANY_INFO","forms","companyInfoForm","generalInfoMessage","UISettings","mapDispatchToProps","dispatch","props","textFieldChangeHandler","name","e","value","NameField","NumberField","CountryField","ProvinceField","CityField","data","Name","Contact","CountryName","StateName","CityName","put","then","res","message","catch","error","fetchDataIfNeeded","get","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport CompanySettingGeneral from \"./component\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../../../common/ReduxBased/LoadingSpinner/actions\";\nimport instance, { BASE_URL } from \"../../../../../../api/config\";\n\nimport {\n    textFieldResetChangeHandler,\n    saveCompanyGeneralInfo,\n    saveCompanyGeneralInfoData\n} from \"../actions\";\n\nconst mapStateToProps = state => ({\n    fields: state.COMPANY_INFO.forms.companyInfoForm.fields,\n    generalInfoMessage:state.COMPANY_INFO.UISettings.generalInfoMessage\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    textFieldChangeHandler: (name, e) => {\n        if (typeof e.value !== \"string\") {\n            e.value = \"\";\n        }\n        dispatch(textFieldResetChangeHandler(name, e.value));\n    },\n    saveCompanyGeneralInfo: (NameField, NumberField, CountryField, ProvinceField, CityField) => {\n\n        let data = {\n            Name: NameField,\n            Contact: NumberField,\n            CountryName: CountryField,\n            StateName: ProvinceField,\n            CityName: CityField\n        }\n        \n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"updating general info\", \"large\"));\n        instance.put(BASE_URL+'User/Dashboard/Company/UpdateCompanyGeneral', data)\n        .then(res => {\n            dispatch(saveCompanyGeneralInfo(res.data.message));\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    },\n    fetchDataIfNeeded: () => {\n        instance.get(BASE_URL+'User/Dashboard/Company/GetCompanyGeneral')\n        .then(res => {\n            dispatch(saveCompanyGeneralInfoData(res.data));\n        })\n        .catch(error => {\n        })\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    saveCompanyGeneralInfo: () => {\n        dispatchProps.saveCompanyGeneralInfo(stateProps.fields.NameField.value, stateProps.fields.NumberField.value, stateProps.fields.CountryField.value, stateProps.fields.ProvinceField.value, stateProps.fields.CityField.value)\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(CompanySettingGeneral);"]},"metadata":{},"sourceType":"module"}