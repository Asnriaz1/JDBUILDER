{"ast":null,"code":"import { connect } from \"react-redux\";\nimport SuggestedTemplates from \"./component\";\nimport { saveUpdatedTemplates, saveTemplateIdHandler } from \"../../actions\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport ls from 'local-storage';\n\nconst mapStateToProps = state => ({\n  templates: state.JDLANDING.data.templatesData,\n  templateJobId: state.JDLANDING.data.templateJobId,\n  templateSpecId: state.JDLANDING.data.templateSpecId\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  saveUpdatedTemplates: (templateJobId, templateSpecId) => {\n    ls.set('jobCode', '');\n    let savedJobId = ls.get('jobId');\n    let savedSpecId = ls.get('specId');\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n    savedJobId = templateJobId ? templateJobId : savedJobId;\n    savedSpecId = templateSpecId ? templateSpecId : savedSpecId;\n    let paramVal = savedSpecId ? 'specId=' + savedSpecId : 'jobId=' + savedJobId;\n    instance.get(BASE_URL + 'Templates?' + paramVal).then(res => {\n      dispatch(saveUpdatedTemplates(res.data));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  },\n  saveTemplateIdHandler: value => {\n    ls.set('suggestedTempId', value);\n    dispatch(saveTemplateIdHandler(value));\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  saveUpdatedTemplates: () => {\n    dispatchProps.saveUpdatedTemplates(stateProps.templateJobId, stateProps.templateSpecId);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(SuggestedTemplates);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Templates/Suggested/container.js"],"names":["connect","SuggestedTemplates","saveUpdatedTemplates","saveTemplateIdHandler","instance","BASE_URL","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","ls","mapStateToProps","state","templates","JDLANDING","data","templatesData","templateJobId","templateSpecId","mapDispatchToProps","dispatch","props","set","savedJobId","get","savedSpecId","paramVal","then","res","catch","error","value","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,kBAAP,MAA+B,aAA/B;AACA,SACIC,oBADJ,EAEIC,qBAFJ,QAGO,eAHP;AAKA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,wBAAnC;AACA,SACIC,yBADJ,EAEIC,mCAFJ,QAGO,mDAHP;AAIA,OAAOC,EAAP,MAAe,eAAf;;AAEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,SAAS,EAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBC,aADF;AAE9BC,EAAAA,aAAa,EAAEL,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBE,aAFN;AAG9BC,EAAAA,cAAc,EAAEN,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBG;AAHP,CAAL,CAA7B;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAC7CjB,EAAAA,oBAAoB,EAAE,CAACa,aAAD,EAAgBC,cAAhB,KAAmC;AACrDR,IAAAA,EAAE,CAACY,GAAH,CAAO,SAAP,EAAkB,EAAlB;AACA,QAAIC,UAAU,GAAGb,EAAE,CAACc,GAAH,CAAO,OAAP,CAAjB;AACA,QAAIC,WAAW,GAAGf,EAAE,CAACc,GAAH,CAAO,QAAP,CAAlB;AACAJ,IAAAA,QAAQ,CAACX,mCAAmC,CAAC,IAAD,EAAO,sBAAP,EAA+B,OAA/B,CAApC,CAAR;AAEAc,IAAAA,UAAU,GAAGN,aAAa,GAAGA,aAAH,GAAmBM,UAA7C;AACAE,IAAAA,WAAW,GAAGP,cAAc,GAAGA,cAAH,GAAoBO,WAAhD;AAEA,QAAIC,QAAQ,GAAGD,WAAW,GAAG,YAAUA,WAAb,GAA2B,WAASF,UAA9D;AAEAjB,IAAAA,QAAQ,CAACkB,GAAT,CAAajB,QAAQ,GAAC,YAAT,GAAsBmB,QAAnC,EACCC,IADD,CACMC,GAAG,IAAI;AACTR,MAAAA,QAAQ,CAAChB,oBAAoB,CAACwB,GAAG,CAACb,IAAL,CAArB,CAAR;AACAK,MAAAA,QAAQ,CAACZ,yBAAyB,EAA1B,CAAR;AACH,KAJD,EAKCqB,KALD,CAKOC,KAAK,IAAI;AACZV,MAAAA,QAAQ,CAACZ,yBAAyB,EAA1B,CAAR;AACH,KAPD;AAQH,GApB4C;AAqB7CH,EAAAA,qBAAqB,EAAG0B,KAAD,IAAW;AAC9BrB,IAAAA,EAAE,CAACY,GAAH,CAAO,iBAAP,EAA0BS,KAA1B;AACAX,IAAAA,QAAQ,CAACf,qBAAqB,CAAC0B,KAAD,CAAtB,CAAR;AACH;AAxB4C,CAAtB,CAA3B;;AA2BA,MAAMC,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzD9B,EAAAA,oBAAoB,EAAE,MAAM;AACxB8B,IAAAA,aAAa,CAAC9B,oBAAd,CAAmC6B,UAAU,CAAChB,aAA9C,EAA6DgB,UAAU,CAACf,cAAxE;AACH,GALwD;AAMzD,KAAGiB;AANsD,CAA1C,CAAnB;;AASA,eAAejC,OAAO,CAClBS,eADkB,EAElBQ,kBAFkB,EAGlBa,UAHkB,CAAP,CAIb7B,kBAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport SuggestedTemplates from \"./component\";\nimport {\n    saveUpdatedTemplates,\n    saveTemplateIdHandler\n} from \"../../actions\";\n\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport ls from 'local-storage'\n\nconst mapStateToProps = state => ({\n    templates: state.JDLANDING.data.templatesData,\n    templateJobId: state.JDLANDING.data.templateJobId,\n    templateSpecId: state.JDLANDING.data.templateSpecId\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    saveUpdatedTemplates: (templateJobId, templateSpecId) => {\n        ls.set('jobCode', '');\n        let savedJobId = ls.get('jobId')\n        let savedSpecId = ls.get('specId')\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n\n        savedJobId = templateJobId ? templateJobId : savedJobId\n        savedSpecId = templateSpecId ? templateSpecId : savedSpecId\n\n        let paramVal = savedSpecId ? 'specId='+savedSpecId : 'jobId='+savedJobId\n        \n        instance.get(BASE_URL+'Templates?'+paramVal)\n        .then(res => {\n            dispatch(saveUpdatedTemplates(res.data));\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    },\n    saveTemplateIdHandler: (value) => {\n        ls.set('suggestedTempId', value);\n        dispatch(saveTemplateIdHandler(value));\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    saveUpdatedTemplates: () => {\n        dispatchProps.saveUpdatedTemplates(stateProps.templateJobId, stateProps.templateSpecId)\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(SuggestedTemplates);"]},"metadata":{},"sourceType":"module"}