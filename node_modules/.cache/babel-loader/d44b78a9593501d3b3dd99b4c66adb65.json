{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\JD\\\\JDBuilding\\\\Summary\\\\MetaFields\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Grid, Tooltip, Zoom } from \"@material-ui/core\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes } from 'react-mui-draft-wysiwyg';\nimport { ContentState, convertToRaw, convertFromRaw } from 'draft-js';\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\nconst editorConfig = {};\nconst rawContent = {\n  blocks: [],\n  entityMap: {}\n};\n\nclass JobSummaryMetaFields extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = newState => {\n      this.setState({\n        editorState: newState\n      });\n    };\n\n    this.componentDidMount = () => {\n      window.scrollTo(0, null); // this.props.fetchDataIfNeeded();\n\n      let convertedData = convertFromHTML(this.props.rawContentSummaryAsHTML);\n      let convertedRawData = convertToRaw(convertedData);\n      const rawContents = {\n        blocks: [...convertedRawData.blocks],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedSummaryEditor(rawContents);\n    };\n\n    this.appendSummaryToEditor = (value, index) => {\n      this.props.summaryDataActiveHandler(index);\n      let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n      let newItem = {\n        data: {},\n        depth: 0,\n        entityRanges: [],\n        inlineStyleRanges: [],\n        key: oldData.blocks.length + \"roles\",\n        text: value,\n        type: 'paragraph'\n      };\n      oldData = [...oldData.blocks, newItem];\n      const rawContents = {\n        blocks: [...oldData],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedSummaryEditor(rawContents);\n    };\n\n    this.componentWillUnmount = () => {\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n    };\n\n    this.state = {\n      editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(this.props.rawContentSummary))\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      dataList\n    } = this.props;\n    const config = {\n      toolbar: {\n        controls: [toolbarControlTypes.bold, toolbarControlTypes.italic, toolbarControlTypes.underline, toolbarControlTypes.unorderedList, toolbarControlTypes.orderedList]\n      },\n      editor: {\n        className: 'texteditor'\n      }\n    };\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.metafieldwrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.rolesandreswrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classes.metatitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Summary\"), React.createElement(\"div\", {\n      className: classes.texteditorwrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(MUIEditor, {\n      editorState: this.state.editorState,\n      onChange: this.onChange,\n      config: config,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.suggesteditems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, dataList.map((item, index) => React.createElement(Tooltip, {\n      key: index,\n      title: item.desc,\n      arrow: true,\n      placement: \"left\",\n      TransitionComponent: Zoom,\n      TransitionProps: {\n        timeout: 600\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"item\",\n      onClick: () => this.appendSummaryToEditor(item.desc, index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(CheckCircleIcon, {\n      className: item.isActive ? classes.addeditembg : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, item.desc))))))))));\n  }\n\n}\n\nexport default withStyles(styles)(JobSummaryMetaFields);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/Summary/MetaFields/component.js"],"names":["React","Component","styles","withStyles","Grid","Tooltip","Zoom","CheckCircleIcon","MUIEditor","MUIEditorState","toolbarControlTypes","ContentState","convertToRaw","convertFromRaw","convertToHTML","convertFromHTML","editorConfig","rawContent","blocks","entityMap","JobSummaryMetaFields","constructor","props","onChange","newState","setState","editorState","componentDidMount","window","scrollTo","convertedData","rawContentSummaryAsHTML","convertedRawData","rawContents","createWithContent","currentContentAsHTML","state","getCurrentContent","saveUpdatedSummaryAsHTML","saveUpdatedSummaryEditor","appendSummaryToEditor","value","index","summaryDataActiveHandler","oldData","newItem","data","depth","entityRanges","inlineStyleRanges","key","length","text","type","componentWillUnmount","rawContentSummary","render","classes","dataList","config","toolbar","controls","bold","italic","underline","unorderedList","orderedList","editor","className","metafieldwrapper","rolesandreswrapper","metatitle","texteditorwrapper","suggesteditems","map","item","desc","timeout","isActive","addeditembg"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Grid, Tooltip, Zoom } from \"@material-ui/core\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport MUIEditor, { MUIEditorState,toolbarControlTypes  } from 'react-mui-draft-wysiwyg'\nimport { ContentState, convertToRaw, convertFromRaw } from 'draft-js'\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\n\nconst editorConfig = {}\n  const rawContent = {\n    blocks: [],\n    entityMap: {},\n  }\n\nclass JobSummaryMetaFields extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(this.props.rawContentSummary),\n              )\n        }\n    }\n   \n    onChange = (newState) => {\n        this.setState({\n            editorState: newState\n        })\n    }\n\n    componentDidMount = () => {\n        window.scrollTo(0, null);\n        // this.props.fetchDataIfNeeded();\n\n        let convertedData = convertFromHTML(this.props.rawContentSummaryAsHTML);\n        let convertedRawData = convertToRaw(convertedData);\n\n        const rawContents = {\n            blocks: [...convertedRawData.blocks],\n            entityMap: {},\n        }\n        this.setState({\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(rawContents),\n              )\n        })\n\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n\n        this.props.saveUpdatedSummaryEditor(rawContents);\n    }\n\n    appendSummaryToEditor = (value, index) => {\n        this.props.summaryDataActiveHandler(index);\n\n        let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n\n        let newItem = {\n            data: {},\n            depth: 0,\n            entityRanges: [],\n            inlineStyleRanges: [],\n            key: oldData.blocks.length+\"roles\",\n            text: value,\n            type: 'paragraph',\n          };\n        oldData = [...oldData.blocks, newItem]\n        const rawContents = {\n            blocks: [...oldData],\n            entityMap: {},\n        }\n        this.setState({\n            editorState: MUIEditorState.createWithContent(\n                editorConfig,\n                convertFromRaw(rawContents),\n              )\n        })\n\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n\n        this.props.saveUpdatedSummaryEditor(rawContents);\n    }\n\n    componentWillUnmount = () => {\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n        this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n    }\n\n    render() {\n        const {\n            classes,\n            dataList,\n        } = this.props;\n        const config = {\n            toolbar: {\n               controls: [\n                   toolbarControlTypes.bold,\n                   toolbarControlTypes.italic,\n                   toolbarControlTypes.underline,\n                   toolbarControlTypes.unorderedList,\n                   toolbarControlTypes.orderedList,\n                 ],\n               },\n               editor: {\n                className: 'texteditor',\n              },\n        }; \n        return (\n            <>\n                <div className={classes.metafieldwrapper}>\n                    <div className={classes.rolesandreswrapper}>\n                    <Grid container>\n                        <Grid item xs={12} md={8}>\n                            <span className={classes.metatitle}>Summary</span>\n                            <div className={classes.texteditorwrapper}>\n                                <MUIEditor editorState={this.state.editorState} \n                                    onChange={this.onChange}\n                                    config={config}\n                                />\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <div className={classes.suggesteditems}>\n                                {\n                                    dataList.map((item, index) => (\n                                        <Tooltip key={index} title={item.desc} arrow placement=\"left\" TransitionComponent={Zoom} TransitionProps={{ timeout: 600 }}>\n                                        <div className=\"item\" onClick={() => this.appendSummaryToEditor(item.desc, index)}>\n                                            <CheckCircleIcon className={item.isActive ? classes.addeditembg : \"\"}/>\n                                            <span className=\"description\">{item.desc}</span>\n                                        </div>\n                                        </Tooltip>\n                                    ))\n                                }\n                            </div>\n                        </Grid>\n                    </Grid>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default withStyles(styles)(JobSummaryMetaFields);"]},"metadata":{},"sourceType":"module"}