{"ast":null,"code":"import { connect } from \"react-redux\";\nimport CollaboratorAndPreview from \"./component\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport instance, { BASE_URL_COL } from \"../../../../api/config\";\n\nconst mapStateToProps = state => ({\n  templateSpecId: state.JDLANDING.data.templateSpecId,\n  templateId: state.JDLANDING.data.templateId,\n  addedCollaborator: state.ADD_COLLABORATOR.data.addedCollaborator\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  sendCollaboration: addedCollaborator => {\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Invite...\", \"large\"));\n    instance.post(BASE_URL_COL + 'User/SendCollabInvite', addedCollaborator).then(res => {\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  sendCollaboration: () => {\n    dispatchProps.sendCollaboration(stateProps.addedCollaborator);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(CollaboratorAndPreview);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/CollaboratorAndPreview/container.js"],"names":["connect","CollaboratorAndPreview","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","instance","BASE_URL_COL","mapStateToProps","state","templateSpecId","JDLANDING","data","templateId","addedCollaborator","ADD_COLLABORATOR","mapDispatchToProps","dispatch","props","sendCollaboration","post","then","res","catch","error","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,sBAAP,MAAmC,aAAnC;AACA,SACIC,yBADJ,EAEIC,mCAFJ,QAGO,mDAHP;AAIA,OAAOC,QAAP,IAAmBC,YAAnB,QAAuC,wBAAvC;;AAEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,cAAc,EAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBF,cADP;AAE9BG,EAAAA,UAAU,EAAEJ,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBC,UAFH;AAG9BC,EAAAA,iBAAiB,EAAEL,KAAK,CAACM,gBAAN,CAAuBH,IAAvB,CAA4BE;AAHjB,CAAL,CAA7B;;AAMA,MAAME,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAC7CC,EAAAA,iBAAiB,EAAGL,iBAAD,IAAuB;AACtCG,IAAAA,QAAQ,CAACZ,mCAAmC,CAAC,IAAD,EAAO,mBAAP,EAA4B,OAA5B,CAApC,CAAR;AAEAC,IAAAA,QAAQ,CAACc,IAAT,CAAcb,YAAY,GAAC,uBAA3B,EAAoDO,iBAApD,EACCO,IADD,CACMC,GAAG,IAAI;AACTL,MAAAA,QAAQ,CAACb,yBAAyB,EAA1B,CAAR;AACH,KAHD,EAICmB,KAJD,CAIOC,KAAK,IAAI;AACZP,MAAAA,QAAQ,CAACb,yBAAyB,EAA1B,CAAR;AACH,KAND;AAOH;AAX4C,CAAtB,CAA3B;;AAeA,MAAMqB,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzDR,EAAAA,iBAAiB,EAAE,MAAM;AACrBQ,IAAAA,aAAa,CAACR,iBAAd,CAAgCO,UAAU,CAACZ,iBAA3C;AACH,GALwD;AAMzD,KAAGc;AANsD,CAA1C,CAAnB;;AASA,eAAe1B,OAAO,CAClBM,eADkB,EAElBQ,kBAFkB,EAGlBS,UAHkB,CAAP,CAIbtB,sBAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport CollaboratorAndPreview from \"./component\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport instance, { BASE_URL_COL } from \"../../../../api/config\";\n\nconst mapStateToProps = state => ({\n    templateSpecId: state.JDLANDING.data.templateSpecId,\n    templateId: state.JDLANDING.data.templateId,\n    addedCollaborator: state.ADD_COLLABORATOR.data.addedCollaborator\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    sendCollaboration: (addedCollaborator) => {\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Invite...\", \"large\"));\n\n        instance.post(BASE_URL_COL+'User/SendCollabInvite', addedCollaborator)\n        .then(res => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    }\n    \n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    sendCollaboration: () => {\n        dispatchProps.sendCollaboration(stateProps.addedCollaborator)\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(CollaboratorAndPreview);"]},"metadata":{},"sourceType":"module"}