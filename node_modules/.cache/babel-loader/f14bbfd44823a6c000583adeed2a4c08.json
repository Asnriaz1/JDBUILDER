{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{withStyles}from\"@material-ui/core/styles\";import{styles}from\"./styles\";import Button from\"@material-ui/core/Button\";import Dialog from\"@material-ui/core/Dialog\";import DialogContent from\"@material-ui/core/DialogContent\";import DialogTitle from\"@material-ui/core/DialogTitle\";import DialogContentText from\"@material-ui/core/DialogContentText\";import DialogActions from\"@material-ui/core/DialogActions\";import Grid from\"@material-ui/core/Grid\";import{Prompt,Redirect}from\"react-router-dom\";var AlertDialog=/*#__PURE__*/function(_Component){_inherits(AlertDialog,_Component);function AlertDialog(props){var _this;_classCallCheck(this,AlertDialog);_this=_possibleConstructorReturn(this,_getPrototypeOf(AlertDialog).call(this,props));_this.show=function(allowTransitionCallback){// we are immediately preventing any transitions here\n// but could just as easily base this off a user interaction\n// or other state\n_this.setState({open:true},function(){return allowTransitionCallback(false);});_this.props.showAlertDialogWithOptions(\"There is unsaved data on the form, if you navigate, data will be lost. Are you sure you want to continue?\",true,null,\"warning\");};_this.handleClose=function(){_this.setState({open:false});};_this.handleTransition=function(location){// example: allow transitions to /two\n// if (location.pathname === \"/addPermanentPatient/camera\" || location.pathname === \"/addPermanentPatient\") {\n// \treturn true;\n// }\nif(!!_this.props.allowedURIs){if(_this.props.allowedURIs.indexOf(location.pathname)!==-1){return true;}}_this.props.allowRedirectTo(location);return Symbol.keyFor(_this.__trigger);};_this.__trigger=Symbol.for(\"__PreventTransitionPrompt_\".concat(Date.now()));return _this;}_createClass(AlertDialog,[{key:\"componentDidMount\",value:function componentDidMount(){window[this.__trigger]=this.show;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){delete window[this.__trigger];}},{key:\"render\",value:function render(){var _this$props=this.props,classes=_this$props.classes,open=_this$props.open,showTitle=_this$props.showTitle,title=_this$props.title,message=_this$props.message,cancelButtonText=_this$props.cancelButtonText,applyButtonText=_this$props.applyButtonText,isChanged=_this$props.isChanged,redirect=_this$props.redirect,closeAlertDialog=_this$props.closeAlertDialog,cancelAlertDialog=_this$props.cancelAlertDialog,applyAlertDialog=_this$props.applyAlertDialog,maxWidth=_this$props.maxWidth,customClass=_this$props.customClass,hideApplyButton=_this$props.hideApplyButton,hideCancelButton=_this$props.hideCancelButton,disableBackdropClick=_this$props.disableBackdropClick;return React.createElement(React.Fragment,null,React.createElement(Prompt,{when:isChanged,message:this.handleTransition}),!!redirect&&!!redirect.status&&redirect.status===true?React.createElement(Redirect,{to:redirect.path}):React.createElement(Dialog,{open:open,keepMounted:true,disableBackdropClick:disableBackdropClick||true,onClose:function onClose(){},\"aria-labelledby\":\"alert-dialog-slide-title\",\"aria-describedby\":\"alert-dialog-slide-description\",maxWidth:maxWidth,fullWidth:true,PaperProps:{square:true,elevation:24},className:\"\".concat(classes.confirmationDialog,\" \").concat(!!customClass?customClass:'')// scroll={'body'}\n},showTitle?React.createElement(DialogTitle,{id:'dialogtitle',disableTypography:true,classes:{root:classes.dialogTitle}},title):React.createElement(\"span\",null),React.createElement(DialogContent,{id:'dialogcontent'},React.createElement(Grid,{container:true,justify:\"center\"},React.createElement(Grid,{item:true,xs:12},React.createElement(DialogContentText,{id:'dialogcontenttext',component:\"div\",className:classes.contentText},message)))),React.createElement(DialogActions,null,!!cancelButtonText&&!hideCancelButton&&React.createElement(Button,{onClick:cancelAlertDialog,color:this.props.cancelButtonColor||\"secondary\",variant:\"contained\"},cancelButtonText),!!applyButtonText&&!hideApplyButton&&React.createElement(Button,{onClick:applyAlertDialog,color:this.props.applyButtonColor||\"primary\",variant:\"contained\",styles:{fontFamily:\"inherit\"},type:\"submit\"},applyButtonText))));}/**\n     * Show the dialog. Invoked primarily from React Router transition\n     * handler getUserConfirmation.\n     *\n     * @param allowTransitionCallback A function that accepts a flag whether or not to allow the route transition\n     */}]);return AlertDialog;}(Component);export default withStyles(styles)(AlertDialog);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/common/ReduxBased/confirmationDialog/component.js"],"names":["React","Component","withStyles","styles","Button","Dialog","DialogContent","DialogTitle","DialogContentText","DialogActions","Grid","Prompt","Redirect","AlertDialog","props","show","allowTransitionCallback","setState","open","showAlertDialogWithOptions","handleClose","handleTransition","location","allowedURIs","indexOf","pathname","allowRedirectTo","Symbol","keyFor","__trigger","for","Date","now","window","classes","showTitle","title","message","cancelButtonText","applyButtonText","isChanged","redirect","closeAlertDialog","cancelAlertDialog","applyAlertDialog","maxWidth","customClass","hideApplyButton","hideCancelButton","disableBackdropClick","status","path","square","elevation","confirmationDialog","root","dialogTitle","contentText","cancelButtonColor","applyButtonColor","fontFamily"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport {styles} from \"./styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {Prompt, Redirect} from \"react-router-dom\";\n\nclass AlertDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.__trigger = Symbol.for(`__PreventTransitionPrompt_${Date.now()}`);\n    }\n\n    componentDidMount() {\n        window[this.__trigger] = this.show;\n    }\n\n    componentWillUnmount() {\n        delete window[this.__trigger];\n    }\n\n    render() {\n        const {\n            classes,\n            open,\n            showTitle,\n            title,\n            message,\n            cancelButtonText,\n            applyButtonText,\n            isChanged,\n            redirect,\n            closeAlertDialog,\n            cancelAlertDialog,\n            applyAlertDialog,\n            maxWidth,\n            customClass,\n            hideApplyButton,\n            hideCancelButton,\n            disableBackdropClick\n        } = this.props;\n        return (\n            <>\n                <Prompt when={isChanged} message={this.handleTransition}/>\n                {!!redirect && !!redirect.status && redirect.status === true ? (\n                    <Redirect to={redirect.path}/>\n                ) : (\n                    <Dialog\n                        open={open}\n                        keepMounted\n                        disableBackdropClick={disableBackdropClick || true}\n                        onClose={() => {}}\n                        aria-labelledby='alert-dialog-slide-title'\n                        aria-describedby='alert-dialog-slide-description'\n                        maxWidth={maxWidth}\n                        fullWidth={true}\n                        PaperProps={{\n                            square: true,\n                            elevation: 24\n                        }}\n                        className={`${classes.confirmationDialog} ${!!customClass ? customClass : ''}`}\n                        // scroll={'body'}\n                    >\n                        {showTitle ? <DialogTitle id={'dialogtitle'} disableTypography={true}\n                                                  classes={{root: classes.dialogTitle}}>{title}</DialogTitle> : <span/>}\n                        <DialogContent id={'dialogcontent'}>\n                            <Grid container justify={\"center\"}>\n                                <Grid item xs={12}>\n                                    <DialogContentText id={'dialogcontenttext'} component={\"div\"}\n                                                       className={classes.contentText}>{message}</DialogContentText>\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            {!!cancelButtonText && !hideCancelButton && (\n                                <Button onClick={cancelAlertDialog} color={this.props.cancelButtonColor || \"secondary\"}\n                                        variant={\"contained\"}>\n                                    {cancelButtonText}\n                                </Button>\n                            )}\n                            {!!applyButtonText && !hideApplyButton && (\n                                <Button onClick={applyAlertDialog} color={this.props.applyButtonColor || \"primary\"}\n                                        variant={\"contained\"} styles={{fontFamily: \"inherit\"}} type={\"submit\"}>\n                                    {applyButtonText}\n                                </Button>\n                            )}\n                        </DialogActions>\n                    </Dialog>\n                )}\n            </>\n        );\n    }\n\n    /**\n     * Show the dialog. Invoked primarily from React Router transition\n     * handler getUserConfirmation.\n     *\n     * @param allowTransitionCallback A function that accepts a flag whether or not to allow the route transition\n     */\n    show = allowTransitionCallback => {\n        // we are immediately preventing any transitions here\n        // but could just as easily base this off a user interaction\n        // or other state\n        this.setState({open: true}, () => allowTransitionCallback(false));\n        this.props.showAlertDialogWithOptions(\"There is unsaved data on the form, if you navigate, data will be lost. Are you sure you want to continue?\", true, null, \"warning\");\n    };\n\n    /**\n     * Closes the dialog\n     */\n    handleClose = () => {\n        this.setState({open: false});\n    };\n\n    /**\n     * Handles the Router transition. Returns true if allowed\n     * or the dialog trigger key to enable the dialog.\n     *\n     * This would be a good candidate to allow optionally\n     * being passed as a callback prop to let\n     * caller decide if transition is allowed.\n     */\n    handleTransition = location => {\n        // example: allow transitions to /two\n        // if (location.pathname === \"/addPermanentPatient/camera\" || location.pathname === \"/addPermanentPatient\") {\n        // \treturn true;\n        // }\n        if (!!this.props.allowedURIs) {\n            if (this.props.allowedURIs.indexOf(location.pathname) !== -1) {\n                return true;\n            }\n        }\n        this.props.allowRedirectTo(location);\n        return Symbol.keyFor(this.__trigger);\n    };\n}\n\nAlertDialog.propTypes = {};\n\nexport default withStyles(styles)(AlertDialog);\n"]},"metadata":{},"sourceType":"module"}