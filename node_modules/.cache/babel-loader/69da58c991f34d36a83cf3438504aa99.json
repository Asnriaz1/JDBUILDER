{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\Signup\\\\ResetPassword\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport CustomTextValidator from \"../../common/ReduxBased/CustomTextValidator/component\";\nimport { NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ResetPasswordPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      resetToken: \"\"\n    };\n\n    this.componentDidMount = () => {\n      let token = window.location.search.replace(\"?ResetToken=\", \"\");\n      this.setState({\n        resetToken: token\n      });\n    };\n\n    this.SubmitHandler = () => {\n      this.props.submitResetFormHandler();\n    };\n\n    this.submitNewPasswordHandler = () => {\n      this.props.submitNewPasswordHandler(this.state.resetToken);\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      fields,\n      textFieldChangeHandler,\n      error,\n      resetPasswordMessage\n    } = this.props;\n    const {\n      resetToken\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.polygonbg,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.signupWrapper,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: classes.signuptitle,\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.signupsubtitle,\n            children: resetToken ? \"Enter your new password\" : \"Enter your email so we can send you a link to reset your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), resetToken ? /*#__PURE__*/_jsxDEV(ValidatorForm, {\n            onSubmit: this.submitNewPasswordHandler,\n            autoComplete: \"off\",\n            children: [/*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.PasswordField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"password\",\n              placeholder: fields.PasswordField.placeholder,\n              name: fields.PasswordField.name,\n              value: fields.PasswordField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.PasswordField.name, value);\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"],\n              className: classes.signupfields\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.ConfirmPasswordField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"password\",\n              placeholder: fields.ConfirmPasswordField.placeholder,\n              name: fields.ConfirmPasswordField.name,\n              value: fields.ConfirmPasswordField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.ConfirmPasswordField.name, value);\n              },\n              validators: [\"required\"],\n              errorMessages: [\"Required\"],\n              className: classes.signupfields\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this), resetPasswordMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.error,\n              children: resetPasswordMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 60\n            }, this) : null, resetPasswordMessage === \"Password updated successfully\" ? /*#__PURE__*/_jsxDEV(NavLink, {\n              to: '/login',\n              className: classes.signupSubmitBtn,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              className: classes.signupSubmitBtn,\n              children: \"Reset Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 42\n          }, this) : /*#__PURE__*/_jsxDEV(ValidatorForm, {\n            onSubmit: this.SubmitHandler,\n            autoComplete: \"off\",\n            children: [/*#__PURE__*/_jsxDEV(CustomTextValidator, {\n              id: fields.EmailField.name,\n              validations: true,\n              fullWidth: true,\n              type: \"text\",\n              placeholder: fields.EmailField.placeholder,\n              name: fields.EmailField.name,\n              value: fields.EmailField.value,\n              onChange: value => {\n                textFieldChangeHandler(fields.EmailField.name, value);\n              },\n              validators: [\"required\", \"matchRegexp:^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$\"],\n              errorMessages: [\"Required\", \"Please enter a valid email\"],\n              className: classes.signupfields\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), error ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.error,\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 41\n            }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              className: classes.signupSubmitBtn,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default withStyles(styles)(ResetPasswordPage);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/Signup/ResetPassword/component.js"],"names":["React","Component","styles","withStyles","Button","Grid","ValidatorForm","CustomTextValidator","NavLink","ResetPasswordPage","state","resetToken","componentDidMount","token","window","location","search","replace","setState","SubmitHandler","props","submitResetFormHandler","submitNewPasswordHandler","render","classes","fields","textFieldChangeHandler","error","resetPasswordMessage","polygonbg","signupWrapper","signuptitle","signupsubtitle","PasswordField","name","placeholder","value","signupfields","ConfirmPasswordField","signupSubmitBtn","EmailField"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport CustomTextValidator from \"../../common/ReduxBased/CustomTextValidator/component\";\nimport { NavLink } from 'react-router-dom';\n\nclass ResetPasswordPage extends Component {\n\n    state = {\n        resetToken: \"\"\n    }\n\n    componentDidMount = () => {\n        let token = window.location.search.replace(\"?ResetToken=\",\"\")\n        this.setState({\n            resetToken: token\n        })\n    }\n\n    SubmitHandler = () => {\n        this.props.submitResetFormHandler();\n    }\n\n    submitNewPasswordHandler = () => {\n        this.props.submitNewPasswordHandler(this.state.resetToken);\n    }\n\n\n    render() {\n\n        const {\n            classes,\n            fields,\n            textFieldChangeHandler,\n            error,\n            resetPasswordMessage\n        } = this.props;\n\n        const {\n            resetToken\n        } = this.state;\n\n        return (\n                <div className={classes.polygonbg}>\n                <Grid container className={classes.signupWrapper}>\n\n                    <Grid item sm={4}>\n                        <h1 className={classes.signuptitle} >Reset Password</h1>\n                        <p className={classes.signupsubtitle} >\n                            {\n                                resetToken ? \"Enter your new password\" : \n                                \"Enter your email so we can send you a link to reset your password\"\n                            }\n                            </p>\n\n                        {\n                            resetToken ? <ValidatorForm\n                            onSubmit={this.submitNewPasswordHandler}\n                            autoComplete=\"off\"\n                            >\n    \n                                <CustomTextValidator\n                                id={fields.PasswordField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"password\"\n                                placeholder={fields.PasswordField.placeholder}\n                                name={fields.PasswordField.name}\n                                value={fields.PasswordField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.PasswordField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.signupfields}\n                                />\n\n                                <CustomTextValidator\n                                id={fields.ConfirmPasswordField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"password\"\n                                placeholder={fields.ConfirmPasswordField.placeholder}\n                                name={fields.ConfirmPasswordField.name}\n                                value={fields.ConfirmPasswordField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.ConfirmPasswordField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.signupfields}\n                                />\n    \n                                {\n                                    resetPasswordMessage ? <span className={classes.error}>{resetPasswordMessage}</span> : null\n                                }\n\n                                {\n                                    resetPasswordMessage  === \"Password updated successfully\" ? \n                                    <NavLink\n                                        to={'/login'}\n                                        className={classes.signupSubmitBtn}\n                                    >\n                                        Login\n                                    </NavLink> : \n                                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.signupSubmitBtn} >\n                                        Reset Password\n                                    </Button>\n                                }\n                                \n    \n                            </ValidatorForm> : \n\n                            <ValidatorForm\n                        onSubmit={this.SubmitHandler}\n                        autoComplete=\"off\"\n                        >\n\n                            <CustomTextValidator\n                            id={fields.EmailField.name}\n                            validations={true}\n                            fullWidth={true}\n                            type=\"text\"\n                            placeholder={fields.EmailField.placeholder}\n                            name={fields.EmailField.name}\n                            value={fields.EmailField.value}\n                            onChange={value => {\n                                textFieldChangeHandler(\n                                    fields.EmailField.name,\n                                    value\n                                );\n                            }}\n                            validators={[\n                                \"required\",\n                                \"matchRegexp:^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$\"\n                            ]}\n                            errorMessages={[\n                                \"Required\",\n                                \"Please enter a valid email\"\n                            ]}\n                            className={classes.signupfields}\n                            />\n\n                            {\n                                error ? <span className={classes.error}>{error}</span> : null\n                            }\n\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.signupSubmitBtn} >\n                                Send\n                            </Button>\n\n                        </ValidatorForm>\n                        }\n                        \n                    </Grid>\n                   \n                </Grid>\n                </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(ResetPasswordPage);"]},"metadata":{},"sourceType":"module"}