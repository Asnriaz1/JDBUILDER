{"ast":null,"code":"import { connect } from \"react-redux\";\nimport CreateJDLink from \"./component\";\nimport instance, { BASE_URL_SQL, BASE_URL } from \"../../../../api/config\";\nimport { textFieldChangeHandler, fetchDataIfNeeded } from \"../../JDBuilding/JobOpening/actions\";\nimport ls from 'local-storage';\nimport { withRouter } from 'react-router-dom';\n\nconst mapStateToProps = state => ({\n  templateJobId: state.JDLANDING.data.templateJobId,\n  templateSpecId: state.JDLANDING.data.templateSpecId\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  // getJobCode: () => {\n  //     instance.get(BASE_URL_SQL+'JD/GetJobCode')\n  //     .then(res => {\n  //         dispatch(textFieldChangeHandler('jobCodeField', res.data.data));\n  //     })\n  //     .catch(error => {\n  //     })\n  // },\n  fetchDataIfNeeded: (templateSpecId, templateJobId) => {\n    let savedJobId = ls.get('jobId');\n    let savedSpecId = ls.get('specId');\n    savedJobId = templateJobId ? templateJobId : savedJobId;\n    savedSpecId = templateSpecId ? templateSpecId : savedSpecId;\n\n    if (savedJobId && savedSpecId == null) {\n      this.props.history.push(\"/\");\n    }\n\n    let paramVal = savedSpecId ? 'specId=' + savedSpecId : 'jobId=' + savedJobId;\n    instance.get(BASE_URL + 'Templates/CreateNewTemplate?' + paramVal).then(res => {\n      dispatch(fetchDataIfNeeded(res.data));\n    }).catch(error => {});\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  fetchDataIfNeeded: () => {\n    dispatchProps.fetchDataIfNeeded(stateProps.templateSpecId, stateProps.templateJobId);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(CreateJDLink);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Templates/Create/container.js"],"names":["connect","CreateJDLink","instance","BASE_URL_SQL","BASE_URL","textFieldChangeHandler","fetchDataIfNeeded","ls","withRouter","mapStateToProps","state","templateJobId","JDLANDING","data","templateSpecId","mapDispatchToProps","dispatch","props","savedJobId","get","savedSpecId","history","push","paramVal","then","res","catch","error","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,OAAOC,QAAP,IAAmBC,YAAnB,EAAiCC,QAAjC,QAAiD,wBAAjD;AACA,SACIC,sBADJ,EAEIC,iBAFJ,QAGO,qCAHP;AAIA,OAAOC,EAAP,MAAe,eAAf;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAGA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,aAAa,EAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBF,aADN;AAE9BG,EAAAA,cAAc,EAAEJ,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBC;AAFP,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACAX,EAAAA,iBAAiB,EAAE,CAACQ,cAAD,EAAiBH,aAAjB,KAAmC;AAElD,QAAIO,UAAU,GAAGX,EAAE,CAACY,GAAH,CAAO,OAAP,CAAjB;AACA,QAAIC,WAAW,GAAGb,EAAE,CAACY,GAAH,CAAO,QAAP,CAAlB;AAEAD,IAAAA,UAAU,GAAGP,aAAa,GAAGA,aAAH,GAAmBO,UAA7C;AACAE,IAAAA,WAAW,GAAGN,cAAc,GAAGA,cAAH,GAAoBM,WAAhD;;AACA,QAAIF,UAAU,IAAIE,WAAW,IAAI,IAAjC,EACA;AACI,WAAKH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH;;AACD,QAAIC,QAAQ,GAAGH,WAAW,GAAG,YAAUA,WAAb,GAA2B,WAASF,UAA9D;AAEAhB,IAAAA,QAAQ,CAACiB,GAAT,CAAaf,QAAQ,GAAC,8BAAT,GAAwCmB,QAArD,EACCC,IADD,CACMC,GAAG,IAAI;AACTT,MAAAA,QAAQ,CAACV,iBAAiB,CAACmB,GAAG,CAACZ,IAAL,CAAlB,CAAR;AACH,KAHD,EAICa,KAJD,CAIOC,KAAK,IAAI,CAEf,CAND;AAOH;AA9B4C,CAAtB,CAA3B;;AAiCA,MAAMC,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzDxB,EAAAA,iBAAiB,EAAE,MAAM;AACrBwB,IAAAA,aAAa,CAACxB,iBAAd,CAAgCuB,UAAU,CAACf,cAA3C,EAA2De,UAAU,CAAClB,aAAtE;AACH,GALwD;AAMzD,KAAGoB;AANsD,CAA1C,CAAnB;;AASA,eAAe/B,OAAO,CAClBS,eADkB,EAElBM,kBAFkB,EAGlBa,UAHkB,CAAP,CAIb3B,YAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport CreateJDLink from \"./component\";\nimport instance, { BASE_URL_SQL, BASE_URL } from \"../../../../api/config\";\nimport {\n    textFieldChangeHandler,\n    fetchDataIfNeeded\n} from \"../../JDBuilding/JobOpening/actions\";\nimport ls from 'local-storage';\nimport { withRouter } from 'react-router-dom'\n\n\nconst mapStateToProps = state => ({\n    templateJobId: state.JDLANDING.data.templateJobId,\n    templateSpecId: state.JDLANDING.data.templateSpecId,\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    // getJobCode: () => {\n    //     instance.get(BASE_URL_SQL+'JD/GetJobCode')\n    //     .then(res => {\n    //         dispatch(textFieldChangeHandler('jobCodeField', res.data.data));\n    //     })\n    //     .catch(error => {\n            \n    //     })\n    // },\n    fetchDataIfNeeded: (templateSpecId, templateJobId) => {\n\n        let savedJobId = ls.get('jobId')\n        let savedSpecId = ls.get('specId')\n  \n        savedJobId = templateJobId ? templateJobId : savedJobId\n        savedSpecId = templateSpecId ? templateSpecId : savedSpecId\n        if (savedJobId && savedSpecId == null)\n        {\n            this.props.history.push(\"/\")\n        }\n        let paramVal = savedSpecId ? 'specId='+savedSpecId : 'jobId='+savedJobId\n\n        instance.get(BASE_URL+'Templates/CreateNewTemplate?'+paramVal)\n        .then(res => {\n            dispatch(fetchDataIfNeeded(res.data));\n        })\n        .catch(error => {\n            \n        })\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    fetchDataIfNeeded: () => {\n        dispatchProps.fetchDataIfNeeded(stateProps.templateSpecId, stateProps.templateJobId);\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(CreateJDLink);"]},"metadata":{},"sourceType":"module"}