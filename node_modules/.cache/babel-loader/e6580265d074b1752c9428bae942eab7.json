{"ast":null,"code":"import { connect } from \"react-redux\";\nimport UserDashboardJobs from \"./component\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport { saveCompleteTemplates, saveIncompleteTemplates, saveIncollaborationTemplates, saveCollaborationCompleteTemplates } from \"./actions\";\n\nconst mapStateToProps = state => ({\n  templatesData: state.JOBS_DASHBOARD.data.JDs\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  fetchDataIfNeeded: () => {\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n    instance.get(BASE_URL + 'User/JD/GetJDs?status=all').then(res => {\n      let completeTemplates = res.data.filter(item => {\n        return item.status === \"Complete\";\n      });\n      let incompletesTemplates = res.data.filter(item => {\n        return item.status === \"InComplete\";\n      });\n      let incollaborationTemplates = res.data.filter(item => {\n        return item.status === \"InCollaboration\";\n      });\n      let colcompleteTemplates = res.data.filter(item => {\n        return item.status === \"CollaborationComplete\";\n      });\n      dispatch(saveCompleteTemplates(completeTemplates));\n      dispatch(saveIncompleteTemplates(incompletesTemplates));\n      dispatch(saveIncollaborationTemplates(incollaborationTemplates));\n      dispatch(saveCollaborationCompleteTemplates(colcompleteTemplates));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(UserDashboardJobs);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Dashboard/Jobs/container.js"],"names":["connect","UserDashboardJobs","instance","BASE_URL","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","saveCompleteTemplates","saveIncompleteTemplates","saveIncollaborationTemplates","saveCollaborationCompleteTemplates","mapStateToProps","state","templatesData","JOBS_DASHBOARD","data","JDs","mapDispatchToProps","dispatch","props","fetchDataIfNeeded","get","then","res","completeTemplates","filter","item","status","incompletesTemplates","incollaborationTemplates","colcompleteTemplates","catch","error","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,aAA9B;AACA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,wBAAnC;AACA,SACIC,yBADJ,EAEIC,mCAFJ,QAGO,mDAHP;AAIA,SACIC,qBADJ,EAEIC,uBAFJ,EAGIC,4BAHJ,EAIIC,kCAJJ,QAKO,WALP;;AAOA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,aAAa,EAAED,KAAK,CAACE,cAAN,CAAqBC,IAArB,CAA0BC;AADX,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAC7CC,EAAAA,iBAAiB,EAAE,MAAM;AACrBF,IAAAA,QAAQ,CAACZ,mCAAmC,CAAC,IAAD,EAAO,sBAAP,EAA+B,OAA/B,CAApC,CAAR;AACAH,IAAAA,QAAQ,CAACkB,GAAT,CAAajB,QAAQ,GAAC,2BAAtB,EACCkB,IADD,CACMC,GAAG,IAAI;AACT,UAAIC,iBAAiB,GAAGD,GAAG,CAACR,IAAJ,CAASU,MAAT,CAAgBC,IAAI,IAAI;AAC5C,eAAOA,IAAI,CAACC,MAAL,KAAgB,UAAvB;AACH,OAFuB,CAAxB;AAIA,UAAIC,oBAAoB,GAAGL,GAAG,CAACR,IAAJ,CAASU,MAAT,CAAgBC,IAAI,IAAI;AAC/C,eAAOA,IAAI,CAACC,MAAL,KAAgB,YAAvB;AACH,OAF0B,CAA3B;AAIA,UAAIE,wBAAwB,GAAGN,GAAG,CAACR,IAAJ,CAASU,MAAT,CAAgBC,IAAI,IAAI;AACnD,eAAOA,IAAI,CAACC,MAAL,KAAgB,iBAAvB;AACH,OAF8B,CAA/B;AAIA,UAAIG,oBAAoB,GAAGP,GAAG,CAACR,IAAJ,CAASU,MAAT,CAAgBC,IAAI,IAAI;AAC/C,eAAOA,IAAI,CAACC,MAAL,KAAgB,uBAAvB;AACH,OAF0B,CAA3B;AAIAT,MAAAA,QAAQ,CAACX,qBAAqB,CAACiB,iBAAD,CAAtB,CAAR;AACAN,MAAAA,QAAQ,CAACV,uBAAuB,CAACoB,oBAAD,CAAxB,CAAR;AACAV,MAAAA,QAAQ,CAACT,4BAA4B,CAACoB,wBAAD,CAA7B,CAAR;AACAX,MAAAA,QAAQ,CAACR,kCAAkC,CAACoB,oBAAD,CAAnC,CAAR;AACAZ,MAAAA,QAAQ,CAACb,yBAAyB,EAA1B,CAAR;AACH,KAvBD,EAwBC0B,KAxBD,CAwBOC,KAAK,IAAI;AACZd,MAAAA,QAAQ,CAACb,yBAAyB,EAA1B,CAAR;AACH,KA1BD;AA2BH;AA9B4C,CAAtB,CAA3B;;AAiCA,MAAM4B,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzD,KAAGC;AAHsD,CAA1C,CAAnB;;AAMA,eAAenC,OAAO,CAClBU,eADkB,EAElBM,kBAFkB,EAGlBgB,UAHkB,CAAP,CAIb/B,iBAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport UserDashboardJobs from \"./component\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport {\n    saveCompleteTemplates,\n    saveIncompleteTemplates,\n    saveIncollaborationTemplates,\n    saveCollaborationCompleteTemplates\n} from \"./actions\";\n\nconst mapStateToProps = state => ({\n    templatesData: state.JOBS_DASHBOARD.data.JDs\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    fetchDataIfNeeded: () => {\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n        instance.get(BASE_URL+'User/JD/GetJDs?status=all')\n        .then(res => {\n            let completeTemplates = res.data.filter(item => {\n                return item.status === \"Complete\"\n            })\n\n            let incompletesTemplates = res.data.filter(item => {\n                return item.status === \"InComplete\"\n            })\n\n            let incollaborationTemplates = res.data.filter(item => {\n                return item.status === \"InCollaboration\"\n            })\n\n            let colcompleteTemplates = res.data.filter(item => {\n                return item.status === \"CollaborationComplete\"\n            })\n            \n            dispatch(saveCompleteTemplates(completeTemplates))\n            dispatch(saveIncompleteTemplates(incompletesTemplates))\n            dispatch(saveIncollaborationTemplates(incollaborationTemplates))\n            dispatch(saveCollaborationCompleteTemplates(colcompleteTemplates))\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(UserDashboardJobs);"]},"metadata":{},"sourceType":"module"}