{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\JD\\\\JDBuilding\\\\JobOpening\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport JobOpeningMetaFields from \"./MetaFields/container\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport AlertDialog from \"../../../common/ReduxBased/confirmationDialog/container\";\nimport Login from \"../../../Login/container\";\nimport CollaboratorAndPreview from \"../CollaboratorAndPreview/container\";\nimport { getAppStoreValue } from \"../../../common/Helpers\";\nimport ls from 'local-storage';\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\n\nclass JobOpening extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      const userId = getAppStoreValue('user_id');\n      const userName = getAppStoreValue('nameTitle');\n      let isLogin = userId && userName ? true : false;\n\n      if (isLogin) {\n        this.props.getJobCode();\n      }\n\n      this.props.fetchDataSuggestedTemplate();\n    };\n\n    this.SubmitHandler = () => {\n      this.props.history.push('/create/info');\n      this.props.headerPathActiveHandler(0);\n    };\n\n    this.saveJobOpening = () => {\n      var experience = {\n        \"min_exp\": this.props.minYearField,\n        \"max_exp\": this.props.maxYearField\n      };\n      var rolesDataFilter = this.props.rolesData.filter(item => {\n        return item.isActive == true;\n      }).map(item => item.id);\n      var resDataFilter = this.props.resData.filter(item => {\n        return item.isActive == true;\n      }).map(item => item.id);\n      console.log(this.props);\n      let salary_range = {\n        min_sal: null,\n        max_sal: null\n      };\n\n      if (this.props.salaryTypeField === \"yearly\") {\n        let min_max = this.props.yearlySalaryRangField[0].value.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      } else if (this.props.salaryTypeField === \"hourly\") {\n        let min_max = this.props.hourlyMaxRateField[0].value.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      } else if (this.props.salaryTypeField === \"monthly\") {\n        let min_max = this.props.monthlySalaryRangField[0].value.split('-');\n        salary_range.min_sal = parseInt(min_max[0]);\n        salary_range.max_sal = parseInt(min_max[1]);\n      }\n\n      let savedTempId = ls.get('suggestedTempId');\n      let paramVal = this.props.templateId ? this.props.templateId : savedTempId;\n      let data = {\n        job_code: this.props.jobCodeField,\n        template_id: paramVal,\n        title: this.props.jobTitle,\n        _selected_rr: {\n          htmlstring: this.props.rolesResHTMLData,\n          rol: rolesDataFilter,\n          res: resDataFilter\n        },\n        salary_detail: {\n          sal_range: salary_range,\n          type: this.props.salaryTypeField,\n          currency: '',\n          visible: true\n        },\n        exp: experience,\n        _selected_industry: this.props.industryField[0].id,\n        _selected_function: this.props.functionField[0].id,\n        employment_type: this.props.employmenTypeField[0].value,\n        positions: this.props.positionField,\n        remote_work: this.props.remoteWorkingField\n      };\n      console.log('adsasdasdas', data);\n      instance.post(BASE_URL + '/UserTemplates', data);\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      headerPathActiveHandler,\n      isLogin\n    } = this.props;\n    const userText = getAppStoreValue(\"userText\");\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.jobopeningwrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(CollaboratorAndPreview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.SubmitHandler // autoComplete=\"off\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(JobOpeningMetaFields, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), userText ? React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.saveJobOpening,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Save & Next\") : React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Next\"))));\n  }\n\n}\n\nexport default withStyles(styles)(withRouter(JobOpening));","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/component.js"],"names":["React","Component","styles","withStyles","Button","AddIcon","JobOpeningMetaFields","ValidatorForm","NavLink","withRouter","AlertDialog","Login","CollaboratorAndPreview","getAppStoreValue","ls","instance","BASE_URL","BASE_URL_SQL","JobOpening","componentDidMount","userId","userName","isLogin","props","getJobCode","fetchDataSuggestedTemplate","SubmitHandler","history","push","headerPathActiveHandler","saveJobOpening","experience","minYearField","maxYearField","rolesDataFilter","rolesData","filter","item","isActive","map","id","resDataFilter","resData","console","log","salary_range","min_sal","max_sal","salaryTypeField","min_max","yearlySalaryRangField","value","split","hourlyMaxRateField","monthlySalaryRangField","parseInt","savedTempId","get","paramVal","templateId","data","job_code","jobCodeField","template_id","title","jobTitle","_selected_rr","htmlstring","rolesResHTMLData","rol","res","salary_detail","sal_range","type","currency","visible","exp","_selected_industry","industryField","_selected_function","functionField","employment_type","employmenTypeField","positions","positionField","remote_work","remoteWorkingField","post","render","classes","userText","jobopeningwrapper"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,OAAOC,WAAP,MAAwB,yDAAxB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,sBAAP,MAAmC,qCAAnC;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAOC,EAAP,MAAe,eAAf;AACA,OAAOC,QAAP,IAAmBC,QAAnB,EAA6BC,YAA7B,QAAiD,wBAAjD;;AAEA,MAAMC,UAAN,SAAyBjB,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAE/BkB,iBAF+B,GAEX,MAAM;AACtB,YAAMC,MAAM,GAAGP,gBAAgB,CAAC,SAAD,CAA/B;AACA,YAAMQ,QAAQ,GAAGR,gBAAgB,CAAC,WAAD,CAAjC;AACA,UAAIS,OAAO,GAAGF,MAAM,IAAIC,QAAV,GAAqB,IAArB,GAA4B,KAA1C;;AACA,UAAIC,OAAJ,EAAa;AACT,aAAKC,KAAL,CAAWC,UAAX;AACH;;AACD,WAAKD,KAAL,CAAWE,0BAAX;AACH,KAV8B;;AAAA,SAY/BC,aAZ+B,GAYf,MAAM;AAClB,WAAKH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,cAAxB;AACA,WAAKL,KAAL,CAAWM,uBAAX,CAAmC,CAAnC;AACH,KAf8B;;AAAA,SAmB/BC,cAnB+B,GAmBf,MAAK;AAGjB,UAAIC,UAAU,GAAG;AAAC,mBAAW,KAAKR,KAAL,CAAWS,YAAvB;AAAoC,mBAAU,KAAKT,KAAL,CAAWU;AAAzD,OAAjB;AAEA,UAAIC,eAAe,GAAG,KAAKX,KAAL,CAAWY,SAAX,CAAqBC,MAArB,CAA6BC,IAAD,IAAQ;AACtD,eAAOA,IAAI,CAACC,QAAL,IAAe,IAAtB;AACH,OAFqB,EAEnBC,GAFmB,CAEfF,IAAI,IAAEA,IAAI,CAACG,EAFI,CAAtB;AAIA,UAAIC,aAAa,GAAG,KAAKlB,KAAL,CAAWmB,OAAX,CAAmBN,MAAnB,CAA2BC,IAAD,IAAQ;AAClD,eAAOA,IAAI,CAACC,QAAL,IAAe,IAAtB;AACH,OAFmB,EAEjBC,GAFiB,CAEbF,IAAI,IAAEA,IAAI,CAACG,EAFE,CAApB;AAGRG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAjB;AACQ,UAAIsB,YAAY,GAAG;AACfC,QAAAA,OAAO,EAAG,IADK;AAEfC,QAAAA,OAAO,EAAE;AAFM,OAAnB;;AAIA,UAAG,KAAKxB,KAAL,CAAWyB,eAAX,KAA6B,QAAhC,EACA;AACI,YAAIC,OAAO,GAAG,KAAK1B,KAAL,CAAW2B,qBAAX,CAAiC,CAAjC,EAAoCC,KAApC,CAA0CC,KAA1C,CAAgD,GAAhD,CAAd;AACAP,QAAAA,YAAY,CAACC,OAAb,GAAuBG,OAAO,CAAC,CAAD,CAA9B;AACAJ,QAAAA,YAAY,CAACE,OAAb,GAAuBE,OAAO,CAAC,CAAD,CAA9B;AACH,OALD,MAMK,IAAG,KAAK1B,KAAL,CAAWyB,eAAX,KAA6B,QAAhC,EACL;AACI,YAAIC,OAAO,GAAG,KAAK1B,KAAL,CAAW8B,kBAAX,CAA8B,CAA9B,EAAiCF,KAAjC,CAAuCC,KAAvC,CAA6C,GAA7C,CAAd;AACAP,QAAAA,YAAY,CAACC,OAAb,GAAuBG,OAAO,CAAC,CAAD,CAA9B;AACAJ,QAAAA,YAAY,CAACE,OAAb,GAAuBE,OAAO,CAAC,CAAD,CAA9B;AACH,OALI,MAMA,IAAI,KAAK1B,KAAL,CAAWyB,eAAX,KAA6B,SAAjC,EACL;AACI,YAAIC,OAAO,GAAG,KAAK1B,KAAL,CAAW+B,sBAAX,CAAkC,CAAlC,EAAqCH,KAArC,CAA2CC,KAA3C,CAAiD,GAAjD,CAAd;AACAP,QAAAA,YAAY,CAACC,OAAb,GAAuBS,QAAQ,CAACN,OAAO,CAAC,CAAD,CAAR,CAA/B;AACAJ,QAAAA,YAAY,CAACE,OAAb,GAAuBQ,QAAQ,CAACN,OAAO,CAAC,CAAD,CAAR,CAA/B;AACH;;AACD,UAAIO,WAAW,GAAG1C,EAAE,CAAC2C,GAAH,CAAO,iBAAP,CAAlB;AACA,UAAIC,QAAQ,GAAG,KAAKnC,KAAL,CAAWoC,UAAX,GAAwB,KAAKpC,KAAL,CAAWoC,UAAnC,GAAgDH,WAA/D;AAEA,UAAII,IAAI,GAAC;AAELC,QAAAA,QAAQ,EAAC,KAAKtC,KAAL,CAAWuC,YAFf;AAGLC,QAAAA,WAAW,EAACL,QAHP;AAILM,QAAAA,KAAK,EAAC,KAAKzC,KAAL,CAAW0C,QAJZ;AAKLC,QAAAA,YAAY,EAAE;AACVC,UAAAA,UAAU,EAAC,KAAK5C,KAAL,CAAW6C,gBADZ;AAEVC,UAAAA,GAAG,EAACnC,eAFM;AAGVoC,UAAAA,GAAG,EAAC7B;AAHM,SALT;AAUL8B,QAAAA,aAAa,EAAC;AACVC,UAAAA,SAAS,EAAC3B,YADA;AAEV4B,UAAAA,IAAI,EAAC,KAAKlD,KAAL,CAAWyB,eAFN;AAGV0B,UAAAA,QAAQ,EAAC,EAHC;AAIVC,UAAAA,OAAO,EAAC;AAJE,SAVT;AAgBLC,QAAAA,GAAG,EAAC7C,UAhBC;AAiBL8C,QAAAA,kBAAkB,EAAC,KAAKtD,KAAL,CAAWuD,aAAX,CAAyB,CAAzB,EAA4BtC,EAjB1C;AAkBLuC,QAAAA,kBAAkB,EAAC,KAAKxD,KAAL,CAAWyD,aAAX,CAAyB,CAAzB,EAA4BxC,EAlB1C;AAmBLyC,QAAAA,eAAe,EAAC,KAAK1D,KAAL,CAAW2D,kBAAX,CAA8B,CAA9B,EAAiC/B,KAnB5C;AAoBLgC,QAAAA,SAAS,EAAC,KAAK5D,KAAL,CAAW6D,aApBhB;AAqBLC,QAAAA,WAAW,EAAC,KAAK9D,KAAL,CAAW+D;AArBlB,OAAT;AA0BJ3C,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BgB,IAA1B;AAGI7C,MAAAA,QAAQ,CAACwE,IAAT,CAAcvE,QAAQ,GAAC,gBAAvB,EAAyC4C,IAAzC;AAEH,KAxF8B;AAAA;;AAyF/B4B,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,OADE;AAEF5D,MAAAA,uBAFE;AAGFP,MAAAA;AAHE,QAIF,KAAKC,KAJT;AAKA,UAAMmE,QAAQ,GAAG7E,gBAAgB,CAAC,UAAD,CAAjC;AAEA,WACI,0CACI;AAAK,MAAA,SAAS,EAAE4E,OAAO,CAACE,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII,oBAAC,aAAD;AACI,MAAA,QAAQ,EAAE,KAAKjE,aADnB,CAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAWKgE,QAAQ,GACL,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,OAAO,EAAE,KAAK5D,cAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADK,GAKL,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,IAAI,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBR,CAJJ,CADJ,CADJ;AAgCH;;AAjI8B;;AAoInC,eAAe3B,UAAU,CAACD,MAAD,CAAV,CAAmBO,UAAU,CAACS,UAAD,CAA7B,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { styles } from \"./styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport JobOpeningMetaFields from \"./MetaFields/container\";\r\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport AlertDialog from \"../../../common/ReduxBased/confirmationDialog/container\";\r\nimport Login from \"../../../Login/container\";\r\nimport CollaboratorAndPreview from \"../CollaboratorAndPreview/container\";\r\nimport { getAppStoreValue } from \"../../../common/Helpers\";\r\nimport ls from 'local-storage';\r\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\r\n\r\nclass JobOpening extends Component {\r\n\r\n    componentDidMount = () => {\r\n        const userId = getAppStoreValue('user_id');\r\n        const userName = getAppStoreValue('nameTitle')\r\n        let isLogin = userId && userName ? true : false\r\n        if (isLogin) {\r\n            this.props.getJobCode();\r\n        }\r\n        this.props.fetchDataSuggestedTemplate();\r\n    }\r\n\r\n    SubmitHandler = () => {\r\n        this.props.history.push('/create/info');\r\n        this.props.headerPathActiveHandler(0);\r\n    }\r\n\r\n\r\n\r\n    saveJobOpening =() =>{\r\n        \r\n\r\n        var experience = {\"min_exp\": this.props.minYearField,\"max_exp\":this.props.maxYearField } \r\n\r\n        var rolesDataFilter = this.props.rolesData.filter((item)=>{\r\n            return item.isActive==true\r\n        }).map(item=>item.id)\r\n\r\n        var resDataFilter = this.props.resData.filter((item)=>{\r\n            return item.isActive==true\r\n        }).map(item=>item.id)\r\nconsole.log(this.props)\r\n        let salary_range = {\r\n            min_sal : null ,\r\n            max_sal: null\r\n        };\r\n        if(this.props.salaryTypeField===\"yearly\")\r\n        {\r\n            let min_max = this.props.yearlySalaryRangField[0].value.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n        }\r\n        else if(this.props.salaryTypeField===\"hourly\")\r\n        {\r\n            let min_max = this.props.hourlyMaxRateField[0].value.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n        }\r\n        else if (this.props.salaryTypeField===\"monthly\")\r\n        {\r\n            let min_max = this.props.monthlySalaryRangField[0].value.split('-');\r\n            salary_range.min_sal = parseInt(min_max[0]);\r\n            salary_range.max_sal = parseInt(min_max[1]);\r\n        }\r\n        let savedTempId = ls.get('suggestedTempId')\r\n        let paramVal = this.props.templateId ? this.props.templateId : savedTempId\r\n\r\n        let data={\r\n\r\n            job_code:this.props.jobCodeField,\r\n            template_id:paramVal,\r\n            title:this.props.jobTitle,\r\n            _selected_rr :{\r\n                htmlstring:this.props.rolesResHTMLData,\r\n                rol:rolesDataFilter,\r\n                res:resDataFilter\r\n            },\r\n            salary_detail:{\r\n                sal_range:salary_range,\r\n                type:this.props.salaryTypeField,\r\n                currency:'',\r\n                visible:true\r\n            },\r\n            exp:experience,\r\n            _selected_industry:this.props.industryField[0].id,\r\n            _selected_function:this.props.functionField[0].id,\r\n            employment_type:this.props.employmenTypeField[0].value,\r\n            positions:this.props.positionField,\r\n            remote_work:this.props.remoteWorkingField,\r\n            \r\n\r\n        }\r\n     \r\n    console.log('adsasdasdas',data)\r\n\r\n     \r\n        instance.post(BASE_URL+'/UserTemplates', data)\r\n    \r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            headerPathActiveHandler,\r\n            isLogin\r\n        } = this.props;\r\n        const userText = getAppStoreValue(\"userText\");\r\n\r\n        return (\r\n            <>\r\n                <div className={classes.jobopeningwrapper}>\r\n\r\n                    <CollaboratorAndPreview />\r\n\r\n                    <ValidatorForm\r\n                        onSubmit={this.SubmitHandler}\r\n                    // autoComplete=\"off\"\r\n                    >\r\n                        <JobOpeningMetaFields />\r\n\r\n                        {/* <NavLink\r\n                            to=\"/create/info\"\r\n                            className={classes.jdbuildingnextbtn}\r\n                            onClick={() => headerPathActiveHandler(0)}\r\n                        > */}\r\n                        {userText  ?\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.saveJobOpening}>\r\n                                Save & Next\r\n                            </Button>\r\n                            :\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Next\r\n                            </Button>\r\n                        }\r\n                        {/* </NavLink> */}\r\n                    </ValidatorForm>\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withRouter(JobOpening));"]},"metadata":{},"sourceType":"module"}