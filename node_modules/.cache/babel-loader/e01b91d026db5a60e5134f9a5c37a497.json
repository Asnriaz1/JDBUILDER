{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Candidates from \"./component\";\nimport { saveSuggestedCandidates } from \"./actions\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport ls from 'local-storage';\n\nconst mapStateToProps = state => ({\n  candidateList: state.ADVERTISE.data.candidateList\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  fetchDataIfNeeded: () => {\n    let jobCode = ls.get('jobCode');\n    instance.get(BASE_URL + 'User/AdvertisePage/SuggestedCandidates?JobCode=' + jobCode).then(res => {\n      dispatch(saveSuggestedCandidates(res.data.matched_Candidates));\n    }).catch(error => {});\n  },\n  sendEmailToCandidate: userData => {\n    let jobCode = ls.get('jobCode');\n    let jobTitle = ls.get('jobTitle');\n    let data = {\n      Job_Title: jobTitle,\n      Job_Code: jobCode,\n      Candidate_Email: userData.candidate_Contact_Details.candidate_Email,\n      Candidate_Name: userData.candidate_Name,\n      Candidate_Guid: userData.candidate_Guid\n    };\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\n    instance.post(BASE_URL + 'User/AdvertisePage/SendEmail', data).then(res => {\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(Candidates);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Dashboard/Candidates/container.js"],"names":["connect","Candidates","saveSuggestedCandidates","instance","BASE_URL","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","ls","mapStateToProps","state","candidateList","ADVERTISE","data","mapDispatchToProps","dispatch","props","fetchDataIfNeeded","jobCode","get","then","res","matched_Candidates","catch","error","sendEmailToCandidate","userData","jobTitle","Job_Title","Job_Code","Candidate_Email","candidate_Contact_Details","candidate_Email","Candidate_Name","candidate_Name","Candidate_Guid","candidate_Guid","post","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,SACIC,uBADJ,QAEO,WAFP;AAIA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,wBAAnC;AACA,SACIC,yBADJ,EAEIC,mCAFJ,QAGO,mDAHP;AAIA,OAAOC,EAAP,MAAe,eAAf;;AAEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,aAAa,EAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBF;AADN,CAAL,CAA7B;;AAIA,MAAMG,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAE7CC,EAAAA,iBAAiB,EAAE,MAAM;AACrB,QAAIC,OAAO,GAAGV,EAAE,CAACW,GAAH,CAAO,SAAP,CAAd;AACAf,IAAAA,QAAQ,CAACe,GAAT,CAAad,QAAQ,GAAC,iDAAT,GAA2Da,OAAxE,EACCE,IADD,CACMC,GAAG,IAAI;AACTN,MAAAA,QAAQ,CAACZ,uBAAuB,CAACkB,GAAG,CAACR,IAAJ,CAASS,kBAAV,CAAxB,CAAR;AACH,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAI,CACf,CALD;AAMH,GAV4C;AAW7CC,EAAAA,oBAAoB,EAAGC,QAAD,IAAc;AAEhC,QAAIR,OAAO,GAAGV,EAAE,CAACW,GAAH,CAAO,SAAP,CAAd;AACA,QAAIQ,QAAQ,GAAGnB,EAAE,CAACW,GAAH,CAAO,UAAP,CAAf;AACA,QAAIN,IAAI,GAAG;AACPe,MAAAA,SAAS,EAAED,QADJ;AAEPE,MAAAA,QAAQ,EAAEX,OAFH;AAGPY,MAAAA,eAAe,EAAEJ,QAAQ,CAACK,yBAAT,CAAmCC,eAH7C;AAIPC,MAAAA,cAAc,EAAEP,QAAQ,CAACQ,cAJlB;AAKPC,MAAAA,cAAc,EAAET,QAAQ,CAACU;AALlB,KAAX;AAOArB,IAAAA,QAAQ,CAACR,mCAAmC,CAAC,IAAD,EAAO,kBAAP,EAA2B,OAA3B,CAApC,CAAR;AAEAH,IAAAA,QAAQ,CAACiC,IAAT,CAAchC,QAAQ,GAAC,8BAAvB,EAAuDQ,IAAvD,EACCO,IADD,CACMC,GAAG,IAAI;AACTN,MAAAA,QAAQ,CAACT,yBAAyB,EAA1B,CAAR;AACH,KAHD,EAICiB,KAJD,CAIOC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAACT,yBAAyB,EAA1B,CAAR;AACH,KAND;AAOH;AA/B4C,CAAtB,CAA3B;;AAkCA,MAAMgC,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzD,KAAGC;AAHsD,CAA1C,CAAnB;;AAMA,eAAexC,OAAO,CAClBQ,eADkB,EAElBK,kBAFkB,EAGlBwB,UAHkB,CAAP,CAIbpC,UAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\r\nimport Candidates from \"./component\";\r\n\r\nimport {\r\n    saveSuggestedCandidates\r\n} from \"./actions\";\r\n\r\nimport instance, { BASE_URL } from \"../../../../api/config\";\r\nimport {\r\n    handleLoadingSpinnerClose,\r\n    handleLoadingSpinnerOpenWithOptions\r\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\r\nimport ls from 'local-storage';\r\n\r\nconst mapStateToProps = state => ({\r\n    candidateList: state.ADVERTISE.data.candidateList\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, props) => ({\r\n \r\n    fetchDataIfNeeded: () => {\r\n        let jobCode = ls.get('jobCode');\r\n        instance.get(BASE_URL+'User/AdvertisePage/SuggestedCandidates?JobCode='+jobCode)\r\n        .then(res => {\r\n            dispatch(saveSuggestedCandidates(res.data.matched_Candidates));\r\n        })\r\n        .catch(error => {\r\n        })\r\n    },\r\n    sendEmailToCandidate: (userData) => {\r\n\r\n        let jobCode = ls.get('jobCode');\r\n        let jobTitle = ls.get('jobTitle');\r\n        let data = {\r\n            Job_Title: jobTitle,\r\n            Job_Code: jobCode,\r\n            Candidate_Email: userData.candidate_Contact_Details.candidate_Email,\r\n            Candidate_Name: userData.candidate_Name,\r\n            Candidate_Guid: userData.candidate_Guid\r\n        }\r\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\r\n\r\n        instance.post(BASE_URL+'User/AdvertisePage/SendEmail', data)\r\n        .then(res => {\r\n            dispatch(handleLoadingSpinnerClose());\r\n        })\r\n        .catch(error => {\r\n            dispatch(handleLoadingSpinnerClose());\r\n        })\r\n    }\r\n})\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\r\n    ...stateProps,\r\n    ...dispatchProps,\r\n    ...ownProps,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(Candidates);"]},"metadata":{},"sourceType":"module"}