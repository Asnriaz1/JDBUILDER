{"ast":null,"code":"import React from \"react\";\nimport jwt_decode from 'jwt-decode';\nimport moment from \"moment\";\nimport instance, { ADMIN_URL, BASE_URL } from \"../../api/config\";\nlet defaultURI = \"\";\nconst Helper = {\n  isValidPassword(password) {\n    let reMin14Characters = /^[a-zA-Z0-9.*@!#%&()^~{}]{14,30}/;\n    let reSpecialCharacter = /[*@!#%&()^~{}]+/;\n    let reUpperCase = /[A-Z]+/;\n    let reLowerCase = /[a-z]+/;\n    let reNumeric = /[0-9]+/;\n    return reMin14Characters.test(password) && reSpecialCharacter.test(password) && reUpperCase.test(password) && reLowerCase.test(password) && reNumeric.test(password);\n  },\n\n  isValidUsername(username) {\n    let reAlphaNumeric = /^[a-zA-Z0-9]+$/;\n    return reAlphaNumeric.test(username);\n  },\n\n  isDouble(num) {\n    let re = /^[-+]?[0-9]*\\.?[0-9]*/;\n    return re.test(num);\n  },\n\n  isEmail(email) {\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  },\n\n  isNumber(num) {\n    let numberReg = /^\\d*$/;\n    return numberReg.test(num) && num.toString().length >= 10 && num.toString().length <= 11;\n  },\n\n  wordsWithNoSpecialChars(str) {\n    let words = /^[a-zA-Z ]*$/;\n    return words.test(str);\n  },\n\n  isInteger(value) {\n    let numberReg = /^[1-9]\\d*$/;\n    return numberReg.test(value);\n  },\n\n  isDecimal(value) {\n    let numberReg = /^[0-9]+(\\.[0-9]+)?$/;\n    return numberReg.test(value);\n  },\n\n  isUrl(url) {\n    let expression = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n    return expression.test(url);\n  },\n\n  isSkypeId(id) {\n    let expression = /^[a-zA-Z][a-zA-Z0-9_\\.]{5,31}$/;\n    return expression.test(id);\n  },\n\n  formateDate(date) {\n    if (!!date) {\n      return moment(date).format(\"DD/MM/YYYY\");\n    } else {\n      return \"\";\n    }\n  },\n\n  formatDateMonthFirst(date) {\n    if (!!date) {\n      return moment(date).format(\"MMM D,YYYY\");\n    } else {\n      return \"\";\n    }\n  },\n\n  isPercentage(value, minRange = -100, maxRange = 100) {\n    if (!isNaN(parseInt(value)) && parseInt(value) >= minRange && parseInt(value) <= maxRange) {\n      return true;\n    } else {\n      return \"\";\n    }\n  },\n\n  completeDateFormat(cell, row, rowIndex, formatExtraData) {\n    if (row.dateAndTime) {\n      return moment(row.dateAndTime).format(\"dddd, MMMM Do YYYY\t\");\n    } else {\n      return \"\";\n    }\n  },\n\n  /*Limit text characters*/\n  limitText: (text, textLimit) => {\n    if (text.length >= textLimit) {\n      text = `${text.slice(0, textLimit)}...`;\n    }\n\n    return text;\n  },\n\n  /**\n   * Convert bytes to Human Readable.\n   * @link https://stackoverflow.com/a/14919494\n   * @param bytes\n   * @param si {bool} Binary or Decimal. true = 1000\n   * @returns {string}\n   */\n  humanFileSize: (bytes, si) => {\n    var thresh = si ? 1000 : 1024;\n\n    if (Math.abs(bytes) < thresh) {\n      return bytes + \" B\";\n    }\n\n    var units = si ? [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"] : [\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\n    var u = -1;\n\n    do {\n      bytes /= thresh;\n      ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return bytes.toFixed(1) + \" \" + units[u];\n  },\n\n  /**\n   * Alpha Numeric with dash(-)\n   * Enclose this in /^$/ starting and ending string.\n   * @returns {string}\n   */\n  getNameRegExString: () => {\n    return \"[a-zA-Z\\\\-]*\";\n  },\n\n  /**\n   * Alpha Numeric with dash(-) & Space\n   * Enclose this in /^$/ starting and ending string.\n   * @returns {string}\n   */\n  getNameWithSpaceRegExString: () => {\n    return \"[a-zA-Z\\\\- ]*\";\n  },\n\n  getCnicREgExString() {\n    return \"/\\\\d{5}-\\\\d{7}-\\\\d{1}$/\";\n  },\n\n  /**\n   * Pakistan Phone Number.\n   * Enclose this in /^$/ starting and ending string.\n   * @returns {string}\n   */\n  getPhoneNumberRegExString: () => {\n    return \"(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\\\s*[)]?[-\\\\s\\\\.]?[(]?[0-9]{1,3}[)]?([-\\\\s\\\\.]?[0-9]{3})([-\\\\s\\\\.]?[0-9]{3,4})\";\n  },\n\n  /**\n   * Pakistan Mobile Number\n   * Enclose this in /^$/ starting and ending string.\n   * @returns {string}\n   */\n  getMobileNumberRegExString: () => {\n    return \"(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\\\s*[)]?[-\\\\s\\\\.]?[(]?[0-9]{1,3}[)]?([-\\\\s\\\\.]?[0-9]{3})([-\\\\s\\\\.]?[0-9]{3,4})\";\n  },\n\n  dateFormatFull(date) {\n    if (date) {\n      return moment(date).format(\"dddd, MMMM Do YYYY\t\");\n    } else {\n      return \"\";\n    }\n  },\n\n  /**\n   * Convert a base64 string in a Blob according to the data and contentType.\n   *\n   * @param b64Data {String} Pure base64 string without contentType\n   * @param contentType {String} the content type of the file i.e (image/jpeg - image/png - text/plain)\n   * @param sliceSize {Int} SliceSize to process the byteCharacters\n   * @see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n   * @return Blob\n   */\n  b64toBlob: (fileName, b64Data, contentType, sliceSize) => {\n    // Split the base64 string in data and contentType\n    var block = b64Data.split(\";\"); // Get the content type of the image\n\n    var contentType = block[0].split(\":\")[1]; // get the real base64 content of the file\n\n    var realData = block[1].split(\",\")[1];\n    contentType = contentType || \"\";\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(realData);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    var blob = new File(byteArrays, fileName, {\n      type: contentType\n    });\n    return blob;\n  },\n  getAgeByDOB: date => {\n    let age = 0;\n\n    if (Math.abs(date.diff(moment(), \"years\")) > 0) {\n      age = Math.abs(date.diff(moment(), \"years\")) + \" Year(s)\";\n    } else if (Math.abs(date.diff(moment(), \"months\")) > 0) {\n      age = Math.abs(date.diff(moment(), \"months\")) + \" Month(s)\";\n    } else {\n      age = Math.abs(date.diff(moment(), \"days\")) + \" Day(s)\";\n    }\n\n    return age;\n  },\n  getMrNumber: () => {\n    return \"\\b[a-zA-Z0-9]{8}\\b\";\n  },\n  extractSubModulePermissions: (permissionsArray, subModuleName, callback) => {\n    if (!!permissionsArray && permissionsArray.hasOwnProperty(subModuleName)) {\n      let permissionObject = {};\n      permissionsArray[subModuleName].map(item => {\n        permissionObject[item] = true;\n      });\n      callback(permissionObject);\n    } else {\n      callback(null);\n    }\n  },\n  appendToken: url => {\n    let key = \"Authorization\";\n    let value = encodeURI(localStorage.getItem(\"API_TOKEN\"));\n\n    if (url.indexOf(\"?\") !== -1) {\n      var kvp = url.substr(url.indexOf(\"?\")).split(\"&\");\n      let i = kvp.length;\n      let x;\n\n      while (i--) {\n        x = kvp[i].split(\"=\");\n\n        if (x[0] == key) {\n          x[1] = value;\n          kvp[i] = x.join(\"=\");\n          break;\n        }\n      }\n\n      if (i < 0) {\n        kvp[kvp.length] = [key, value].join(\"=\");\n      }\n\n      url = url.substr(0, url.indexOf(\"?\")) + kvp.join(\"&\");\n    } else {\n      url += `?${key}=${value}`;\n    }\n\n    return url;\n  },\n  appendApi: url => {\n    return defaultURI + url.substr(1);\n  }\n};\nexport default Helper;\nexport const MailHelper = {\n  getLastSegmentFromString: input => {\n    return input.split('/').pop();\n  },\n  getMailCategoryIDbyNameFromArray: (mailCategoryArray, name) => {\n    let mailCategoryID = undefined;\n    mailCategoryArray.map(item => {\n      if (item.name.toLowerCase() === name.toLowerCase()) {\n        mailCategoryID = item.id;\n      }\n    });\n    return mailCategoryID;\n  },\n  getMailCorrespondenceIDbyNameFromArray: (mailCorrespondenceArray, name) => {\n    let mailCorrespondenceID = undefined;\n    mailCorrespondenceArray.map(item => {\n      if (item.name.toLowerCase() === name.toLowerCase()) {\n        mailCorrespondenceID = item.id;\n      }\n    });\n    return mailCorrespondenceID;\n  },\n  getMailTypeIDbyNameFromArray: (mailTypeArray, name) => {\n    let mailTypeID = undefined;\n    mailTypeArray.map(item => {\n      if (item.name.toLowerCase() === name.toLowerCase()) {\n        mailTypeID = item.id;\n      }\n    });\n    return mailTypeID;\n  }\n  /**\n   * Return Mail Category String may be used for making request.\n   * @param mailData Can be found in mail initial state `MANAGE_MAIL.UISettings.selectedMailPageData`\n   * @param mailPage Current Mail page\n   * @param mailCorrespondence Current Correspondence that will be changed\n   * @param selectedMailCategory Current selected Mail Category\n   * @returns {string|*}\n   */\n\n};\nexport const arrowGenerator = color => {\n  return {\n    '&[x-placement*=\"bottom\"] $arrow': {\n      top: 0,\n      left: 0,\n      marginTop: \"-0.95em\",\n      width: \"3em\",\n      height: \"1em\",\n      \"&::before\": {\n        borderWidth: \"0 1em 1em 1em\",\n        borderColor: `transparent transparent ${color} transparent`\n      }\n    },\n    '&[x-placement*=\"top\"] $arrow': {\n      bottom: 0,\n      left: 0,\n      marginBottom: \"-0.95em\",\n      width: \"3em\",\n      height: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 1em 0 1em\",\n        borderColor: `${color} transparent transparent transparent`\n      }\n    },\n    '&[x-placement*=\"right\"] $arrow': {\n      left: 0,\n      marginLeft: \"-0.95em\",\n      height: \"3em\",\n      width: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 1em 1em 0\",\n        borderColor: `transparent ${color} transparent transparent`\n      }\n    },\n    '&[x-placement*=\"left\"] $arrow': {\n      right: 0,\n      marginRight: \"-0.95em\",\n      height: \"3em\",\n      width: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 0 1em 1em\",\n        borderColor: `transparent transparent transparent ${color}`\n      }\n    }\n  };\n};\nexport function base64ToBlob(base64Data, contentType) {\n  contentType = contentType || 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n  const sliceSize = 1024;\n  const byteCharacters = atob(base64Data);\n  var bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n    let bytes = new Array(end - begin);\n\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  return new Blob(byteArrays, {\n    type: contentType\n  });\n}\n\nfunction getMyTime(h, m) {\n  if (h.toString().length < 2) {\n    h = '0' + h;\n  }\n\n  if (m.toString().length < 2) {\n    m = '0' + m;\n  }\n\n  return `${h}${m}`;\n}\n\nexport function getDTGDate() {\n  let newDate = new Date();\n  var mS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n  return `${newDate.getDate()}${getMyTime(newDate.getHours(), newDate.getMinutes())} ${mS[newDate.getMonth()]}`;\n}\nexport function getHrsDateTimeFormat(d) {\n  let newDate = new Date(d);\n\n  if (isNaN(newDate.getTime())) {\n    console.log(\"Invalid Date\", d);\n    return \"\";\n  }\n\n  var mS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n  return `${newDate.getDate()} ${mS[newDate.getMonth()]} ${newDate.getYear() - 100}, ${getMyTime(newDate.getHours(), newDate.getMinutes())} hrs `;\n}\n/*To reverse string - For example: \"hello\" -> \"olleh\" */\n\nexport const reverseString = string => {\n  // return string.split(\"\").reverse().join(\"\");\n  return string;\n};\n/*To retrieve value from store */\n\nexport const getAppStoreValue = key => {\n  if (isAppStore()) {\n    return JSON.parse(localStorage.getItem(reverseString(\"app_store\")))[key];\n  } else {\n    return \"\";\n  }\n};\n/**\n * \n * Extraction of Data for Profile\n * \n */\n\nexport const getNames = res => {\n  let groups = {};\n  let organisations = {};\n  groups = res.groups.map(item => item.groupName);\n  organisations = res.appointments.map(item => console.log(\"Organisation\", item));\n};\n/*To check if app-store exists */\n\nexport const isAppStore = () => {\n  return localStorage.getItem(reverseString(\"app_store\")) !== null;\n};\n/**\n * decode the Jwt Token and return the json format\n */\n\nexport const getDecodedToken = JWTtoken => {\n  return jwt_decode(JWTtoken);\n};\nexport function shadeColor(color, percent) {\n  var R = parseInt(color.substring(1, 3), 16);\n  var G = parseInt(color.substring(3, 5), 16);\n  var B = parseInt(color.substring(5, 7), 16);\n  R = parseInt(R * (100 + percent) / 100);\n  G = parseInt(G * (100 + percent) / 100);\n  B = parseInt(B * (100 + percent) / 100);\n  R = R < 255 ? R : 255;\n  G = G < 255 ? G : 255;\n  B = B < 255 ? B : 255;\n  var RR = R.toString(16).length == 1 ? \"0\" + R.toString(16) : R.toString(16);\n  var GG = G.toString(16).length == 1 ? \"0\" + G.toString(16) : G.toString(16);\n  var BB = B.toString(16).length == 1 ? \"0\" + B.toString(16) : B.toString(16);\n  return \"#\" + RR + GG + BB;\n} //To generate random ID 'n' digits long\n\nexport const generateRandomID = (n = 5) => {\n  return Array.from({\n    length: n\n  }).map(x => 'x').join('').replace(/[xy]/g, c => {\n    let r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nexport function getOffsetTop(elem) {\n  var offsetTop = 0;\n\n  do {\n    if (!isNaN(elem.offsetTop)) {\n      offsetTop += elem.offsetTop;\n    }\n  } while (elem = elem.offsetParent);\n\n  return offsetTop;\n}\nexport const getValidUrl = (url = '') => {\n  let newUrl = window.decodeURIComponent(url);\n  newUrl = newUrl.trim().replace(/\\s/g, '');\n\n  if (/^(:\\/\\/)/.test(newUrl)) {\n    return `http${newUrl}`;\n  }\n\n  if (!/^(f|ht)tps?:\\/\\//i.test(newUrl)) {\n    return `http://${newUrl}`;\n  }\n\n  return newUrl;\n};\nexport const getReferOriginIDByNameAndArray = (referOriginArray, name) => {\n  let referOriginID = undefined;\n  referOriginArray.map(item => {\n    if (item.name.toLowerCase() === name.toLowerCase()) {\n      referOriginID = item.id;\n    }\n  });\n  return referOriginID;\n};\n/**\n * Get Value by Name given in @param by Key Value pair also given in @param. Tree Should be provided for Tree Processing\n * @param treeData\n * @param key\n * @param value\n * @param name\n * @returns {function(*): string}\n */\n\nexport const getBase64DataFromUrl = (path, callback) => {\n  let url = `${ADMIN_URL}v1/admin/login/screen/content/view?image=${path}`;\n  var xmlHTTP = new XMLHttpRequest();\n  xmlHTTP.open('GET', url, true);\n  xmlHTTP.responseType = 'arraybuffer';\n\n  xmlHTTP.onload = function (e) {\n    var arr = new Uint8Array(this.response);\n    var raw = String.fromCharCode.apply(null, arr);\n    var b64 = btoa(raw); // var dataURL = \"data:image/png;base64,\" + b64;\n\n    callback(b64);\n  };\n\n  xmlHTTP.send();\n};","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/common/Helpers.js"],"names":["React","jwt_decode","moment","instance","ADMIN_URL","BASE_URL","defaultURI","Helper","isValidPassword","password","reMin14Characters","reSpecialCharacter","reUpperCase","reLowerCase","reNumeric","test","isValidUsername","username","reAlphaNumeric","isDouble","num","re","isEmail","email","String","toLowerCase","isNumber","numberReg","toString","length","wordsWithNoSpecialChars","str","words","isInteger","value","isDecimal","isUrl","url","expression","isSkypeId","id","formateDate","date","format","formatDateMonthFirst","isPercentage","minRange","maxRange","isNaN","parseInt","completeDateFormat","cell","row","rowIndex","formatExtraData","dateAndTime","limitText","text","textLimit","slice","humanFileSize","bytes","si","thresh","Math","abs","units","u","toFixed","getNameRegExString","getNameWithSpaceRegExString","getCnicREgExString","getPhoneNumberRegExString","getMobileNumberRegExString","dateFormatFull","b64toBlob","fileName","b64Data","contentType","sliceSize","block","split","realData","byteCharacters","atob","byteArrays","offset","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","blob","File","type","getAgeByDOB","age","diff","getMrNumber","extractSubModulePermissions","permissionsArray","subModuleName","callback","hasOwnProperty","permissionObject","map","item","appendToken","key","encodeURI","localStorage","getItem","indexOf","kvp","substr","x","join","appendApi","MailHelper","getLastSegmentFromString","input","pop","getMailCategoryIDbyNameFromArray","mailCategoryArray","name","mailCategoryID","undefined","getMailCorrespondenceIDbyNameFromArray","mailCorrespondenceArray","mailCorrespondenceID","getMailTypeIDbyNameFromArray","mailTypeArray","mailTypeID","arrowGenerator","color","top","left","marginTop","width","height","borderWidth","borderColor","bottom","marginBottom","marginLeft","right","marginRight","base64ToBlob","base64Data","bytesLength","slicesCount","ceil","sliceIndex","begin","end","min","Blob","getMyTime","h","m","getDTGDate","newDate","Date","mS","getDate","getHours","getMinutes","getMonth","getHrsDateTimeFormat","d","getTime","console","log","getYear","reverseString","string","getAppStoreValue","isAppStore","JSON","parse","getNames","res","groups","organisations","groupName","appointments","getDecodedToken","JWTtoken","shadeColor","percent","R","substring","G","B","RR","GG","BB","generateRandomID","n","from","replace","c","r","random","v","getOffsetTop","elem","offsetTop","offsetParent","getValidUrl","newUrl","window","decodeURIComponent","trim","getReferOriginIDByNameAndArray","referOriginArray","referOriginID","getBase64DataFromUrl","path","xmlHTTP","XMLHttpRequest","open","responseType","onload","e","arr","response","raw","fromCharCode","apply","b64","btoa","send"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport jwt_decode from 'jwt-decode';\nimport moment from \"moment\";\nimport instance, {ADMIN_URL, BASE_URL} from \"../../api/config\";\nlet defaultURI = \"\";\n\nconst Helper = {\n    isValidPassword(password) {\n        let reMin14Characters = /^[a-zA-Z0-9.*@!#%&()^~{}]{14,30}/;\n        let reSpecialCharacter = /[*@!#%&()^~{}]+/;\n        let reUpperCase = /[A-Z]+/;\n        let reLowerCase = /[a-z]+/;\n        let reNumeric = /[0-9]+/;\n\n        return (\n            reMin14Characters.test(password) &&\n            reSpecialCharacter.test(password) &&\n            reUpperCase.test(password) &&\n            reLowerCase.test(password) &&\n            reNumeric.test(password)\n        );\n    },\n    isValidUsername(username) {\n        let reAlphaNumeric = /^[a-zA-Z0-9]+$/;\n        return reAlphaNumeric.test(username);\n    },\n    isDouble(num) {\n        let re = /^[-+]?[0-9]*\\.?[0-9]*/;\n        return re.test(num);\n    },\n    isEmail(email) {\n        let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(String(email).toLowerCase());\n    },\n    isNumber(num) {\n        let numberReg = /^\\d*$/;\n        return numberReg.test(num) && num.toString().length >= 10 && num.toString().length <= 11;\n    },\n    wordsWithNoSpecialChars(str) {\n        let words = /^[a-zA-Z ]*$/;\n        return words.test(str);\n    },\n    isInteger(value) {\n        let numberReg = /^[1-9]\\d*$/;\n        return numberReg.test(value);\n    },\n    isDecimal(value) {\n        let numberReg = /^[0-9]+(\\.[0-9]+)?$/;\n        return numberReg.test(value);\n    },\n    isUrl(url) {\n        let expression = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n        return expression.test(url);\n    },\n    isSkypeId(id) {\n        let expression = /^[a-zA-Z][a-zA-Z0-9_\\.]{5,31}$/;\n        return expression.test(id);\n    },\n    formateDate(date) {\n        if (!!date) {\n            return moment(date).format(\"DD/MM/YYYY\");\n        } else {\n            return \"\";\n        }\n    },\n    formatDateMonthFirst(date) {\n        if (!!date) {\n            return moment(date).format(\"MMM D,YYYY\");\n        } else {\n            return \"\";\n        }\n    },\n    isPercentage(value, minRange = -100, maxRange = 100) {\n        if (!isNaN(parseInt(value)) && parseInt(value) >= minRange && parseInt(value) <= maxRange) {\n            return true;\n        } else {\n            return \"\";\n        }\n    },\n    completeDateFormat(cell, row, rowIndex, formatExtraData) {\n        if (row.dateAndTime) {\n            return moment(row.dateAndTime).format(\"dddd, MMMM Do YYYY\t\");\n        } else {\n            return \"\";\n        }\n    },\n    /*Limit text characters*/\n    limitText: (text, textLimit) => {\n        if (text.length >= textLimit) {\n            text = `${text.slice(0, textLimit)}...`;\n        }\n        return text;\n    },\n    /**\n     * Convert bytes to Human Readable.\n     * @link https://stackoverflow.com/a/14919494\n     * @param bytes\n     * @param si {bool} Binary or Decimal. true = 1000\n     * @returns {string}\n     */\n    humanFileSize: (bytes, si) => {\n        var thresh = si ? 1000 : 1024;\n        if (Math.abs(bytes) < thresh) {\n            return bytes + \" B\";\n        }\n        var units = si\n            ? [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n            : [\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\n        var u = -1;\n        do {\n            bytes /= thresh;\n            ++u;\n        } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n        return bytes.toFixed(1) + \" \" + units[u];\n    },\n\n    /**\n     * Alpha Numeric with dash(-)\n     * Enclose this in /^$/ starting and ending string.\n     * @returns {string}\n     */\n    getNameRegExString: () => {\n        return \"[a-zA-Z\\\\-]*\";\n    },\n    /**\n     * Alpha Numeric with dash(-) & Space\n     * Enclose this in /^$/ starting and ending string.\n     * @returns {string}\n     */\n    getNameWithSpaceRegExString: () => {\n        return \"[a-zA-Z\\\\- ]*\";\n    },\n    getCnicREgExString() {\n        return \"/\\\\d{5}-\\\\d{7}-\\\\d{1}$/\";\n    },\n    /**\n     * Pakistan Phone Number.\n     * Enclose this in /^$/ starting and ending string.\n     * @returns {string}\n     */\n    getPhoneNumberRegExString: () => {\n        return \"(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\\\s*[)]?[-\\\\s\\\\.]?[(]?[0-9]{1,3}[)]?([-\\\\s\\\\.]?[0-9]{3})([-\\\\s\\\\.]?[0-9]{3,4})\";\n    },\n    /**\n     * Pakistan Mobile Number\n     * Enclose this in /^$/ starting and ending string.\n     * @returns {string}\n     */\n    getMobileNumberRegExString: () => {\n        return \"(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\\\s*[)]?[-\\\\s\\\\.]?[(]?[0-9]{1,3}[)]?([-\\\\s\\\\.]?[0-9]{3})([-\\\\s\\\\.]?[0-9]{3,4})\";\n    },\n    dateFormatFull(date) {\n        if (date) {\n            return moment(date).format(\"dddd, MMMM Do YYYY\t\");\n        } else {\n            return \"\";\n        }\n    },\n    /**\n     * Convert a base64 string in a Blob according to the data and contentType.\n     *\n     * @param b64Data {String} Pure base64 string without contentType\n     * @param contentType {String} the content type of the file i.e (image/jpeg - image/png - text/plain)\n     * @param sliceSize {Int} SliceSize to process the byteCharacters\n     * @see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n     * @return Blob\n     */\n    b64toBlob: (fileName, b64Data, contentType, sliceSize) => {\n        // Split the base64 string in data and contentType\n        var block = b64Data.split(\";\");\n        // Get the content type of the image\n        var contentType = block[0].split(\":\")[1];\n        // get the real base64 content of the file\n        var realData = block[1].split(\",\")[1];\n\n        contentType = contentType || \"\";\n        sliceSize = sliceSize || 512;\n\n        var byteCharacters = atob(realData);\n        var byteArrays = [];\n\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            var byteArray = new Uint8Array(byteNumbers);\n\n            byteArrays.push(byteArray);\n        }\n\n        var blob = new File(byteArrays, fileName, {type: contentType});\n        return blob;\n    },\n    getAgeByDOB: date => {\n        let age = 0;\n        if (Math.abs(date.diff(moment(), \"years\")) > 0) {\n            age = Math.abs(date.diff(moment(), \"years\")) + \" Year(s)\";\n        } else if (Math.abs(date.diff(moment(), \"months\")) > 0) {\n            age = Math.abs(date.diff(moment(), \"months\")) + \" Month(s)\";\n        } else {\n            age = Math.abs(date.diff(moment(), \"days\")) + \" Day(s)\";\n        }\n        return age;\n    },\n    getMrNumber: () => {\n        return \"\\b[a-zA-Z0-9]{8}\\b\";\n    },\n    extractSubModulePermissions: (permissionsArray, subModuleName, callback) => {\n        if (!!permissionsArray && permissionsArray.hasOwnProperty(subModuleName)) {\n            let permissionObject = {};\n            permissionsArray[subModuleName].map(item => {\n                permissionObject[item] = true;\n            });\n            callback(permissionObject);\n        } else {\n            callback(null);\n        }\n    },\n    appendToken: url => {\n        let key = \"Authorization\";\n        let value = encodeURI(localStorage.getItem(\"API_TOKEN\"));\n        if (url.indexOf(\"?\") !== -1) {\n            var kvp = url.substr(url.indexOf(\"?\")).split(\"&\");\n            let i = kvp.length;\n            let x;\n            while (i--) {\n                x = kvp[i].split(\"=\");\n\n                if (x[0] == key) {\n                    x[1] = value;\n                    kvp[i] = x.join(\"=\");\n                    break;\n                }\n            }\n\n            if (i < 0) {\n                kvp[kvp.length] = [key, value].join(\"=\");\n            }\n            url = url.substr(0, url.indexOf(\"?\")) + kvp.join(\"&\");\n        } else {\n            url += `?${key}=${value}`;\n        }\n        return url;\n    },\n    appendApi: url => {\n        return defaultURI + url.substr(1);\n    }\n};\nexport default Helper;\n\nexport const MailHelper = {\n    getLastSegmentFromString: (input) => {\n        return input.split('/').pop();\n    },\n    getMailCategoryIDbyNameFromArray: (mailCategoryArray,name) => {\n        let mailCategoryID = undefined;\n        mailCategoryArray.map(item => {\n            if(item.name.toLowerCase() === name.toLowerCase()) {\n                mailCategoryID = item.id;\n            }\n        });\n        return mailCategoryID;\n    },\n    getMailCorrespondenceIDbyNameFromArray: (mailCorrespondenceArray,name) => {\n        let mailCorrespondenceID = undefined;\n        mailCorrespondenceArray.map(item => {\n            if(item.name.toLowerCase() === name.toLowerCase()) {\n                mailCorrespondenceID = item.id;\n            }\n        });\n        return mailCorrespondenceID;\n    },\n    getMailTypeIDbyNameFromArray: (mailTypeArray,name) => {\n        let mailTypeID = undefined;\n        mailTypeArray.map(item => {\n            if(item.name.toLowerCase() === name.toLowerCase()) {\n                mailTypeID = item.id;\n            }\n        });\n        return mailTypeID;\n    },\n    /**\n     * Return Mail Category String may be used for making request.\n     * @param mailData Can be found in mail initial state `MANAGE_MAIL.UISettings.selectedMailPageData`\n     * @param mailPage Current Mail page\n     * @param mailCorrespondence Current Correspondence that will be changed\n     * @param selectedMailCategory Current selected Mail Category\n     * @returns {string|*}\n     */\n};\n\n\nexport const arrowGenerator = color => {\n    return {\n        '&[x-placement*=\"bottom\"] $arrow': {\n            top: 0,\n            left: 0,\n            marginTop: \"-0.95em\",\n            width: \"3em\",\n            height: \"1em\",\n            \"&::before\": {\n                borderWidth: \"0 1em 1em 1em\",\n                borderColor: `transparent transparent ${color} transparent`\n            }\n        },\n        '&[x-placement*=\"top\"] $arrow': {\n            bottom: 0,\n            left: 0,\n            marginBottom: \"-0.95em\",\n            width: \"3em\",\n            height: \"1em\",\n            \"&::before\": {\n                borderWidth: \"1em 1em 0 1em\",\n                borderColor: `${color} transparent transparent transparent`\n            }\n        },\n        '&[x-placement*=\"right\"] $arrow': {\n            left: 0,\n            marginLeft: \"-0.95em\",\n            height: \"3em\",\n            width: \"1em\",\n            \"&::before\": {\n                borderWidth: \"1em 1em 1em 0\",\n                borderColor: `transparent ${color} transparent transparent`\n            }\n        },\n        '&[x-placement*=\"left\"] $arrow': {\n            right: 0,\n            marginRight: \"-0.95em\",\n            height: \"3em\",\n            width: \"1em\",\n            \"&::before\": {\n                borderWidth: \"1em 0 1em 1em\",\n                borderColor: `transparent transparent transparent ${color}`\n            }\n        }\n    };\n};\n\nexport function base64ToBlob(base64Data, contentType) {\n    contentType = contentType || 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n    const sliceSize = 1024;\n    const byteCharacters = atob(base64Data);\n    var bytesLength = byteCharacters.length;\n    const slicesCount = Math.ceil(bytesLength / sliceSize);\n    const byteArrays = new Array(slicesCount);\n\n    for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n        const begin = sliceIndex * sliceSize;\n        const end = Math.min(begin + sliceSize, bytesLength);\n\n        let bytes = new Array(end - begin);\n        for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n            bytes[i] = byteCharacters[offset].charCodeAt(0);\n        }\n        byteArrays[sliceIndex] = new Uint8Array(bytes);\n    }\n    return new Blob(byteArrays, {type: contentType});\n}\n\nfunction getMyTime(h, m) {\n    if (h.toString().length < 2) {\n        h = '0' + h;\n    }\n    if (m.toString().length < 2) {\n        m = '0' + m;\n    }\n    return `${h}${m}`\n}\n\nexport function getDTGDate() {\n    let newDate = new Date();\n    var mS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n    return `${newDate.getDate()}${getMyTime(newDate.getHours(), newDate.getMinutes())} ${mS[newDate.getMonth()]}`\n}\n\nexport function getHrsDateTimeFormat(d) {\n    let newDate = new Date(d);\n    if (isNaN(newDate.getTime())) {\n        console.log(\"Invalid Date\", d);\n        return \"\";\n    }\n    var mS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n    return `${newDate.getDate()} ${mS[newDate.getMonth()]} ${newDate.getYear() - 100}, ${getMyTime(newDate.getHours(), newDate.getMinutes())} hrs `\n}\n\n/*To reverse string - For example: \"hello\" -> \"olleh\" */\nexport const reverseString = (string) => {\n    // return string.split(\"\").reverse().join(\"\");\n    return string;\n};\n/*To retrieve value from store */\nexport const getAppStoreValue = (key) => {\n    if (isAppStore()){\n        return JSON.parse(localStorage.getItem(reverseString(\"app_store\")))[key];\n    }else {\n        return \"\";\n    }\n};\n\n/**\n * \n * Extraction of Data for Profile\n * \n */\nexport const getNames=(res)=>{\n    let groups={};\n    let organisations={};\n    groups=res.groups.map(item=>(item.groupName))\n    organisations = res.appointments.map(item=>(\n        console.log(\"Organisation\",item)\n    ))\n}\n\n/*To check if app-store exists */\nexport const isAppStore = () => {\n    return localStorage.getItem(reverseString(\"app_store\")) !== null;\n};\n\n\n/**\n * decode the Jwt Token and return the json format\n */\nexport const getDecodedToken = (JWTtoken) => {\n    return jwt_decode(JWTtoken)\n}\n\nexport function shadeColor(color, percent) {\n\n    var R = parseInt(color.substring(1, 3), 16);\n    var G = parseInt(color.substring(3, 5), 16);\n    var B = parseInt(color.substring(5, 7), 16);\n\n    R = parseInt(R * (100 + percent) / 100);\n    G = parseInt(G * (100 + percent) / 100);\n    B = parseInt(B * (100 + percent) / 100);\n\n    R = (R < 255) ? R : 255;\n    G = (G < 255) ? G : 255;\n    B = (B < 255) ? B : 255;\n\n    var RR = ((R.toString(16).length == 1) ? \"0\" + R.toString(16) : R.toString(16));\n    var GG = ((G.toString(16).length == 1) ? \"0\" + G.toString(16) : G.toString(16));\n    var BB = ((B.toString(16).length == 1) ? \"0\" + B.toString(16) : B.toString(16));\n\n    return \"#\" + RR + GG + BB;\n}\n//To generate random ID 'n' digits long\nexport const generateRandomID = (n = 5) => {\n    return Array.from({length: n}).map(x => 'x').join('').replace(/[xy]/g, (c) => {\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n};\n\nexport function getOffsetTop(elem) {\n    var offsetTop = 0;\n    do {\n        if (!isNaN(elem.offsetTop)) {\n            offsetTop += elem.offsetTop;\n        }\n    } while (elem = elem.offsetParent);\n    return offsetTop;\n}\n\nexport const getValidUrl = (url = '') => {\n    let newUrl = window.decodeURIComponent(url);\n    newUrl = newUrl\n        .trim()\n        .replace(/\\s/g, '');\n    if (/^(:\\/\\/)/.test(newUrl)) {\n        return `http${newUrl}`;\n    }\n    if (!/^(f|ht)tps?:\\/\\//i.test(newUrl)) {\n        return `http://${newUrl}`;\n    }\n    return newUrl;\n};\n\nexport const getReferOriginIDByNameAndArray = (referOriginArray,name) => {\n    let referOriginID = undefined;\n    referOriginArray.map(item => {\n        if(item.name.toLowerCase() === name.toLowerCase()) {\n            referOriginID = item.id;\n        }\n    });\n    return referOriginID;\n}\n\n/**\n * Get Value by Name given in @param by Key Value pair also given in @param. Tree Should be provided for Tree Processing\n * @param treeData\n * @param key\n * @param value\n * @param name\n * @returns {function(*): string}\n */\n\nexport const getBase64DataFromUrl = (path,callback) => {\n    let url = `${ADMIN_URL}v1/admin/login/screen/content/view?image=${path}`;\n\n    var xmlHTTP = new XMLHttpRequest();\n        xmlHTTP.open('GET', url, true);\n        xmlHTTP.responseType = 'arraybuffer';\n        xmlHTTP.onload = function (e) {\n            var arr = new Uint8Array(this.response);\n            var raw = String.fromCharCode.apply(null, arr);\n            var b64 = btoa(raw);\n            // var dataURL = \"data:image/png;base64,\" + b64;\n            callback(b64);\n        };\n        xmlHTTP.send();\n}"]},"metadata":{},"sourceType":"module"}