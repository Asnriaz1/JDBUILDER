{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{connect}from\"react-redux\";import Candidates from\"./component\";import{saveSuggestedCandidates}from\"./actions\";import instance,{BASE_URL}from\"../../../../api/config\";import{handleLoadingSpinnerClose,handleLoadingSpinnerOpenWithOptions}from\"../../../common/ReduxBased/LoadingSpinner/actions\";import ls from'local-storage';var mapStateToProps=function mapStateToProps(state){return{candidateList:state.ADVERTISE.data.candidateList};};var mapDispatchToProps=function mapDispatchToProps(dispatch,props){return{fetchDataIfNeeded:function fetchDataIfNeeded(){var jobCode=ls.get('jobCode');instance.get(BASE_URL+'User/AdvertisePage/SuggestedCandidates?JobCode='+jobCode).then(function(res){dispatch(saveSuggestedCandidates(res.data.matched_Candidates));}).catch(function(error){});},sendEmailToCandidate:function sendEmailToCandidate(userData){var jobCode=ls.get('jobCode');var jobTitle=ls.get('jobTitle');var data={Job_Title:jobTitle,Job_Code:jobCode,Candidate_Email:userData.candidate_Contact_Details.candidate_Email,Candidate_Name:userData.candidate_Name,Candidate_Guid:userData.candidate_Guid};dispatch(handleLoadingSpinnerOpenWithOptions(true,\"Sending Email...\",\"large\"));instance.post(BASE_URL+'User/AdvertisePage/SendEmail',data).then(function(res){dispatch(handleLoadingSpinnerClose());}).catch(function(error){dispatch(handleLoadingSpinnerClose());});}};};var mergeProps=function mergeProps(stateProps,dispatchProps,ownProps){return _objectSpread({},stateProps,{},dispatchProps,{},ownProps);};export default connect(mapStateToProps,mapDispatchToProps,mergeProps)(Candidates);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Dashboard/Candidates/container.js"],"names":["connect","Candidates","saveSuggestedCandidates","instance","BASE_URL","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","ls","mapStateToProps","state","candidateList","ADVERTISE","data","mapDispatchToProps","dispatch","props","fetchDataIfNeeded","jobCode","get","then","res","matched_Candidates","catch","error","sendEmailToCandidate","userData","jobTitle","Job_Title","Job_Code","Candidate_Email","candidate_Contact_Details","candidate_Email","Candidate_Name","candidate_Name","Candidate_Guid","candidate_Guid","post","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"2JAAA,OAASA,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,aAAvB,CAEA,OACIC,uBADJ,KAEO,WAFP,CAIA,MAAOC,CAAAA,QAAP,EAAmBC,QAAnB,KAAmC,wBAAnC,CACA,OACIC,yBADJ,CAEIC,mCAFJ,KAGO,mDAHP,CAIA,MAAOC,CAAAA,EAAP,KAAe,eAAf,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAC9BC,aAAa,CAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBF,aADN,CAAL,EAA7B,CAIA,GAAMG,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAWC,KAAX,QAAsB,CAE7CC,iBAAiB,CAAE,4BAAM,CACrB,GAAIC,CAAAA,OAAO,CAAGV,EAAE,CAACW,GAAH,CAAO,SAAP,CAAd,CACAf,QAAQ,CAACe,GAAT,CAAad,QAAQ,CAAC,iDAAT,CAA2Da,OAAxE,EACCE,IADD,CACM,SAAAC,GAAG,CAAI,CACTN,QAAQ,CAACZ,uBAAuB,CAACkB,GAAG,CAACR,IAAJ,CAASS,kBAAV,CAAxB,CAAR,CACH,CAHD,EAICC,KAJD,CAIO,SAAAC,KAAK,CAAI,CACf,CALD,EAMH,CAV4C,CAW7CC,oBAAoB,CAAE,8BAACC,QAAD,CAAc,CAEhC,GAAIR,CAAAA,OAAO,CAAGV,EAAE,CAACW,GAAH,CAAO,SAAP,CAAd,CACA,GAAIQ,CAAAA,QAAQ,CAAGnB,EAAE,CAACW,GAAH,CAAO,UAAP,CAAf,CACA,GAAIN,CAAAA,IAAI,CAAG,CACPe,SAAS,CAAED,QADJ,CAEPE,QAAQ,CAAEX,OAFH,CAGPY,eAAe,CAAEJ,QAAQ,CAACK,yBAAT,CAAmCC,eAH7C,CAIPC,cAAc,CAAEP,QAAQ,CAACQ,cAJlB,CAKPC,cAAc,CAAET,QAAQ,CAACU,cALlB,CAAX,CAOArB,QAAQ,CAACR,mCAAmC,CAAC,IAAD,CAAO,kBAAP,CAA2B,OAA3B,CAApC,CAAR,CAEAH,QAAQ,CAACiC,IAAT,CAAchC,QAAQ,CAAC,8BAAvB,CAAuDQ,IAAvD,EACCO,IADD,CACM,SAAAC,GAAG,CAAI,CACTN,QAAQ,CAACT,yBAAyB,EAA1B,CAAR,CACH,CAHD,EAICiB,KAJD,CAIO,SAAAC,KAAK,CAAI,CACZT,QAAQ,CAACT,yBAAyB,EAA1B,CAAR,CACH,CAND,EAOH,CA/B4C,CAAtB,EAA3B,CAkCA,GAAMgC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,UAAD,CAAaC,aAAb,CAA4BC,QAA5B,0BACZF,UADY,IAEZC,aAFY,IAGZC,QAHY,GAAnB,CAMA,cAAexC,CAAAA,OAAO,CAClBQ,eADkB,CAElBK,kBAFkB,CAGlBwB,UAHkB,CAAP,CAIbpC,UAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\r\nimport Candidates from \"./component\";\r\n\r\nimport {\r\n    saveSuggestedCandidates\r\n} from \"./actions\";\r\n\r\nimport instance, { BASE_URL } from \"../../../../api/config\";\r\nimport {\r\n    handleLoadingSpinnerClose,\r\n    handleLoadingSpinnerOpenWithOptions\r\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\r\nimport ls from 'local-storage';\r\n\r\nconst mapStateToProps = state => ({\r\n    candidateList: state.ADVERTISE.data.candidateList\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, props) => ({\r\n \r\n    fetchDataIfNeeded: () => {\r\n        let jobCode = ls.get('jobCode');\r\n        instance.get(BASE_URL+'User/AdvertisePage/SuggestedCandidates?JobCode='+jobCode)\r\n        .then(res => {\r\n            dispatch(saveSuggestedCandidates(res.data.matched_Candidates));\r\n        })\r\n        .catch(error => {\r\n        })\r\n    },\r\n    sendEmailToCandidate: (userData) => {\r\n\r\n        let jobCode = ls.get('jobCode');\r\n        let jobTitle = ls.get('jobTitle');\r\n        let data = {\r\n            Job_Title: jobTitle,\r\n            Job_Code: jobCode,\r\n            Candidate_Email: userData.candidate_Contact_Details.candidate_Email,\r\n            Candidate_Name: userData.candidate_Name,\r\n            Candidate_Guid: userData.candidate_Guid\r\n        }\r\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\r\n\r\n        instance.post(BASE_URL+'User/AdvertisePage/SendEmail', data)\r\n        .then(res => {\r\n            dispatch(handleLoadingSpinnerClose());\r\n        })\r\n        .catch(error => {\r\n            dispatch(handleLoadingSpinnerClose());\r\n        })\r\n    }\r\n})\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\r\n    ...stateProps,\r\n    ...dispatchProps,\r\n    ...ownProps,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(Candidates);"]},"metadata":{},"sourceType":"module"}