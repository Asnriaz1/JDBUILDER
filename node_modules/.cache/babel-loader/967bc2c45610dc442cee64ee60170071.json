{"ast":null,"code":"import { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport { connect } from \"react-redux\";\nimport JobOpening from \"./component\";\nimport { headerPathActiveHandler, pathChangeHandler } from \"../actions\";\nimport { fetchDataSuggestedTemplate, textFieldChangeHandler } from \"./actions\";\nimport ls from 'local-storage';\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\n\nconst mapStateToProps = state => ({\n  templateSpecId: state.JDLANDING.data.templateSpecId,\n  templateId: state.JDLANDING.data.templateId,\n  isLogin: state.LOGIN.UISetting.isLogin,\n  jobTitle: state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField.value,\n  industryField: state.JOBOPENING.forms.jobOpeningForm.fields.industryField.value,\n  functionField: state.JOBOPENING.forms.jobOpeningForm.fields.functionField.value,\n  employmenTypeField: state.JOBOPENING.forms.jobOpeningForm.fields.employmenTypeField.value,\n  minYearField: state.JOBOPENING.forms.jobOpeningForm.fields.minYearField.value,\n  maxYearField: state.JOBOPENING.forms.jobOpeningForm.fields.maxYearField.value,\n  positionField: state.JOBOPENING.forms.jobOpeningForm.fields.positionField.value,\n  AddressField: state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\n  QualificationField: state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n  remoteWorkingField: state.JOBOPENING.forms.jobOpeningForm.fields.remoteWorkingField.value,\n  showSalaryField: state.JOBOPENING.forms.jobOpeningForm.fields.showSalaryField.value,\n  salaryTypeField: state.JOBOPENING.forms.jobOpeningForm.fields.salaryTypeField.value,\n  hourlyMaxRateField: state.JOBOPENING.forms.jobOpeningForm.fields.hourlyMaxRateField.value,\n  monthlySalaryRangField: state.JOBOPENING.forms.jobOpeningForm.fields.monthlySalaryRangField.value,\n  monthlyCurrencyField: state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\n  yearlySalaryRangField: state.JOBOPENING.forms.jobOpeningForm.fields.yearlySalaryRangField.value,\n  yearlyCurrencyField: state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\n  rolesResHTMLData: state.JOBOPENING.data.rolesResHTMLData,\n  rolesData: state.JOBOPENING.data.rolesData,\n  resData: state.JOBOPENING.data.resData,\n  jobCodeField: state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField.value,\n  QualificationField: state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  headerPathActiveHandler: val => {\n    dispatch(headerPathActiveHandler(val));\n    dispatch(pathChangeHandler(\"/create/info\"));\n  },\n  fetchDataSuggestedTemplate: templateId => {\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading...\", \"large\"));\n    let savedTempId = ls.get('suggestedTempId');\n    let paramVal = templateId ? templateId : savedTempId;\n    instance.get(BASE_URL + 'Templates?templateId=' + paramVal).then(res => {\n      dispatch(fetchDataSuggestedTemplate(res.data));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  },\n  getJobCode: () => {\n    if (ls.get('jobCode')) {\n      dispatch(textFieldChangeHandler('jobCodeField', ls.get('jobCode')));\n    } else {\n      instance.get(BASE_URL_SQL + 'GetJobCode').then(res => {\n        ls.set('jobCode', res.data);\n        dispatch(textFieldChangeHandler('jobCodeField', res.data));\n      }).catch(error => {});\n    }\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  fetchDataSuggestedTemplate: () => {\n    dispatchProps.fetchDataSuggestedTemplate(stateProps.templateId);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(JobOpening);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/container.js"],"names":["handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","connect","JobOpening","headerPathActiveHandler","pathChangeHandler","fetchDataSuggestedTemplate","textFieldChangeHandler","ls","instance","BASE_URL","BASE_URL_SQL","mapStateToProps","state","templateSpecId","JDLANDING","data","templateId","isLogin","LOGIN","UISetting","jobTitle","JOBOPENING","forms","jobOpeningForm","fields","jobTitleField","value","industryField","functionField","employmenTypeField","minYearField","maxYearField","positionField","AddressField","QualificationField","remoteWorkingField","showSalaryField","salaryTypeField","hourlyMaxRateField","monthlySalaryRangField","monthlyCurrencyField","yearlySalaryRangField","yearlyCurrencyField","rolesResHTMLData","rolesData","resData","jobCodeField","mapDispatchToProps","dispatch","props","val","savedTempId","get","paramVal","then","res","catch","error","getJobCode","set","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"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","sourcesContent":["import {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\n\nimport { connect } from \"react-redux\";\nimport JobOpening from \"./component\";\nimport {\n    headerPathActiveHandler,\n    pathChangeHandler,\n} from \"../actions\";\nimport {\n    fetchDataSuggestedTemplate,\n    textFieldChangeHandler\n} from \"./actions\";\nimport ls from 'local-storage'\n\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\n\nconst mapStateToProps = state => ({\n    templateSpecId: state.JDLANDING.data.templateSpecId,\n    templateId: state.JDLANDING.data.templateId,\n    isLogin: state.LOGIN.UISetting.isLogin,\n    jobTitle:state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField.value,\n    industryField:state.JOBOPENING.forms.jobOpeningForm.fields.industryField.value,\n    functionField:state.JOBOPENING.forms.jobOpeningForm.fields.functionField.value,\n    employmenTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.employmenTypeField.value,\n    minYearField:state.JOBOPENING.forms.jobOpeningForm.fields.minYearField.value,\n    maxYearField:state.JOBOPENING.forms.jobOpeningForm.fields.maxYearField.value,\n    positionField:state.JOBOPENING.forms.jobOpeningForm.fields.positionField.value,\n    AddressField:state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\n    QualificationField:state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n    remoteWorkingField:state.JOBOPENING.forms.jobOpeningForm.fields.remoteWorkingField.value,\n    showSalaryField:state.JOBOPENING.forms.jobOpeningForm.fields.showSalaryField.value,\n    salaryTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.salaryTypeField.value,\n    hourlyMaxRateField:state.JOBOPENING.forms.jobOpeningForm.fields.hourlyMaxRateField.value,\n    monthlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlySalaryRangField.value,\n    monthlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\n    yearlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlySalaryRangField.value,\n    yearlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\n    rolesResHTMLData:state.JOBOPENING.data.rolesResHTMLData,\n    rolesData:state.JOBOPENING.data.rolesData,\n    resData:state.JOBOPENING.data.resData,\n    jobCodeField:state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField.value,\n    QualificationField:state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    headerPathActiveHandler: (val) => {\n        dispatch(headerPathActiveHandler(val));\n        dispatch(pathChangeHandler(\"/create/info\"))\n    },\n    fetchDataSuggestedTemplate: (templateId) => {\n        \n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading...\", \"large\"));\n        let savedTempId = ls.get('suggestedTempId')\n        let paramVal = templateId ? templateId : savedTempId\n\n        instance.get(BASE_URL+'Templates?templateId='+paramVal)\n        .then(res => {\n            dispatch(fetchDataSuggestedTemplate(res.data));\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    },\n    getJobCode: () => {\n        if(ls.get('jobCode')) {\n            dispatch(textFieldChangeHandler('jobCodeField', ls.get('jobCode')))\n        }\n        else {\n            instance.get(BASE_URL_SQL+'GetJobCode')\n            .then(res => {\n                ls.set('jobCode', res.data);\n                dispatch(textFieldChangeHandler('jobCodeField', res.data))\n            })\n            .catch(error => {\n            })\n        }\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    fetchDataSuggestedTemplate: () => {\n        dispatchProps.fetchDataSuggestedTemplate(stateProps.templateId);\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(JobOpening);"]},"metadata":{},"sourceType":"module"}