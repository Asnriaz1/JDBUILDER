{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\JD\\\\JDBuilding\\\\Summary\\\\MetaFields\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Grid, Tooltip, Zoom } from \"@material-ui/core\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes } from 'react-mui-draft-wysiwyg';\nimport { ContentState, convertToRaw, convertFromRaw } from 'draft-js';\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst editorConfig = {};\nconst rawContent = {\n  blocks: [],\n  entityMap: {}\n};\n\nclass JobSummaryMetaFields extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = newState => {\n      this.setState({\n        editorState: newState\n      });\n    };\n\n    this.componentDidMount = () => {\n      window.scrollTo(0, null); // this.props.fetchDataIfNeeded();\n\n      let convertedData = convertFromHTML(this.props.rawContentSummaryAsHTML);\n      let convertedRawData = convertToRaw(convertedData);\n      const rawContents = {\n        blocks: [...convertedRawData.blocks],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedSummaryEditor(rawContents);\n    };\n\n    this.appendSummaryToEditor = (value, index) => {\n      this.props.summaryDataActiveHandler(index);\n      let oldData = convertToRaw(this.state.editorState.getCurrentContent());\n      let newItem = {\n        data: {},\n        depth: 0,\n        entityRanges: [],\n        inlineStyleRanges: [],\n        key: oldData.blocks.length + \"roles\",\n        text: value,\n        type: 'paragraph'\n      };\n      oldData = [...oldData.blocks, newItem];\n      const rawContents = {\n        blocks: [...oldData],\n        entityMap: {}\n      };\n      this.setState({\n        editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(rawContents))\n      });\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n      this.props.saveUpdatedSummaryEditor(rawContents);\n    };\n\n    this.componentWillUnmount = () => {\n      let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\n      this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\n    };\n\n    this.state = {\n      editorState: MUIEditorState.createWithContent(editorConfig, convertFromRaw(this.props.rawContentSummary))\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      dataList\n    } = this.props;\n    const config = {\n      toolbar: {\n        controls: [toolbarControlTypes.bold, toolbarControlTypes.italic, toolbarControlTypes.underline, toolbarControlTypes.unorderedList, toolbarControlTypes.orderedList]\n      },\n      editor: {\n        className: 'texteditor'\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.metafieldwrapper,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.rolesandreswrapper,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 8,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.metatitle,\n                children: \"Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.texteditorwrapper,\n                children: /*#__PURE__*/_jsxDEV(MUIEditor, {\n                  editorState: this.state.editorState,\n                  onChange: this.onChange,\n                  config: config\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.suggesteditems,\n                children: dataList.map((item, index) => /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: item.desc,\n                  arrow: true,\n                  placement: \"left\",\n                  TransitionComponent: Zoom,\n                  TransitionProps: {\n                    timeout: 600\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"item\",\n                    onClick: () => this.appendSummaryToEditor(item.desc, index),\n                    children: [/*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n                      className: item.isActive ? classes.addeditembg : \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"description\",\n                      children: item.desc\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 41\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default withStyles(styles)(JobSummaryMetaFields);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/Summary/MetaFields/component.js"],"names":["React","Component","styles","withStyles","Grid","Tooltip","Zoom","CheckCircleIcon","MUIEditor","MUIEditorState","toolbarControlTypes","ContentState","convertToRaw","convertFromRaw","convertToHTML","convertFromHTML","editorConfig","rawContent","blocks","entityMap","JobSummaryMetaFields","constructor","props","onChange","newState","setState","editorState","componentDidMount","window","scrollTo","convertedData","rawContentSummaryAsHTML","convertedRawData","rawContents","createWithContent","currentContentAsHTML","state","getCurrentContent","saveUpdatedSummaryAsHTML","saveUpdatedSummaryEditor","appendSummaryToEditor","value","index","summaryDataActiveHandler","oldData","newItem","data","depth","entityRanges","inlineStyleRanges","key","length","text","type","componentWillUnmount","rawContentSummary","render","classes","dataList","config","toolbar","controls","bold","italic","underline","unorderedList","orderedList","editor","className","metafieldwrapper","rolesandreswrapper","metatitle","texteditorwrapper","suggesteditems","map","item","desc","timeout","isActive","addeditembg"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,IAAxB,QAAoC,mBAApC;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,SAAP,IAAoBC,cAApB,EAAmCC,mBAAnC,QAA+D,yBAA/D;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,cAArC,QAA2D,UAA3D;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,eAA/C;;;AAEA,MAAMC,YAAY,GAAG,EAArB;AACE,MAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,SAAS,EAAE;AAFM,CAAnB;;AAKF,MAAMC,oBAAN,SAAmCnB,SAAnC,CAA6C;AACzCoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,QAVmB,GAUPC,QAAD,IAAc;AACrB,WAAKC,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAEF;AADH,OAAd;AAGH,KAdkB;;AAAA,SAgBnBG,iBAhBmB,GAgBC,MAAM;AACtBC,MAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,IAAnB,EADsB,CAEtB;;AAEA,UAAIC,aAAa,GAAGf,eAAe,CAAC,KAAKO,KAAL,CAAWS,uBAAZ,CAAnC;AACA,UAAIC,gBAAgB,GAAGpB,YAAY,CAACkB,aAAD,CAAnC;AAEA,YAAMG,WAAW,GAAG;AAChBf,QAAAA,MAAM,EAAE,CAAC,GAAGc,gBAAgB,CAACd,MAArB,CADQ;AAEhBC,QAAAA,SAAS,EAAE;AAFK,OAApB;AAIA,WAAKM,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAEjB,cAAc,CAACyB,iBAAf,CACTlB,YADS,EAETH,cAAc,CAACoB,WAAD,CAFL;AADH,OAAd;AAOA,UAAIE,oBAAoB,GAAGrB,aAAa,CAAC,KAAKsB,KAAL,CAAWV,WAAX,CAAuBW,iBAAvB,EAAD,CAAxC;AACA,WAAKf,KAAL,CAAWgB,wBAAX,CAAoCH,oBAApC;AAEA,WAAKb,KAAL,CAAWiB,wBAAX,CAAoCN,WAApC;AACH,KAtCkB;;AAAA,SAwCnBO,qBAxCmB,GAwCK,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACtC,WAAKpB,KAAL,CAAWqB,wBAAX,CAAoCD,KAApC;AAEA,UAAIE,OAAO,GAAGhC,YAAY,CAAC,KAAKwB,KAAL,CAAWV,WAAX,CAAuBW,iBAAvB,EAAD,CAA1B;AAEA,UAAIQ,OAAO,GAAG;AACVC,QAAAA,IAAI,EAAE,EADI;AAEVC,QAAAA,KAAK,EAAE,CAFG;AAGVC,QAAAA,YAAY,EAAE,EAHJ;AAIVC,QAAAA,iBAAiB,EAAE,EAJT;AAKVC,QAAAA,GAAG,EAAEN,OAAO,CAAC1B,MAAR,CAAeiC,MAAf,GAAsB,OALjB;AAMVC,QAAAA,IAAI,EAAEX,KANI;AAOVY,QAAAA,IAAI,EAAE;AAPI,OAAd;AASAT,MAAAA,OAAO,GAAG,CAAC,GAAGA,OAAO,CAAC1B,MAAZ,EAAoB2B,OAApB,CAAV;AACA,YAAMZ,WAAW,GAAG;AAChBf,QAAAA,MAAM,EAAE,CAAC,GAAG0B,OAAJ,CADQ;AAEhBzB,QAAAA,SAAS,EAAE;AAFK,OAApB;AAIA,WAAKM,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAEjB,cAAc,CAACyB,iBAAf,CACTlB,YADS,EAETH,cAAc,CAACoB,WAAD,CAFL;AADH,OAAd;AAOA,UAAIE,oBAAoB,GAAGrB,aAAa,CAAC,KAAKsB,KAAL,CAAWV,WAAX,CAAuBW,iBAAvB,EAAD,CAAxC;AACA,WAAKf,KAAL,CAAWgB,wBAAX,CAAoCH,oBAApC;AAEA,WAAKb,KAAL,CAAWiB,wBAAX,CAAoCN,WAApC;AACH,KAtEkB;;AAAA,SAwEnBqB,oBAxEmB,GAwEI,MAAM;AACzB,UAAInB,oBAAoB,GAAGrB,aAAa,CAAC,KAAKsB,KAAL,CAAWV,WAAX,CAAuBW,iBAAvB,EAAD,CAAxC;AACA,WAAKf,KAAL,CAAWgB,wBAAX,CAAoCH,oBAApC;AACH,KA3EkB;;AAEf,SAAKC,KAAL,GAAa;AACTV,MAAAA,WAAW,EAAEjB,cAAc,CAACyB,iBAAf,CACTlB,YADS,EAETH,cAAc,CAAC,KAAKS,KAAL,CAAWiC,iBAAZ,CAFL;AADJ,KAAb;AAMH;;AAqEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,OADE;AAEFC,MAAAA;AAFE,QAGF,KAAKpC,KAHT;AAIA,UAAMqC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACNC,QAAAA,QAAQ,EAAE,CACNnD,mBAAmB,CAACoD,IADd,EAENpD,mBAAmB,CAACqD,MAFd,EAGNrD,mBAAmB,CAACsD,SAHd,EAINtD,mBAAmB,CAACuD,aAJd,EAKNvD,mBAAmB,CAACwD,WALd;AADJ,OADE;AAURC,MAAAA,MAAM,EAAE;AACPC,QAAAA,SAAS,EAAE;AADJ;AAVA,KAAf;AAcA,wBACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAEX,OAAO,CAACY,gBAAxB;AAAA,+BACI;AAAK,UAAA,SAAS,EAAEZ,OAAO,CAACa,kBAAxB;AAAA,iCACA,QAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAA,oCACI,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,sCACI;AAAM,gBAAA,SAAS,EAAEb,OAAO,CAACc,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,gBAAA,SAAS,EAAEd,OAAO,CAACe,iBAAxB;AAAA,uCACI,QAAC,SAAD;AAAW,kBAAA,WAAW,EAAE,KAAKpC,KAAL,CAAWV,WAAnC;AACI,kBAAA,QAAQ,EAAE,KAAKH,QADnB;AAEI,kBAAA,MAAM,EAAEoC;AAFZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAWI,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAEF,OAAO,CAACgB,cAAxB;AAAA,0BAEQf,QAAQ,CAACgB,GAAT,CAAa,CAACC,IAAD,EAAOjC,KAAP,kBACT,QAAC,OAAD;AAAqB,kBAAA,KAAK,EAAEiC,IAAI,CAACC,IAAjC;AAAuC,kBAAA,KAAK,MAA5C;AAA6C,kBAAA,SAAS,EAAC,MAAvD;AAA8D,kBAAA,mBAAmB,EAAEtE,IAAnF;AAAyF,kBAAA,eAAe,EAAE;AAAEuE,oBAAAA,OAAO,EAAE;AAAX,mBAA1G;AAAA,yCACA;AAAK,oBAAA,SAAS,EAAC,MAAf;AAAsB,oBAAA,OAAO,EAAE,MAAM,KAAKrC,qBAAL,CAA2BmC,IAAI,CAACC,IAAhC,EAAsClC,KAAtC,CAArC;AAAA,4CACI,QAAC,eAAD;AAAiB,sBAAA,SAAS,EAAEiC,IAAI,CAACG,QAAL,GAAgBrB,OAAO,CAACsB,WAAxB,GAAsC;AAAlE;AAAA;AAAA;AAAA;AAAA,4BADJ,eAEI;AAAM,sBAAA,SAAS,EAAC,aAAhB;AAAA,gCAA+BJ,IAAI,CAACC;AAApC;AAAA;AAAA;AAAA;AAAA,4BAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBAAclC,KAAd;AAAA;AAAA;AAAA;AAAA,wBADJ;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAkCH;;AAnIwC;;AAsI7C,eAAevC,UAAU,CAACD,MAAD,CAAV,CAAmBkB,oBAAnB,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport { styles } from \"./styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Tooltip, Zoom } from \"@material-ui/core\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport MUIEditor, { MUIEditorState,toolbarControlTypes  } from 'react-mui-draft-wysiwyg'\r\nimport { ContentState, convertToRaw, convertFromRaw } from 'draft-js'\r\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\r\n\r\nconst editorConfig = {}\r\n  const rawContent = {\r\n    blocks: [],\r\n    entityMap: {},\r\n  }\r\n\r\nclass JobSummaryMetaFields extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editorState: MUIEditorState.createWithContent(\r\n                editorConfig,\r\n                convertFromRaw(this.props.rawContentSummary),\r\n              )\r\n        }\r\n    }\r\n   \r\n    onChange = (newState) => {\r\n        this.setState({\r\n            editorState: newState\r\n        })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        window.scrollTo(0, null);\r\n        // this.props.fetchDataIfNeeded();\r\n\r\n        let convertedData = convertFromHTML(this.props.rawContentSummaryAsHTML);\r\n        let convertedRawData = convertToRaw(convertedData);\r\n\r\n        const rawContents = {\r\n            blocks: [...convertedRawData.blocks],\r\n            entityMap: {},\r\n        }\r\n        this.setState({\r\n            editorState: MUIEditorState.createWithContent(\r\n                editorConfig,\r\n                convertFromRaw(rawContents),\r\n              )\r\n        })\r\n\r\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\r\n        this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\r\n\r\n        this.props.saveUpdatedSummaryEditor(rawContents);\r\n    }\r\n\r\n    appendSummaryToEditor = (value, index) => {\r\n        this.props.summaryDataActiveHandler(index);\r\n\r\n        let oldData = convertToRaw(this.state.editorState.getCurrentContent());\r\n\r\n        let newItem = {\r\n            data: {},\r\n            depth: 0,\r\n            entityRanges: [],\r\n            inlineStyleRanges: [],\r\n            key: oldData.blocks.length+\"roles\",\r\n            text: value,\r\n            type: 'paragraph',\r\n          };\r\n        oldData = [...oldData.blocks, newItem]\r\n        const rawContents = {\r\n            blocks: [...oldData],\r\n            entityMap: {},\r\n        }\r\n        this.setState({\r\n            editorState: MUIEditorState.createWithContent(\r\n                editorConfig,\r\n                convertFromRaw(rawContents),\r\n              )\r\n        })\r\n\r\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\r\n        this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\r\n\r\n        this.props.saveUpdatedSummaryEditor(rawContents);\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        let currentContentAsHTML = convertToHTML(this.state.editorState.getCurrentContent());\r\n        this.props.saveUpdatedSummaryAsHTML(currentContentAsHTML);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            dataList,\r\n        } = this.props;\r\n        const config = {\r\n            toolbar: {\r\n               controls: [\r\n                   toolbarControlTypes.bold,\r\n                   toolbarControlTypes.italic,\r\n                   toolbarControlTypes.underline,\r\n                   toolbarControlTypes.unorderedList,\r\n                   toolbarControlTypes.orderedList,\r\n                 ],\r\n               },\r\n               editor: {\r\n                className: 'texteditor',\r\n              },\r\n        }; \r\n        return (\r\n            <>\r\n                <div className={classes.metafieldwrapper}>\r\n                    <div className={classes.rolesandreswrapper}>\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={8}>\r\n                            <span className={classes.metatitle}>Summary</span>\r\n                            <div className={classes.texteditorwrapper}>\r\n                                <MUIEditor editorState={this.state.editorState} \r\n                                    onChange={this.onChange}\r\n                                    config={config}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={4}>\r\n                            <div className={classes.suggesteditems}>\r\n                                {\r\n                                    dataList.map((item, index) => (\r\n                                        <Tooltip key={index} title={item.desc} arrow placement=\"left\" TransitionComponent={Zoom} TransitionProps={{ timeout: 600 }}>\r\n                                        <div className=\"item\" onClick={() => this.appendSummaryToEditor(item.desc, index)}>\r\n                                            <CheckCircleIcon className={item.isActive ? classes.addeditembg : \"\"}/>\r\n                                            <span className=\"description\">{item.desc}</span>\r\n                                        </div>\r\n                                        </Tooltip>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(JobSummaryMetaFields);"]},"metadata":{},"sourceType":"module"}