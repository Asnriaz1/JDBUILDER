{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\common\\\\ReduxBased\\\\CustomTextValidator\\\\component.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { styles } from \"./styles\";\nimport { TextValidator } from \"react-material-ui-form-validator\";\nimport PropTypes from \"prop-types\";\nimport NumberFormat from \"react-number-format\";\nimport ReduxGeneralHOC from \"../../../HOCs/ReduxGeneralHOC/component\";\nimport RoleBasedRenderHOC from \"../../../HOCs/RoleBasedRenderHOC/container\";\nimport PhoneInput, { isValidPhoneNumber } from \"react-phone-number-input\";\nimport ReactSelectValidator from \"../CustomReactSelectValidator/ReactSelectValidator\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CustomTextValidator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideValueAttr: props.hideValueAttr === undefined ? false : props.hideValueAttr,\n      returnType: props.returnType !== undefined && props.returnType.indexOf([\"object\", \"string\"]) ? props.returnType : \"object\"\n    };\n    this.changeField = this.changeField.bind(this);\n    this.blurField = this.blurField.bind(this);\n    this.keyDown = this.keyDown.bind(this);\n  }\n\n  changeField(e) {\n    if (this.props.returnType !== undefined) {\n      if (this.props.returnType === \"string\") {\n        this.props.onChange(e.target.value);\n      } else {\n        this.props.onChange({\n          value: e.target.value\n        });\n      }\n    } else {\n      if (!!e) {\n        this.props.onChange({\n          value: !!e.target && !!e.target.value ? e.target.value : e\n        });\n      }\n    }\n\n    this.setState({\n      hideValueAttr: this.props.hideValueAttr === undefined ? true : this.props.hideValueAttr\n    });\n  }\n\n  blurField(e) {\n    if (this.props.returnType !== undefined) {\n      if (this.props.returnType === \"text\") {\n        this.props.onChange(e.target.value.trim());\n      } else {\n        this.props.onChange({\n          value: e.target.value.trim()\n        });\n      }\n    } else {\n      this.props.onChange({\n        value: e.target.value.trim()\n      });\n    }\n\n    this.setState({\n      hideValueAttr: false\n    });\n  }\n\n  keyDown(e) {\n    if (e.keyCode === 13) {\n      this.props.onChange({\n        value: e.target.value.trim()\n      });\n    }\n  }\n\n  render() {\n    const {\n      field,\n      value,\n      validation,\n      InputProps,\n      hideValueAttr,\n      returnType,\n      // format,\n      onChange,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: validation === false ? /*#__PURE__*/_jsxDEV(TextField, {\n        InputProps: InputProps,\n        value: value,\n        onChange: this.changeField,\n        onBlur: this.blurField,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: this.state.hideValueAttr === true ? /*#__PURE__*/_jsxDEV(Fragment, {\n          children: this.props.format !== undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: !!this.props.tel ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(PhoneInput, {\n                country: \"PK\",\n                placeholder: \"Enter phone number\" // value={ this.state.value }\n                // onChange={ value => this.setState({ value }) }\n                ,\n                onChange: this.changeField,\n                error: value ? isValidPhoneNumber(value) ? undefined : \"Invalid phone number\" : \"Phone number required\",\n                ...rest\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 49\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(NumberFormat, {\n              customInput: TextValidator,\n              onBlur: this.blurField,\n              ...rest\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 45\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(TextValidator, {\n            onBlur: this.blurField,\n            onKeyDown: this.keyDown,\n            ...rest,\n            validators: [],\n            errorMessages: []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: this.props.format !== undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: !!this.props.tel ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(PhoneInput, {\n                country: \"PK\",\n                placeholder: \"Enter phone number\",\n                value: value // onChange={ value => this.setState({ value }) }\n                ,\n                onChange: this.changeField,\n                autoComplete: \"off\",\n                error: value ? isValidPhoneNumber(value) ? undefined : \"Invalid phone number\" : \"Phone number required\",\n                countrySelectComponent: ReactSelectValidator,\n                inputComponent: this,\n                ...rest\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 49\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(NumberFormat, {\n              customInput: TextValidator,\n              value: value,\n              onBlur: this.blurField,\n              onChange: this.changeField,\n              ...rest\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 45\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(TextValidator, {\n            InputProps: InputProps,\n            value: value === null ? '' : value,\n            onChange: this.changeField,\n            ...rest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nCustomTextValidator.propTypes = {\n  field: PropTypes.shape({\n    label: PropTypes.string,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.any,\n    hideValueAttr: PropTypes.bool,\n    // For Form Validator Plugin.\n    error: PropTypes.object\n  }),\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  validators: PropTypes.array.isRequired,\n  errorMessages: PropTypes.array.isRequired\n};\nexport default RoleBasedRenderHOC(ReduxGeneralHOC(withStyles(styles)(CustomTextValidator)));","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/common/ReduxBased/CustomTextValidator/component.js"],"names":["React","Component","Fragment","withStyles","styles","TextValidator","PropTypes","NumberFormat","ReduxGeneralHOC","RoleBasedRenderHOC","PhoneInput","isValidPhoneNumber","ReactSelectValidator","TextField","CustomTextValidator","constructor","props","state","hideValueAttr","undefined","returnType","indexOf","changeField","bind","blurField","keyDown","e","onChange","target","value","setState","trim","keyCode","render","field","validation","InputProps","rest","format","tel","propTypes","shape","label","string","placeholder","isRequired","any","bool","error","object","func","onBlur","name","validators","array","errorMessages"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,aAAR,QAA4B,kCAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,UAAP,IAAoBC,kBAApB,QAA6C,0BAA7C;AACA,OAAOC,oBAAP,MAAiC,oDAAjC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;;;AAEA,MAAMC,mBAAN,SAAkCb,SAAlC,CAA4C;AACxCc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAEF,KAAK,CAACE,aAAN,KAAwBC,SAAxB,GAAoC,KAApC,GAA4CH,KAAK,CAACE,aADxD;AAETE,MAAAA,UAAU,EAAEJ,KAAK,CAACI,UAAN,KAAqBD,SAArB,IAAkCH,KAAK,CAACI,UAAN,CAAiBC,OAAjB,CAAyB,CAAC,QAAD,EAAW,QAAX,CAAzB,CAAlC,GAAmFL,KAAK,CAACI,UAAzF,GAAsG;AAFzG,KAAb;AAIA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAf;AACH;;AAEDD,EAAAA,WAAW,CAACI,CAAD,EAAI;AACX,QAAI,KAAKV,KAAL,CAAWI,UAAX,KAA0BD,SAA9B,EAAyC;AACrC,UAAI,KAAKH,KAAL,CAAWI,UAAX,KAA0B,QAA9B,EAAwC;AACpC,aAAKJ,KAAL,CAAWW,QAAX,CAAoBD,CAAC,CAACE,MAAF,CAASC,KAA7B;AACH,OAFD,MAEO;AACH,aAAKb,KAAL,CAAWW,QAAX,CAAoB;AAChBE,UAAAA,KAAK,EAAEH,CAAC,CAACE,MAAF,CAASC;AADA,SAApB;AAGH;AACJ,KARD,MAQO;AACH,UAAI,CAAC,CAACH,CAAN,EAAS;AACL,aAAKV,KAAL,CAAWW,QAAX,CAAoB;AAChBE,UAAAA,KAAK,EAAE,CAAC,CAACH,CAAC,CAACE,MAAJ,IAAc,CAAC,CAACF,CAAC,CAACE,MAAF,CAASC,KAAzB,GAAiCH,CAAC,CAACE,MAAF,CAASC,KAA1C,GAAkDH;AADzC,SAApB;AAGH;AACJ;;AAED,SAAKI,QAAL,CAAc;AACVZ,MAAAA,aAAa,EAAE,KAAKF,KAAL,CAAWE,aAAX,KAA6BC,SAA7B,GAAyC,IAAzC,GAAgD,KAAKH,KAAL,CAAWE;AADhE,KAAd;AAGH;;AAEDM,EAAAA,SAAS,CAACE,CAAD,EAAI;AACT,QAAI,KAAKV,KAAL,CAAWI,UAAX,KAA0BD,SAA9B,EAAyC;AACrC,UAAI,KAAKH,KAAL,CAAWI,UAAX,KAA0B,MAA9B,EAAsC;AAClC,aAAKJ,KAAL,CAAWW,QAAX,CAAoBD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeE,IAAf,EAApB;AACH,OAFD,MAEO;AACH,aAAKf,KAAL,CAAWW,QAAX,CAAoB;AAChBE,UAAAA,KAAK,EAAEH,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeE,IAAf;AADS,SAApB;AAGH;AACJ,KARD,MAQO;AACH,WAAKf,KAAL,CAAWW,QAAX,CAAoB;AAChBE,QAAAA,KAAK,EAAEH,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeE,IAAf;AADS,OAApB;AAGH;;AACD,SAAKD,QAAL,CAAc;AACVZ,MAAAA,aAAa,EAAE;AADL,KAAd;AAGH;;AAEDO,EAAAA,OAAO,CAACC,CAAD,EAAI;AACP,QAAGA,CAAC,CAACM,OAAF,KAAc,EAAjB,EAAoB;AAChB,WAAKhB,KAAL,CAAWW,QAAX,CAAoB;AAChBE,QAAAA,KAAK,EAAEH,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeE,IAAf;AADS,OAApB;AAGH;AACJ;;AAEDE,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,KADE;AAEFL,MAAAA,KAFE;AAGFM,MAAAA,UAHE;AAIFC,MAAAA,UAJE;AAKFlB,MAAAA,aALE;AAMFE,MAAAA,UANE;AAOF;AACAO,MAAAA,QARE;AASF,SAAGU;AATD,QAUF,KAAKrB,KAVT;AAWA,wBACI,QAAC,QAAD;AAAA,gBACKmB,UAAU,KAAK,KAAf,gBACG,QAAC,SAAD;AAAW,QAAA,UAAU,EAAEC,UAAvB;AAAmC,QAAA,KAAK,EAAEP,KAA1C;AAAiD,QAAA,QAAQ,EAAE,KAAKP,WAAhE;AACW,QAAA,MAAM,EAAE,KAAKE,SADxB;AAAA,WACuCa;AADvC;AAAA;AAAA;AAAA;AAAA,cADH,gBAIG;AAAA,kBACK,KAAKpB,KAAL,CAAWC,aAAX,KAA6B,IAA7B,gBACG,QAAC,QAAD;AAAA,oBACK,KAAKF,KAAL,CAAWsB,MAAX,KAAsBnB,SAAtB,gBACG;AAAA,sBACK,CAAC,CAAC,KAAKH,KAAL,CAAWuB,GAAb,gBACG;AAAA,qCACI,QAAC,UAAD;AACI,gBAAA,OAAO,EAAC,IADZ;AAEI,gBAAA,WAAW,EAAC,oBAFhB,CAGI;AACA;AAJJ;AAKI,gBAAA,QAAQ,EAAE,KAAKjB,WALnB;AAMI,gBAAA,KAAK,EAAEO,KAAK,GAAIlB,kBAAkB,CAACkB,KAAD,CAAlB,GAA4BV,SAA5B,GAAwC,sBAA5C,GAAsE,uBANtF;AAAA,mBAOQkB;AAPR;AAAA;AAAA;AAAA;AAAA;AADJ,6BADH,gBAaG,QAAC,YAAD;AAAc,cAAA,WAAW,EAAEhC,aAA3B;AACc,cAAA,MAAM,EAAE,KAAKmB,SAD3B;AAAA,iBAC0Ca;AAD1C;AAAA;AAAA;AAAA;AAAA;AAdR,2BADH,gBAoBG,QAAC,aAAD;AAAe,YAAA,MAAM,EAAE,KAAKb,SAA5B;AAAuC,YAAA,SAAS,EAAE,KAAKC,OAAvD;AAAA,eAAoEY,IAApE;AACe,YAAA,UAAU,EAAE,EAD3B;AAC+B,YAAA,aAAa,EAAE;AAD9C;AAAA;AAAA;AAAA;AAAA;AArBR;AAAA;AAAA;AAAA;AAAA,gBADH,gBA2BG,QAAC,QAAD;AAAA,oBACK,KAAKrB,KAAL,CAAWsB,MAAX,KAAsBnB,SAAtB,gBACG;AAAA,sBACK,CAAC,CAAC,KAAKH,KAAL,CAAWuB,GAAb,gBACG;AAAA,qCACI,QAAC,UAAD;AACI,gBAAA,OAAO,EAAC,IADZ;AAEI,gBAAA,WAAW,EAAC,oBAFhB;AAGI,gBAAA,KAAK,EAAEV,KAHX,CAII;AAJJ;AAKI,gBAAA,QAAQ,EAAE,KAAKP,WALnB;AAMI,gBAAA,YAAY,EAAE,KANlB;AAOI,gBAAA,KAAK,EAAEO,KAAK,GAAIlB,kBAAkB,CAACkB,KAAD,CAAlB,GAA4BV,SAA5B,GAAwC,sBAA5C,GAAsE,uBAPtF;AAQI,gBAAA,sBAAsB,EAAEP,oBAR5B;AASI,gBAAA,cAAc,EAAE,IATpB;AAAA,mBAUQyB;AAVR;AAAA;AAAA;AAAA;AAAA;AADJ,6BADH,gBAgBG,QAAC,YAAD;AAAc,cAAA,WAAW,EAAEhC,aAA3B;AAA0C,cAAA,KAAK,EAAEwB,KAAjD;AACc,cAAA,MAAM,EAAE,KAAKL,SAD3B;AAEc,cAAA,QAAQ,EAAE,KAAKF,WAF7B;AAAA,iBAE8Ce;AAF9C;AAAA;AAAA;AAAA;AAAA;AAjBR,2BADH,gBAwBG,QAAC,aAAD;AAAe,YAAA,UAAU,EAAED,UAA3B;AAAuC,YAAA,KAAK,EAAGP,KAAK,KAAK,IAAX,GAAmB,EAAnB,GAAwBA,KAAtE;AAA6E,YAAA,QAAQ,EAAE,KAAKP,WAA5F;AAAA,eACoBe;AADpB;AAAA;AAAA;AAAA;AAAA;AAzBR;AAAA;AAAA;AAAA;AAAA;AA5BR;AALR;AAAA;AAAA;AAAA;AAAA,YADJ;AAoEH;;AA7IuC;;AAgJ5CvB,mBAAmB,CAAC0B,SAApB,GAAgC;AAC5BN,EAAAA,KAAK,EAAE5B,SAAS,CAACmC,KAAV,CAAgB;AACnBC,IAAAA,KAAK,EAAEpC,SAAS,CAACqC,MADE;AAEnBC,IAAAA,WAAW,EAAEtC,SAAS,CAACqC,MAAV,CAAiBE,UAFX;AAGnBhB,IAAAA,KAAK,EAAEvB,SAAS,CAACwC,GAHE;AAInB5B,IAAAA,aAAa,EAAEZ,SAAS,CAACyC,IAJN;AAIY;AAC/BC,IAAAA,KAAK,EAAE1C,SAAS,CAAC2C;AALE,GAAhB,CADqB;AAQ5BtB,EAAAA,QAAQ,EAAErB,SAAS,CAAC4C,IARQ;AAS5BC,EAAAA,MAAM,EAAE7C,SAAS,CAAC4C,IATU;AAU5BE,EAAAA,IAAI,EAAE9C,SAAS,CAACqC,MAAV,CAAiBE,UAVK;AAW5BQ,EAAAA,UAAU,EAAE/C,SAAS,CAACgD,KAAV,CAAgBT,UAXA;AAY5BU,EAAAA,aAAa,EAAEjD,SAAS,CAACgD,KAAV,CAAgBT;AAZH,CAAhC;AAeA,eAAepC,kBAAkB,CAACD,eAAe,CAACL,UAAU,CAACC,MAAD,CAAV,CAAmBU,mBAAnB,CAAD,CAAhB,CAAjC","sourcesContent":["import React, {Component, Fragment} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport {styles} from \"./styles\";\nimport {TextValidator} from \"react-material-ui-form-validator\";\nimport PropTypes from \"prop-types\";\nimport NumberFormat from \"react-number-format\";\nimport ReduxGeneralHOC from \"../../../HOCs/ReduxGeneralHOC/component\";\nimport RoleBasedRenderHOC from \"../../../HOCs/RoleBasedRenderHOC/container\";\nimport PhoneInput, {isValidPhoneNumber} from \"react-phone-number-input\";\nimport ReactSelectValidator from \"../CustomReactSelectValidator/ReactSelectValidator\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass CustomTextValidator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideValueAttr: props.hideValueAttr === undefined ? false : props.hideValueAttr,\n            returnType: props.returnType !== undefined && props.returnType.indexOf([\"object\", \"string\"]) ? props.returnType : \"object\"\n        };\n        this.changeField = this.changeField.bind(this);\n        this.blurField = this.blurField.bind(this);\n        this.keyDown = this.keyDown.bind(this);\n    }\n\n    changeField(e) {\n        if (this.props.returnType !== undefined) {\n            if (this.props.returnType === \"string\") {\n                this.props.onChange(e.target.value);\n            } else {\n                this.props.onChange({\n                    value: e.target.value\n                });\n            }\n        } else {\n            if (!!e) {\n                this.props.onChange({\n                    value: !!e.target && !!e.target.value ? e.target.value : e\n                });\n            }\n        }\n\n        this.setState({\n            hideValueAttr: this.props.hideValueAttr === undefined ? true : this.props.hideValueAttr\n        });\n    }\n\n    blurField(e) {\n        if (this.props.returnType !== undefined) {\n            if (this.props.returnType === \"text\") {\n                this.props.onChange(e.target.value.trim());\n            } else {\n                this.props.onChange({\n                    value: e.target.value.trim()\n                });\n            }\n        } else {\n            this.props.onChange({\n                value: e.target.value.trim()\n            });\n        }\n        this.setState({\n            hideValueAttr: false\n        });\n    }\n\n    keyDown(e) {\n        if(e.keyCode === 13){\n            this.props.onChange({\n                value: e.target.value.trim()\n            });\n        }\n    }\n\n    render() {\n        const {\n            field,\n            value,\n            validation,\n            InputProps,\n            hideValueAttr,\n            returnType,\n            // format,\n            onChange,\n            ...rest\n        } = this.props;\n        return (\n            <Fragment>\n                {validation === false ? (\n                    <TextField InputProps={InputProps} value={value} onChange={this.changeField}\n                               onBlur={this.blurField} {...rest} />\n                ) : (\n                    <>\n                        {this.state.hideValueAttr === true ? (\n                            <Fragment>\n                                {this.props.format !== undefined ? (\n                                    <>\n                                        {!!this.props.tel ? (\n                                            <>\n                                                <PhoneInput\n                                                    country='PK'\n                                                    placeholder='Enter phone number'\n                                                    // value={ this.state.value }\n                                                    // onChange={ value => this.setState({ value }) }\n                                                    onChange={this.changeField}\n                                                    error={value ? (isValidPhoneNumber(value) ? undefined : \"Invalid phone number\") : \"Phone number required\"}\n                                                    {...rest}\n                                                />\n                                            </>\n                                        ) : (\n                                            <NumberFormat customInput={TextValidator}\n                                                          onBlur={this.blurField} {...rest} />\n                                        )}\n                                    </>\n                                ) : (\n                                    <TextValidator onBlur={this.blurField} onKeyDown={this.keyDown} {...rest}\n                                                   validators={[]} errorMessages={[]}/>\n                                )}\n                            </Fragment>\n                        ) : (\n                            <Fragment>\n                                {this.props.format !== undefined ? (\n                                    <>\n                                        {!!this.props.tel ? (\n                                            <>\n                                                <PhoneInput\n                                                    country='PK'\n                                                    placeholder='Enter phone number'\n                                                    value={value}\n                                                    // onChange={ value => this.setState({ value }) }\n                                                    onChange={this.changeField}\n                                                    autoComplete={\"off\"}\n                                                    error={value ? (isValidPhoneNumber(value) ? undefined : \"Invalid phone number\") : \"Phone number required\"}\n                                                    countrySelectComponent={ReactSelectValidator}\n                                                    inputComponent={this}\n                                                    {...rest}\n                                                />\n                                            </>\n                                        ) : (\n                                            <NumberFormat customInput={TextValidator} value={value}\n                                                          onBlur={this.blurField}\n                                                          onChange={this.changeField} {...rest} />\n                                        )}\n                                    </>\n                                ) : (\n                                    <TextValidator InputProps={InputProps} value={(value === null) ? '' : value} onChange={this.changeField}\n                                                    {...rest} />\n                                )}\n                            </Fragment>\n                        )}\n                    </>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nCustomTextValidator.propTypes = {\n    field: PropTypes.shape({\n        label: PropTypes.string,\n        placeholder: PropTypes.string.isRequired,\n        value: PropTypes.any,\n        hideValueAttr: PropTypes.bool, // For Form Validator Plugin.\n        error: PropTypes.object\n    }),\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    validators: PropTypes.array.isRequired,\n    errorMessages: PropTypes.array.isRequired\n};\n\nexport default RoleBasedRenderHOC(ReduxGeneralHOC(withStyles(styles)(CustomTextValidator)));\n"]},"metadata":{},"sourceType":"module"}