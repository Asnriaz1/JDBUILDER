{"ast":null,"code":"import{createStore,applyMiddleware,compose}from\"redux\";import rootReducer from\"../reducers/rootReducer\";import thunk from\"redux-thunk\";import initialState from\"./initialState\";import{createLogger}from\"redux-logger\";// const middleware = [thunk, reduxImmutableStateInvariant()];\nvar middleware=[thunk];middleware.push(createLogger({duration:true,diff:true}));var composedMiddleWare=compose(applyMiddleware.apply(void 0,middleware));if(!!window.__REDUX_DEVTOOLS_EXTENSION__){composedMiddleWare=compose(applyMiddleware.apply(void 0,middleware),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__());}var store=createStore(rootReducer,initialState,composedMiddleWare);export default store;","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/store/configurestore.js"],"names":["createStore","applyMiddleware","compose","rootReducer","thunk","initialState","createLogger","middleware","push","duration","diff","composedMiddleWare","window","__REDUX_DEVTOOLS_EXTENSION__","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,OAAvC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,YAAT,KAA6B,cAA7B,CAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,CAACH,KAAD,CAAnB,CAEAG,UAAU,CAACC,IAAX,CAAgBF,YAAY,CAAC,CAC3BG,QAAQ,CAAE,IADiB,CAE3BC,IAAI,CAAE,IAFqB,CAAD,CAA5B,EAKA,GAAIC,CAAAA,kBAAkB,CAAGT,OAAO,CAACD,eAAe,MAAf,QAAmBM,UAAnB,CAAD,CAAhC,CAEA,GAAI,CAAC,CAACK,MAAM,CAACC,4BAAb,CAA2C,CAC1CF,kBAAkB,CAAGT,OAAO,CAC3BD,eAAe,MAAf,QAAmBM,UAAnB,CAD2B,CAE3BK,MAAM,CAACC,4BAAP,EAAuCD,MAAM,CAACC,4BAAP,EAFZ,CAA5B,CAIA,CAED,GAAMC,CAAAA,KAAK,CAAGd,WAAW,CAACG,WAAD,CAAcE,YAAd,CAA4BM,kBAA5B,CAAzB,CAEA,cAAeG,CAAAA,KAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\nimport initialState from \"./initialState\";\nimport { createLogger } from \"redux-logger\";\n\n// const middleware = [thunk, reduxImmutableStateInvariant()];\nconst middleware = [thunk];\n\nmiddleware.push(createLogger({\n  duration: true,\n  diff: true\n}));\n\nlet composedMiddleWare = compose(applyMiddleware(...middleware));\n\nif (!!window.__REDUX_DEVTOOLS_EXTENSION__) {\n\tcomposedMiddleWare = compose(\n\t\tapplyMiddleware(...middleware),\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\t);\n}\n\nconst store = createStore(rootReducer, initialState, composedMiddleWare);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}