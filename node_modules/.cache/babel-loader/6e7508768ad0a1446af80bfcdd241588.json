{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Advertise from \"./component\";\nimport { headerPathActiveHandler, pathChangeHandler } from \"../actions\";\nimport { saveSuggestedCandidates } from \"./actions\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport ls from 'local-storage';\n\nconst mapStateToProps = state => ({\n  candidateList: state.ADVERTISE.data.candidateList\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  headerPathActiveHandler: val => {\n    dispatch(headerPathActiveHandler(val));\n    dispatch(pathChangeHandler(\"/create/download\"));\n  },\n  fetchDataIfNeeded: () => {\n    let jobCode = ls.get('jobCode');\n    instance.get(BASE_URL + 'User/AdvertisePage/SuggestedCandidates?JobCode=' + jobCode).then(res => {\n      dispatch(saveSuggestedCandidates(res.data.matched_Candidates));\n    }).catch(error => {});\n  },\n  sendEmailToCandidate: userData => {\n    let jobCode = ls.get('jobCode');\n    let jobTitle = ls.get('jobTitle');\n    let data = {\n      Job_Title: jobTitle,\n      Job_Code: jobCode,\n      Candidate_Email: userData.candidate_Contact_Details.candidate_Email,\n      Candidate_Name: userData.candidate_Name,\n      Candidate_Guid: userData.candidate_Guid\n    };\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\n    instance.post(BASE_URL + 'User/AdvertisePage/SendEmail', data).then(res => {\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(Advertise);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/Advertise/container.js"],"names":["connect","Advertise","headerPathActiveHandler","pathChangeHandler","saveSuggestedCandidates","instance","BASE_URL","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","ls","mapStateToProps","state","candidateList","ADVERTISE","data","mapDispatchToProps","dispatch","props","val","fetchDataIfNeeded","jobCode","get","then","res","matched_Candidates","catch","error","sendEmailToCandidate","userData","jobTitle","Job_Title","Job_Code","Candidate_Email","candidate_Contact_Details","candidate_Email","Candidate_Name","candidate_Name","Candidate_Guid","candidate_Guid","post","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SACIC,uBADJ,EAEIC,iBAFJ,QAGO,YAHP;AAIA,SACIC,uBADJ,QAEO,WAFP;AAIA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,wBAAnC;AACA,SACIC,yBADJ,EAEIC,mCAFJ,QAGO,mDAHP;AAIA,OAAOC,EAAP,MAAe,eAAf;;AAEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,aAAa,EAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBF;AADN,CAAL,CAA7B;;AAIA,MAAMG,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAC7Cf,EAAAA,uBAAuB,EAAGgB,GAAD,IAAS;AAC9BF,IAAAA,QAAQ,CAACd,uBAAuB,CAACgB,GAAD,CAAxB,CAAR;AACAF,IAAAA,QAAQ,CAACb,iBAAiB,CAAC,kBAAD,CAAlB,CAAR;AACH,GAJ4C;AAK7CgB,EAAAA,iBAAiB,EAAE,MAAM;AACrB,QAAIC,OAAO,GAAGX,EAAE,CAACY,GAAH,CAAO,SAAP,CAAd;AACAhB,IAAAA,QAAQ,CAACgB,GAAT,CAAaf,QAAQ,GAAC,iDAAT,GAA2Dc,OAAxE,EACCE,IADD,CACMC,GAAG,IAAI;AACTP,MAAAA,QAAQ,CAACZ,uBAAuB,CAACmB,GAAG,CAACT,IAAJ,CAASU,kBAAV,CAAxB,CAAR;AACH,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAI,CACf,CALD;AAMH,GAb4C;AAc7CC,EAAAA,oBAAoB,EAAGC,QAAD,IAAc;AAEhC,QAAIR,OAAO,GAAGX,EAAE,CAACY,GAAH,CAAO,SAAP,CAAd;AACA,QAAIQ,QAAQ,GAAGpB,EAAE,CAACY,GAAH,CAAO,UAAP,CAAf;AACA,QAAIP,IAAI,GAAG;AACPgB,MAAAA,SAAS,EAAED,QADJ;AAEPE,MAAAA,QAAQ,EAAEX,OAFH;AAGPY,MAAAA,eAAe,EAAEJ,QAAQ,CAACK,yBAAT,CAAmCC,eAH7C;AAIPC,MAAAA,cAAc,EAAEP,QAAQ,CAACQ,cAJlB;AAKPC,MAAAA,cAAc,EAAET,QAAQ,CAACU;AALlB,KAAX;AAOAtB,IAAAA,QAAQ,CAACR,mCAAmC,CAAC,IAAD,EAAO,kBAAP,EAA2B,OAA3B,CAApC,CAAR;AAEAH,IAAAA,QAAQ,CAACkC,IAAT,CAAcjC,QAAQ,GAAC,8BAAvB,EAAuDQ,IAAvD,EACCQ,IADD,CACMC,GAAG,IAAI;AACTP,MAAAA,QAAQ,CAACT,yBAAyB,EAA1B,CAAR;AACH,KAHD,EAICkB,KAJD,CAIOC,KAAK,IAAI;AACZV,MAAAA,QAAQ,CAACT,yBAAyB,EAA1B,CAAR;AACH,KAND;AAOH;AAlC4C,CAAtB,CAA3B;;AAqCA,MAAMiC,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzD,KAAGC;AAHsD,CAA1C,CAAnB;;AAMA,eAAe3C,OAAO,CAClBU,eADkB,EAElBK,kBAFkB,EAGlByB,UAHkB,CAAP,CAIbvC,SAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Advertise from \"./component\";\nimport {\n    headerPathActiveHandler,\n    pathChangeHandler\n} from \"../actions\";\nimport {\n    saveSuggestedCandidates\n} from \"./actions\";\n\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport ls from 'local-storage';\n\nconst mapStateToProps = state => ({\n    candidateList: state.ADVERTISE.data.candidateList\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    headerPathActiveHandler: (val) => {\n        dispatch(headerPathActiveHandler(val));\n        dispatch(pathChangeHandler(\"/create/download\"))\n    },\n    fetchDataIfNeeded: () => {\n        let jobCode = ls.get('jobCode');\n        instance.get(BASE_URL+'User/AdvertisePage/SuggestedCandidates?JobCode='+jobCode)\n        .then(res => {\n            dispatch(saveSuggestedCandidates(res.data.matched_Candidates));\n        })\n        .catch(error => {\n        })\n    },\n    sendEmailToCandidate: (userData) => {\n\n        let jobCode = ls.get('jobCode');\n        let jobTitle = ls.get('jobTitle');\n        let data = {\n            Job_Title: jobTitle,\n            Job_Code: jobCode,\n            Candidate_Email: userData.candidate_Contact_Details.candidate_Email,\n            Candidate_Name: userData.candidate_Name,\n            Candidate_Guid: userData.candidate_Guid\n        }\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\n\n        instance.post(BASE_URL+'User/AdvertisePage/SendEmail', data)\n        .then(res => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(Advertise);"]},"metadata":{},"sourceType":"module"}