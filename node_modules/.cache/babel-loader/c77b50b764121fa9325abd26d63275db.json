{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{styles}from\"./styles\";import{withStyles}from\"@material-ui/core/styles\";import{Button,Grid}from\"@material-ui/core\";import{ValidatorForm}from\"react-material-ui-form-validator\";import CustomTextValidator from\"../../common/ReduxBased/CustomTextValidator/component\";import{NavLink}from'react-router-dom';var ResetPasswordPage=/*#__PURE__*/function(_Component){_inherits(ResetPasswordPage,_Component);function ResetPasswordPage(){var _getPrototypeOf2;var _this;_classCallCheck(this,ResetPasswordPage);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(ResetPasswordPage)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={resetToken:\"\"};_this.componentDidMount=function(){var token=window.location.search.replace(\"?ResetToken=\",\"\");_this.setState({resetToken:token});};_this.SubmitHandler=function(){_this.props.submitResetFormHandler();};_this.submitNewPasswordHandler=function(){_this.props.submitNewPasswordHandler(_this.state.resetToken);};return _this;}_createClass(ResetPasswordPage,[{key:\"render\",value:function render(){var _this$props=this.props,classes=_this$props.classes,fields=_this$props.fields,textFieldChangeHandler=_this$props.textFieldChangeHandler,error=_this$props.error,resetPasswordMessage=_this$props.resetPasswordMessage;var resetToken=this.state.resetToken;return React.createElement(\"div\",{className:classes.polygonbg},React.createElement(Grid,{container:true,className:classes.signupWrapper},React.createElement(Grid,{item:true,sm:4},React.createElement(\"h1\",{className:classes.signuptitle},\"Reset Password\"),React.createElement(\"p\",{className:classes.signupsubtitle},resetToken?\"Enter your new password\":\"Enter your email so we can send you a link to reset your password\"),resetToken?React.createElement(ValidatorForm,{onSubmit:this.submitNewPasswordHandler,autoComplete:\"off\"},React.createElement(CustomTextValidator,{id:fields.PasswordField.name,validations:true,fullWidth:true,type:\"password\",placeholder:fields.PasswordField.placeholder,name:fields.PasswordField.name,value:fields.PasswordField.value,onChange:function onChange(value){textFieldChangeHandler(fields.PasswordField.name,value);},validators:[\"required\"],errorMessages:[\"Required\"],className:classes.signupfields}),React.createElement(CustomTextValidator,{id:fields.ConfirmPasswordField.name,validations:true,fullWidth:true,type:\"password\",placeholder:fields.ConfirmPasswordField.placeholder,name:fields.ConfirmPasswordField.name,value:fields.ConfirmPasswordField.value,onChange:function onChange(value){textFieldChangeHandler(fields.ConfirmPasswordField.name,value);},validators:[\"required\"],errorMessages:[\"Required\"],className:classes.signupfields}),resetPasswordMessage?React.createElement(\"span\",{className:classes.error},resetPasswordMessage):null,resetPasswordMessage===\"Password updated successfully\"?React.createElement(NavLink,{to:'/login',className:classes.signupSubmitBtn},\"Login\"):React.createElement(Button,{variant:\"contained\",color:\"primary\",type:\"submit\",className:classes.signupSubmitBtn},\"Reset Password\")):React.createElement(ValidatorForm,{onSubmit:this.SubmitHandler,autoComplete:\"off\"},React.createElement(CustomTextValidator,{id:fields.EmailField.name,validations:true,fullWidth:true,type:\"text\",placeholder:fields.EmailField.placeholder,name:fields.EmailField.name,value:fields.EmailField.value,onChange:function onChange(value){textFieldChangeHandler(fields.EmailField.name,value);},validators:[\"required\",\"matchRegexp:^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$\"],errorMessages:[\"Required\",\"Please enter a valid email\"],className:classes.signupfields}),error?React.createElement(\"span\",{className:classes.error},error):null,React.createElement(Button,{variant:\"contained\",color:\"primary\",type:\"submit\",className:classes.signupSubmitBtn},\"Send\")))));}}]);return ResetPasswordPage;}(Component);export default withStyles(styles)(ResetPasswordPage);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/Signup/ResetPassword/component.js"],"names":["React","Component","styles","withStyles","Button","Grid","ValidatorForm","CustomTextValidator","NavLink","ResetPasswordPage","state","resetToken","componentDidMount","token","window","location","search","replace","setState","SubmitHandler","props","submitResetFormHandler","submitNewPasswordHandler","classes","fields","textFieldChangeHandler","error","resetPasswordMessage","polygonbg","signupWrapper","signuptitle","signupsubtitle","PasswordField","name","placeholder","value","signupfields","ConfirmPasswordField","signupSubmitBtn","EmailField"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport CustomTextValidator from \"../../common/ReduxBased/CustomTextValidator/component\";\nimport { NavLink } from 'react-router-dom';\n\nclass ResetPasswordPage extends Component {\n\n    state = {\n        resetToken: \"\"\n    }\n\n    componentDidMount = () => {\n        let token = window.location.search.replace(\"?ResetToken=\",\"\")\n        this.setState({\n            resetToken: token\n        })\n    }\n\n    SubmitHandler = () => {\n        this.props.submitResetFormHandler();\n    }\n\n    submitNewPasswordHandler = () => {\n        this.props.submitNewPasswordHandler(this.state.resetToken);\n    }\n\n\n    render() {\n\n        const {\n            classes,\n            fields,\n            textFieldChangeHandler,\n            error,\n            resetPasswordMessage\n        } = this.props;\n\n        const {\n            resetToken\n        } = this.state;\n\n        return (\n                <div className={classes.polygonbg}>\n                <Grid container className={classes.signupWrapper}>\n\n                    <Grid item sm={4}>\n                        <h1 className={classes.signuptitle} >Reset Password</h1>\n                        <p className={classes.signupsubtitle} >\n                            {\n                                resetToken ? \"Enter your new password\" : \n                                \"Enter your email so we can send you a link to reset your password\"\n                            }\n                            </p>\n\n                        {\n                            resetToken ? <ValidatorForm\n                            onSubmit={this.submitNewPasswordHandler}\n                            autoComplete=\"off\"\n                            >\n    \n                                <CustomTextValidator\n                                id={fields.PasswordField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"password\"\n                                placeholder={fields.PasswordField.placeholder}\n                                name={fields.PasswordField.name}\n                                value={fields.PasswordField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.PasswordField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.signupfields}\n                                />\n\n                                <CustomTextValidator\n                                id={fields.ConfirmPasswordField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"password\"\n                                placeholder={fields.ConfirmPasswordField.placeholder}\n                                name={fields.ConfirmPasswordField.name}\n                                value={fields.ConfirmPasswordField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.ConfirmPasswordField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.signupfields}\n                                />\n    \n                                {\n                                    resetPasswordMessage ? <span className={classes.error}>{resetPasswordMessage}</span> : null\n                                }\n\n                                {\n                                    resetPasswordMessage  === \"Password updated successfully\" ? \n                                    <NavLink\n                                        to={'/login'}\n                                        className={classes.signupSubmitBtn}\n                                    >\n                                        Login\n                                    </NavLink> : \n                                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.signupSubmitBtn} >\n                                        Reset Password\n                                    </Button>\n                                }\n                                \n    \n                            </ValidatorForm> : \n\n                            <ValidatorForm\n                        onSubmit={this.SubmitHandler}\n                        autoComplete=\"off\"\n                        >\n\n                            <CustomTextValidator\n                            id={fields.EmailField.name}\n                            validations={true}\n                            fullWidth={true}\n                            type=\"text\"\n                            placeholder={fields.EmailField.placeholder}\n                            name={fields.EmailField.name}\n                            value={fields.EmailField.value}\n                            onChange={value => {\n                                textFieldChangeHandler(\n                                    fields.EmailField.name,\n                                    value\n                                );\n                            }}\n                            validators={[\n                                \"required\",\n                                \"matchRegexp:^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$\"\n                            ]}\n                            errorMessages={[\n                                \"Required\",\n                                \"Please enter a valid email\"\n                            ]}\n                            className={classes.signupfields}\n                            />\n\n                            {\n                                error ? <span className={classes.error}>{error}</span> : null\n                            }\n\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.signupSubmitBtn} >\n                                Send\n                            </Button>\n\n                        </ValidatorForm>\n                        }\n                        \n                    </Grid>\n                   \n                </Grid>\n                </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(ResetPasswordPage);"]},"metadata":{},"sourceType":"module"}