{"ast":null,"code":"import { connect } from \"react-redux\";\nimport ResetPasswordPage from \"./component\";\nimport { textFieldResetChangeHandler, saveResetPasswordError, setResetPasswordMassage } from \"../actions\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../common/ReduxBased/LoadingSpinner/actions\";\nimport instance, { BASE_URL_SQL } from \"../../../api/config\";\n\nconst mapStateToProps = state => ({\n  fields: state.SIGNUP.forms.resetPasswordForm.fields,\n  error: state.SIGNUP.UISettings.resetPasswordError,\n  resetPasswordMessage: state.SIGNUP.UISettings.resetPasswordMessage\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  textFieldChangeHandler: (name, e) => {\n    if (typeof e.value !== \"string\") {\n      e.value = \"\";\n    }\n\n    dispatch(textFieldResetChangeHandler(name, e));\n  },\n  submitResetFormHandler: email => {\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\n    instance.get(BASE_URL_SQL + 'PasswordReset?Email=' + email).then(res => {\n      dispatch(saveResetPasswordError(res.data.message));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  },\n  submitNewPasswordHandler: (token, PasswordField, ConfirmPasswordField) => {\n    let data = {\n      Password: PasswordField,\n      R_Password: ConfirmPasswordField\n    };\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Updating Password...\", \"large\"));\n    instance.put(BASE_URL_SQL + 'PasswordReset/Reset', data, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(handleLoadingSpinnerClose());\n      dispatch(setResetPasswordMassage(res.data.message));\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  submitResetFormHandler: () => {\n    dispatchProps.submitResetFormHandler(stateProps.fields.EmailField.value);\n  },\n  submitNewPasswordHandler: token => {\n    dispatchProps.submitNewPasswordHandler(token, stateProps.fields.PasswordField.value, stateProps.fields.ConfirmPasswordField.value);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(ResetPasswordPage);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/Signup/ResetPassword/container.js"],"names":["connect","ResetPasswordPage","textFieldResetChangeHandler","saveResetPasswordError","setResetPasswordMassage","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","instance","BASE_URL_SQL","mapStateToProps","state","fields","SIGNUP","forms","resetPasswordForm","error","UISettings","resetPasswordError","resetPasswordMessage","mapDispatchToProps","dispatch","props","textFieldChangeHandler","name","e","value","submitResetFormHandler","email","get","then","res","data","message","catch","submitNewPasswordHandler","token","PasswordField","ConfirmPasswordField","Password","R_Password","put","headers","authorization","mergeProps","stateProps","dispatchProps","ownProps","EmailField"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport ResetPasswordPage from \"./component\";\nimport {\n    textFieldResetChangeHandler,\n    saveResetPasswordError,\n    setResetPasswordMassage\n} from \"../actions\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../common/ReduxBased/LoadingSpinner/actions\";\n\nimport instance, { BASE_URL_SQL } from \"../../../api/config\";\n\nconst mapStateToProps = state => ({\n    fields: state.SIGNUP.forms.resetPasswordForm.fields,\n    error: state.SIGNUP.UISettings.resetPasswordError,\n    resetPasswordMessage: state.SIGNUP.UISettings.resetPasswordMessage\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    textFieldChangeHandler: (name, e) => {\n        if (typeof e.value !== \"string\") {\n            e.value = \"\";\n        }\n        dispatch(textFieldResetChangeHandler(name, e));\n    },\n    submitResetFormHandler: (email) => {\n        \n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Email...\", \"large\"));\n        instance.get(BASE_URL_SQL+'PasswordReset?Email='+email)\n        .then(res => {\n            dispatch(saveResetPasswordError(res.data.message))\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    },\n    submitNewPasswordHandler: (token, PasswordField, ConfirmPasswordField) => {\n        let data = {\n            Password: PasswordField ,\n            R_Password: ConfirmPasswordField\n        }\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Updating Password...\", \"large\"));\n\n        instance.put(BASE_URL_SQL+'PasswordReset/Reset', data,\n        {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n        .then(res => {\n            dispatch(handleLoadingSpinnerClose());\n            dispatch(setResetPasswordMassage(res.data.message))\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    submitResetFormHandler: () => {\n        dispatchProps.submitResetFormHandler(stateProps.fields.EmailField.value);\n    },\n    submitNewPasswordHandler: (token) => {\n        dispatchProps.submitNewPasswordHandler(token, stateProps.fields.PasswordField.value, stateProps.fields.ConfirmPasswordField.value);\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(ResetPasswordPage);"]},"metadata":{},"sourceType":"module"}