{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\Signup\\\\ResetPassword\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport CustomTextValidator from \"../../common/ReduxBased/CustomTextValidator/component\";\nimport { NavLink } from 'react-router-dom';\n\nclass ResetPasswordPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      resetToken: \"\"\n    };\n\n    this.componentDidMount = () => {\n      let token = window.location.search.replace(\"?ResetToken=\", \"\");\n      this.setState({\n        resetToken: token\n      });\n    };\n\n    this.SubmitHandler = () => {\n      this.props.submitResetFormHandler();\n    };\n\n    this.submitNewPasswordHandler = () => {\n      this.props.submitNewPasswordHandler(this.state.resetToken);\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      fields,\n      textFieldChangeHandler,\n      error,\n      resetPasswordMessage\n    } = this.props;\n    const {\n      resetToken\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: classes.polygonbg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      className: classes.signupWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.signuptitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Reset Password\"), React.createElement(\"p\", {\n      className: classes.signupsubtitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, resetToken ? \"Enter your new password\" : \"Enter your email so we can send you a link to reset your password\"), resetToken ? React.createElement(ValidatorForm, {\n      onSubmit: this.submitNewPasswordHandler,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(CustomTextValidator, {\n      id: fields.PasswordField.name,\n      validations: true,\n      fullWidth: true,\n      type: \"password\",\n      placeholder: fields.PasswordField.placeholder,\n      name: fields.PasswordField.name,\n      value: fields.PasswordField.value,\n      onChange: value => {\n        textFieldChangeHandler(fields.PasswordField.name, value);\n      },\n      validators: [\"required\"],\n      errorMessages: [\"Required\"],\n      className: classes.signupfields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(CustomTextValidator, {\n      id: fields.ConfirmPasswordField.name,\n      validations: true,\n      fullWidth: true,\n      type: \"password\",\n      placeholder: fields.ConfirmPasswordField.placeholder,\n      name: fields.ConfirmPasswordField.name,\n      value: fields.ConfirmPasswordField.value,\n      onChange: value => {\n        textFieldChangeHandler(fields.ConfirmPasswordField.name, value);\n      },\n      validators: [\"required\"],\n      errorMessages: [\"Required\"],\n      className: classes.signupfields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), resetPasswordMessage ? React.createElement(\"span\", {\n      className: classes.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, resetPasswordMessage) : null, resetPasswordMessage === \"Password updated successfully\" ? React.createElement(NavLink, {\n      to: '/login',\n      className: classes.signupSubmitBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Login\") : React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      className: classes.signupSubmitBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Reset Password\")) : React.createElement(ValidatorForm, {\n      onSubmit: this.SubmitHandler,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(CustomTextValidator, {\n      id: fields.EmailField.name,\n      validations: true,\n      fullWidth: true,\n      type: \"text\",\n      placeholder: fields.EmailField.placeholder,\n      name: fields.EmailField.name,\n      value: fields.EmailField.value,\n      onChange: value => {\n        textFieldChangeHandler(fields.EmailField.name, value);\n      },\n      validators: [\"required\", \"matchRegexp:^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$\"],\n      errorMessages: [\"Required\", \"Please enter a valid email\"],\n      className: classes.signupfields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), error ? React.createElement(\"span\", {\n      className: classes.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, error) : null, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      className: classes.signupSubmitBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Send\")))));\n  }\n\n}\n\nexport default withStyles(styles)(ResetPasswordPage);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/Signup/ResetPassword/component.js"],"names":["React","Component","styles","withStyles","Button","Grid","ValidatorForm","CustomTextValidator","NavLink","ResetPasswordPage","state","resetToken","componentDidMount","token","window","location","search","replace","setState","SubmitHandler","props","submitResetFormHandler","submitNewPasswordHandler","render","classes","fields","textFieldChangeHandler","error","resetPasswordMessage","polygonbg","signupWrapper","signuptitle","signupsubtitle","PasswordField","name","placeholder","value","signupfields","ConfirmPasswordField","signupSubmitBtn","EmailField"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport CustomTextValidator from \"../../common/ReduxBased/CustomTextValidator/component\";\nimport { NavLink } from 'react-router-dom';\n\nclass ResetPasswordPage extends Component {\n\n    state = {\n        resetToken: \"\"\n    }\n\n    componentDidMount = () => {\n        let token = window.location.search.replace(\"?ResetToken=\",\"\")\n        this.setState({\n            resetToken: token\n        })\n    }\n\n    SubmitHandler = () => {\n        this.props.submitResetFormHandler();\n    }\n\n    submitNewPasswordHandler = () => {\n        this.props.submitNewPasswordHandler(this.state.resetToken);\n    }\n\n\n    render() {\n\n        const {\n            classes,\n            fields,\n            textFieldChangeHandler,\n            error,\n            resetPasswordMessage\n        } = this.props;\n\n        const {\n            resetToken\n        } = this.state;\n\n        return (\n                <div className={classes.polygonbg}>\n                <Grid container className={classes.signupWrapper}>\n\n                    <Grid item sm={4}>\n                        <h1 className={classes.signuptitle} >Reset Password</h1>\n                        <p className={classes.signupsubtitle} >\n                            {\n                                resetToken ? \"Enter your new password\" : \n                                \"Enter your email so we can send you a link to reset your password\"\n                            }\n                            </p>\n\n                        {\n                            resetToken ? <ValidatorForm\n                            onSubmit={this.submitNewPasswordHandler}\n                            autoComplete=\"off\"\n                            >\n    \n                                <CustomTextValidator\n                                id={fields.PasswordField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"password\"\n                                placeholder={fields.PasswordField.placeholder}\n                                name={fields.PasswordField.name}\n                                value={fields.PasswordField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.PasswordField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.signupfields}\n                                />\n\n                                <CustomTextValidator\n                                id={fields.ConfirmPasswordField.name}\n                                validations={true}\n                                fullWidth={true}\n                                type=\"password\"\n                                placeholder={fields.ConfirmPasswordField.placeholder}\n                                name={fields.ConfirmPasswordField.name}\n                                value={fields.ConfirmPasswordField.value}\n                                onChange={value => {\n                                    textFieldChangeHandler(\n                                        fields.ConfirmPasswordField.name,\n                                        value\n                                    );\n                                }}\n                                validators={[\"required\"]}\n                                errorMessages={[\"Required\"]}\n                                className={classes.signupfields}\n                                />\n    \n                                {\n                                    resetPasswordMessage ? <span className={classes.error}>{resetPasswordMessage}</span> : null\n                                }\n\n                                {\n                                    resetPasswordMessage  === \"Password updated successfully\" ? \n                                    <NavLink\n                                        to={'/login'}\n                                        className={classes.signupSubmitBtn}\n                                    >\n                                        Login\n                                    </NavLink> : \n                                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.signupSubmitBtn} >\n                                        Reset Password\n                                    </Button>\n                                }\n                                \n    \n                            </ValidatorForm> : \n\n                            <ValidatorForm\n                        onSubmit={this.SubmitHandler}\n                        autoComplete=\"off\"\n                        >\n\n                            <CustomTextValidator\n                            id={fields.EmailField.name}\n                            validations={true}\n                            fullWidth={true}\n                            type=\"text\"\n                            placeholder={fields.EmailField.placeholder}\n                            name={fields.EmailField.name}\n                            value={fields.EmailField.value}\n                            onChange={value => {\n                                textFieldChangeHandler(\n                                    fields.EmailField.name,\n                                    value\n                                );\n                            }}\n                            validators={[\n                                \"required\",\n                                \"matchRegexp:^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$\"\n                            ]}\n                            errorMessages={[\n                                \"Required\",\n                                \"Please enter a valid email\"\n                            ]}\n                            className={classes.signupfields}\n                            />\n\n                            {\n                                error ? <span className={classes.error}>{error}</span> : null\n                            }\n\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.signupSubmitBtn} >\n                                Send\n                            </Button>\n\n                        </ValidatorForm>\n                        }\n                        \n                    </Grid>\n                   \n                </Grid>\n                </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(ResetPasswordPage);"]},"metadata":{},"sourceType":"module"}