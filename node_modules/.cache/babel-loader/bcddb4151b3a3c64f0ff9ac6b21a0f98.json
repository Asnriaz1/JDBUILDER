{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{connect}from\"react-redux\";import SuggestedTemplates from\"./component\";import{saveUpdatedTemplates as _saveUpdatedTemplates,saveTemplateIdHandler as _saveTemplateIdHandler}from\"../../actions\";import instance,{BASE_URL}from\"../../../../api/config\";import{handleLoadingSpinnerClose,handleLoadingSpinnerOpenWithOptions}from\"../../../common/ReduxBased/LoadingSpinner/actions\";import ls from'local-storage';var mapStateToProps=function mapStateToProps(state){return{templates:state.JDLANDING.data.templatesData,templateJobId:state.JDLANDING.data.templateJobId,templateSpecId:state.JDLANDING.data.templateSpecId};};var mapDispatchToProps=function mapDispatchToProps(dispatch,props){return{saveUpdatedTemplates:function saveUpdatedTemplates(templateJobId,templateSpecId){ls.set('jobCode','');var savedJobId=ls.get('jobId');var savedSpecId=ls.get('specId');dispatch(handleLoadingSpinnerOpenWithOptions(true,\"Loading Templates...\",\"large\"));savedJobId=templateJobId?templateJobId:savedJobId;savedSpecId=templateSpecId?templateSpecId:savedSpecId;var paramVal=savedSpecId?'specId='+savedSpecId:'jobId='+savedJobId;instance.get(BASE_URL+'Templates?'+paramVal).then(function(res){dispatch(_saveUpdatedTemplates(res.data));dispatch(handleLoadingSpinnerClose());}).catch(function(error){dispatch(handleLoadingSpinnerClose());});},saveTemplateIdHandler:function saveTemplateIdHandler(value){ls.set('suggestedTempId',value);dispatch(_saveTemplateIdHandler(value));}};};var mergeProps=function mergeProps(stateProps,dispatchProps,ownProps){return _objectSpread({},stateProps,{},dispatchProps,{saveUpdatedTemplates:function saveUpdatedTemplates(){dispatchProps.saveUpdatedTemplates(stateProps.templateJobId,stateProps.templateSpecId);}},ownProps);};export default connect(mapStateToProps,mapDispatchToProps,mergeProps)(SuggestedTemplates);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Templates/Suggested/container.js"],"names":["connect","SuggestedTemplates","saveUpdatedTemplates","saveTemplateIdHandler","instance","BASE_URL","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","ls","mapStateToProps","state","templates","JDLANDING","data","templatesData","templateJobId","templateSpecId","mapDispatchToProps","dispatch","props","set","savedJobId","get","savedSpecId","paramVal","then","res","catch","error","value","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"2JAAA,OAASA,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,aAA/B,CACA,OACIC,oBAAoB,GAApBA,CAAAA,qBADJ,CAEIC,qBAAqB,GAArBA,CAAAA,sBAFJ,KAGO,eAHP,CAKA,MAAOC,CAAAA,QAAP,EAAmBC,QAAnB,KAAmC,wBAAnC,CACA,OACIC,yBADJ,CAEIC,mCAFJ,KAGO,mDAHP,CAIA,MAAOC,CAAAA,EAAP,KAAe,eAAf,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAC9BC,SAAS,CAAED,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBC,aADF,CAE9BC,aAAa,CAAEL,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBE,aAFN,CAG9BC,cAAc,CAAEN,KAAK,CAACE,SAAN,CAAgBC,IAAhB,CAAqBG,cAHP,CAAL,EAA7B,CAMA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAWC,KAAX,QAAsB,CAC7CjB,oBAAoB,CAAE,8BAACa,aAAD,CAAgBC,cAAhB,CAAmC,CACrDR,EAAE,CAACY,GAAH,CAAO,SAAP,CAAkB,EAAlB,EACA,GAAIC,CAAAA,UAAU,CAAGb,EAAE,CAACc,GAAH,CAAO,OAAP,CAAjB,CACA,GAAIC,CAAAA,WAAW,CAAGf,EAAE,CAACc,GAAH,CAAO,QAAP,CAAlB,CACAJ,QAAQ,CAACX,mCAAmC,CAAC,IAAD,CAAO,sBAAP,CAA+B,OAA/B,CAApC,CAAR,CAEAc,UAAU,CAAGN,aAAa,CAAGA,aAAH,CAAmBM,UAA7C,CACAE,WAAW,CAAGP,cAAc,CAAGA,cAAH,CAAoBO,WAAhD,CAEA,GAAIC,CAAAA,QAAQ,CAAGD,WAAW,CAAG,UAAUA,WAAb,CAA2B,SAASF,UAA9D,CAEAjB,QAAQ,CAACkB,GAAT,CAAajB,QAAQ,CAAC,YAAT,CAAsBmB,QAAnC,EACCC,IADD,CACM,SAAAC,GAAG,CAAI,CACTR,QAAQ,CAAChB,qBAAoB,CAACwB,GAAG,CAACb,IAAL,CAArB,CAAR,CACAK,QAAQ,CAACZ,yBAAyB,EAA1B,CAAR,CACH,CAJD,EAKCqB,KALD,CAKO,SAAAC,KAAK,CAAI,CACZV,QAAQ,CAACZ,yBAAyB,EAA1B,CAAR,CACH,CAPD,EAQH,CApB4C,CAqB7CH,qBAAqB,CAAE,+BAAC0B,KAAD,CAAW,CAC9BrB,EAAE,CAACY,GAAH,CAAO,iBAAP,CAA0BS,KAA1B,EACAX,QAAQ,CAACf,sBAAqB,CAAC0B,KAAD,CAAtB,CAAR,CACH,CAxB4C,CAAtB,EAA3B,CA2BA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,UAAD,CAAaC,aAAb,CAA4BC,QAA5B,0BACZF,UADY,IAEZC,aAFY,EAGf9B,oBAAoB,CAAE,+BAAM,CACxB8B,aAAa,CAAC9B,oBAAd,CAAmC6B,UAAU,CAAChB,aAA9C,CAA6DgB,UAAU,CAACf,cAAxE,EACH,CALc,EAMZiB,QANY,GAAnB,CASA,cAAejC,CAAAA,OAAO,CAClBS,eADkB,CAElBQ,kBAFkB,CAGlBa,UAHkB,CAAP,CAIb7B,kBAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport SuggestedTemplates from \"./component\";\nimport {\n    saveUpdatedTemplates,\n    saveTemplateIdHandler\n} from \"../../actions\";\n\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport ls from 'local-storage'\n\nconst mapStateToProps = state => ({\n    templates: state.JDLANDING.data.templatesData,\n    templateJobId: state.JDLANDING.data.templateJobId,\n    templateSpecId: state.JDLANDING.data.templateSpecId\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    saveUpdatedTemplates: (templateJobId, templateSpecId) => {\n        ls.set('jobCode', '');\n        let savedJobId = ls.get('jobId')\n        let savedSpecId = ls.get('specId')\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n\n        savedJobId = templateJobId ? templateJobId : savedJobId\n        savedSpecId = templateSpecId ? templateSpecId : savedSpecId\n\n        let paramVal = savedSpecId ? 'specId='+savedSpecId : 'jobId='+savedJobId\n        \n        instance.get(BASE_URL+'Templates?'+paramVal)\n        .then(res => {\n            dispatch(saveUpdatedTemplates(res.data));\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    },\n    saveTemplateIdHandler: (value) => {\n        ls.set('suggestedTempId', value);\n        dispatch(saveTemplateIdHandler(value));\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    saveUpdatedTemplates: () => {\n        dispatchProps.saveUpdatedTemplates(stateProps.templateJobId, stateProps.templateSpecId)\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(SuggestedTemplates);"]},"metadata":{},"sourceType":"module"}