{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{connect}from\"react-redux\";import JobOpeningMetaFields from\"./component\";import{textFieldChangeHandler as _textFieldChangeHandler,toggleAddRoleExpansionPanel as _toggleAddRoleExpansionPanel,toggleAddResExpansionPanel as _toggleAddResExpansionPanel,radioChangeHandler as _radioChangeHandler,switchChangeHandler as _switchChangeHandler,selectFieldChangeHandler as _selectFieldChangeHandler,rolesActiveHandler as _rolesActiveHandler,resActiveHandler as _resActiveHandler,saveUpdatedRolesResEditor as _saveUpdatedRolesResEditor,saveUpdatedRolesResAsHTML as _saveUpdatedRolesResAsHTML}from\"../actions\";import instance,{BASE_URL}from\"../../../../../api/config\";var mapStateToProps=function mapStateToProps(state){return{fields:state.JOBOPENING.forms.jobOpeningForm.fields,addRoleIsExpanded:state.JOBOPENING.UISettings.addRoleIsExpanded,addResIsExpanded:state.JOBOPENING.UISettings.addResIsExpanded,rolesData:state.JOBOPENING.data.rolesData,resData:state.JOBOPENING.data.resData,rawContentRolesRes:state.JOBOPENING.data.rawContentRolesRes,rolesResHTMLData:state.JOBOPENING.data.rolesResHTMLData};};var mapDispatchToProps=function mapDispatchToProps(dispatch,props){return{textFieldChangeHandler:function textFieldChangeHandler(name,e){if(typeof e.value!==\"string\"){e.value=\"\";}dispatch(_textFieldChangeHandler(name,e.value));},toggleAddRoleExpansionPanel:function toggleAddRoleExpansionPanel(val){dispatch(_toggleAddRoleExpansionPanel(val));},toggleAddResExpansionPanel:function toggleAddResExpansionPanel(val){dispatch(_toggleAddResExpansionPanel(val));},radioChangeHandler:function radioChangeHandler(e){dispatch(_radioChangeHandler(e.target.value));},switchChangeHandler:function switchChangeHandler(name,e){dispatch(_switchChangeHandler(name,e.target.checked));},selectFieldChangeHandler:function selectFieldChangeHandler(name,e){dispatch(_selectFieldChangeHandler(name,e));},rolesActiveHandler:function rolesActiveHandler(value){dispatch(_rolesActiveHandler(value));},resActiveHandler:function resActiveHandler(value){dispatch(_resActiveHandler(value));},fetchDataIfNeeded:function fetchDataIfNeeded(){instance.get('https://dev.specialisedjobs.com:5005/Templates?jobId=5fbe0370dfb2eef85a7b0a82').then(function(res){}).catch(function(error){});},saveUpdatedRolesResEditor:function saveUpdatedRolesResEditor(rawContent){dispatch(_saveUpdatedRolesResEditor(rawContent));},saveUpdatedRolesResAsHTML:function saveUpdatedRolesResAsHTML(content){dispatch(_saveUpdatedRolesResAsHTML(content));}};};var mergeProps=function mergeProps(stateProps,dispatchProps,ownProps){return _objectSpread({},stateProps,{},dispatchProps,{},ownProps);};export default connect(mapStateToProps,mapDispatchToProps,mergeProps)(JobOpeningMetaFields);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/MetaFields/container.js"],"names":["connect","JobOpeningMetaFields","textFieldChangeHandler","toggleAddRoleExpansionPanel","toggleAddResExpansionPanel","radioChangeHandler","switchChangeHandler","selectFieldChangeHandler","rolesActiveHandler","resActiveHandler","saveUpdatedRolesResEditor","saveUpdatedRolesResAsHTML","instance","BASE_URL","mapStateToProps","state","fields","JOBOPENING","forms","jobOpeningForm","addRoleIsExpanded","UISettings","addResIsExpanded","rolesData","data","resData","rawContentRolesRes","rolesResHTMLData","mapDispatchToProps","dispatch","props","name","e","value","val","target","checked","fetchDataIfNeeded","get","then","res","catch","error","rawContent","content","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\r\nimport JobOpeningMetaFields from \"./component\";\r\nimport {\r\n    textFieldChangeHandler,\r\n    toggleAddRoleExpansionPanel,\r\n    toggleAddResExpansionPanel,\r\n    radioChangeHandler,\r\n    switchChangeHandler,\r\n    selectFieldChangeHandler,\r\n    rolesActiveHandler,\r\n    resActiveHandler,\r\n    saveUpdatedRolesResEditor,\r\n    saveUpdatedRolesResAsHTML\r\n} from \"../actions\";\r\nimport instance, { BASE_URL } from \"../../../../../api/config\";\r\n\r\nconst mapStateToProps = state => ({\r\n    fields: state.JOBOPENING.forms.jobOpeningForm.fields,\r\n    addRoleIsExpanded: state.JOBOPENING.UISettings.addRoleIsExpanded,\r\n    addResIsExpanded: state.JOBOPENING.UISettings.addResIsExpanded,\r\n    rolesData: state.JOBOPENING.data.rolesData,\r\n    resData: state.JOBOPENING.data.resData,\r\n    rawContentRolesRes: state.JOBOPENING.data.rawContentRolesRes,\r\n    rolesResHTMLData: state.JOBOPENING.data.rolesResHTMLData\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, props) => ({\r\n    textFieldChangeHandler: (name, e) => {\r\n        if (typeof e.value !== \"string\") {\r\n            e.value = \"\";\r\n           \r\n        }\r\n        dispatch(textFieldChangeHandler(name, e.value));\r\n    },\r\n    toggleAddRoleExpansionPanel: (val) => {\r\n        dispatch(toggleAddRoleExpansionPanel(val));\r\n    },\r\n    toggleAddResExpansionPanel: (val) => {\r\n        dispatch(toggleAddResExpansionPanel(val));\r\n    },\r\n    radioChangeHandler: (e) => {\r\n        dispatch(radioChangeHandler(e.target.value));\r\n    },\r\n    switchChangeHandler: (name, e) => {\r\n        dispatch(switchChangeHandler(name, e.target.checked))\r\n    },\r\n    selectFieldChangeHandler: (name, e) => {\r\n        dispatch(selectFieldChangeHandler(name, e));\r\n    },\r\n    rolesActiveHandler: (value) => {\r\n        dispatch(rolesActiveHandler(value));\r\n    },\r\n    resActiveHandler: (value) => {\r\n        dispatch(resActiveHandler(value));\r\n    },\r\n    fetchDataIfNeeded: () => {\r\n        instance.get('https://dev.specialisedjobs.com:5005/Templates?jobId=5fbe0370dfb2eef85a7b0a82')\r\n        .then(res => {\r\n        })\r\n        .catch(error => {\r\n            \r\n        })\r\n    },\r\n    saveUpdatedRolesResEditor: (rawContent) => {\r\n        dispatch(saveUpdatedRolesResEditor(rawContent))\r\n    },\r\n    saveUpdatedRolesResAsHTML: (content) => {\r\n        dispatch(saveUpdatedRolesResAsHTML(content));\r\n    }\r\n})\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\r\n    ...stateProps,\r\n    ...dispatchProps,\r\n    ...ownProps,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(JobOpeningMetaFields);"]},"metadata":{},"sourceType":"module"}