{"ast":null,"code":"import { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport { connect } from \"react-redux\";\nimport JobSummary from \"./component\";\nimport { headerPathActiveHandler, pathChangeHandler } from \"../actions\";\nimport { submitTemplateHandler, fetchDataSummary, loginandSubmitTemplateHandler, showLoginPopupHandler } from \"./actions\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport ls from 'local-storage';\n\nconst mapStateToProps = state => ({\n  templateId: state.JDLANDING.data.templateId,\n  fields: state.LOGIN.forms.loginForm.fields,\n  login: state.JOBSUMMARY.UISettings.login,\n  selectedSkills: state.ADDITIONALINFO.data.skillsData,\n  selectedLanguages: state.ADDITIONALINFO.data.languagesData,\n  jobOpeningFields: state.JOBOPENING.forms.jobOpeningForm.fields,\n  rawContentSummaryAsHTML: state.JOBSUMMARY.data.rawContentSummaryAsHTML,\n  templateSpecId: state.JDLANDING.data.templateSpecId,\n  isLogin: state.LOGIN.UISetting.isLogin,\n  jobTitle: state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField.value,\n  industryField: state.JOBOPENING.forms.jobOpeningForm.fields.industryField.value,\n  functionField: state.JOBOPENING.forms.jobOpeningForm.fields.functionField.value,\n  employmenTypeField: state.JOBOPENING.forms.jobOpeningForm.fields.employmenTypeField.value,\n  minYearField: state.JOBOPENING.forms.jobOpeningForm.fields.minYearField.value,\n  maxYearField: state.JOBOPENING.forms.jobOpeningForm.fields.maxYearField.value,\n  positionField: state.JOBOPENING.forms.jobOpeningForm.fields.positionField.value,\n  AddressField: state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\n  QualificationField: state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n  remoteWorkingField: state.JOBOPENING.forms.jobOpeningForm.fields.remoteWorkingField.value,\n  showSalaryField: state.JOBOPENING.forms.jobOpeningForm.fields.showSalaryField.value,\n  salaryTypeField: state.JOBOPENING.forms.jobOpeningForm.fields.salaryTypeField.value,\n  hourlyMaxRateField: state.JOBOPENING.forms.jobOpeningForm.fields.hourlyMaxRateField.value,\n  monthlySalaryRangField: state.JOBOPENING.forms.jobOpeningForm.fields.monthlySalaryRangField.value,\n  monthlyCurrencyField: state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\n  yearlySalaryRangField: state.JOBOPENING.forms.jobOpeningForm.fields.yearlySalaryRangField.value,\n  yearlyCurrencyField: state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\n  rolesResHTMLData: state.JOBOPENING.data.rolesResHTMLData,\n  rolesData: state.JOBOPENING.data.rolesData,\n  resData: state.JOBOPENING.data.resData,\n  jobCodeField: state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField.value,\n  QualificationField: state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n  AddressField: state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\n  monthlyCurrencyField: state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\n  yearlyCurrencyField: state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\n  dataList: state.JOBSUMMARY.data.dataList,\n  activePath: state.JDBUILDING.data.activePath\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  submitbutton: (val, templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML) => {\n    debugger;\n    dispatch(headerPathActiveHandler(val));\n    dispatch(submitTemplateHandler(templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML));\n  },\n  headerPathActiveHandler: val => {\n    dispatch(headerPathActiveHandler(val));\n    dispatch(pathChangeHandler(\"/create/advertise\"));\n  },\n  submitTemplateHandler: (templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML) => {\n    dispatch(submitTemplateHandler(templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML));\n  },\n  loginandSubmitTemplateHandler: (EmailField, PasswordField, templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML) => {\n    let data = {\n      \"Email\": EmailField,\n      \"Password\": PasswordField,\n      \"FromJD\": true\n    };\n    dispatch(loginandSubmitTemplateHandler(data, templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML));\n  },\n  fetchDataSummary: templateId => {\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Summary...\", \"large\"));\n    let savedTempId = ls.get('suggestedTempId');\n    let paramVal = templateId ? templateId : savedTempId;\n    instance.get(BASE_URL + 'Templates?templateId=' + paramVal + '&sectionId=TS3').then(res => {\n      dispatch(fetchDataSummary(res.data));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  },\n  showLoginPopupHandler: value => {\n    dispatch(showLoginPopupHandler(value));\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  fetchDataSummary: () => {\n    dispatchProps.fetchDataSummary(stateProps.templateId);\n  },\n  loginandSubmitTemplateHandler: () => {\n    var experience = {\n      \"min_exp\": stateProps.minYearField,\n      \"max_exp\": stateProps.maxYearField\n    };\n    var rolesDataFilter = stateProps.rolesData.filter(item => {\n      return item.isActive == true;\n    }).map(item => item.id);\n    var resDataFilter = stateProps.resData.filter(item => {\n      return item.isActive == true;\n    }).map(item => item.id);\n    let salary_range = {\n      min_sal: null,\n      max_sal: null\n    };\n\n    if (stateProps.salaryTypeField === \"yearly\") {\n      let min_max = stateProps.yearlySalaryRangField[0].value.split('-');\n      salary_range.min_sal = parseInt(min_max[0]);\n      salary_range.max_sal = parseInt(min_max[1]);\n    } else if (stateProps.salaryTypeField === \"hourly\") {\n      let min_max = stateProps.hourlyMaxRateField[0].value.split('-');\n      salary_range.min_sal = parseInt(min_max[0]);\n      salary_range.max_sal = parseInt(min_max[1]);\n    } else if (stateProps.salaryTypeField === \"monthly\") {\n      let min_max = stateProps.monthlySalaryRangField[0].value.split('-');\n      salary_range.min_sal = parseInt(min_max[0]);\n      salary_range.max_sal = parseInt(min_max[1]);\n    }\n\n    let savedTempId = ls.get('suggestedTempId');\n    let paramVal = stateProps.templateId ? stateProps.templateId : savedTempId;\n\n    let _selected_skills = stateProps.selectedSkills ? stateProps.selectedSkills.map(item => {\n      return {\n        _id: item.id,\n        level: item.level,\n        importance: item.importance,\n        title: item.title\n      };\n    }) : [];\n\n    let _selected_languages = stateProps.selectedLanguages ? stateProps.selectedLanguages.map(item => {\n      return {\n        _id: item.id,\n        level: item.level,\n        importance: item.importance,\n        title: item.title\n      };\n    }) : [];\n\n    let data = {\n      job_code: stateProps.jobCodeField,\n      template_id: paramVal,\n      title: stateProps.jobTitle,\n      _selected_rr: {\n        htmlstring: stateProps.rolesResHTMLData,\n        rol: rolesDataFilter,\n        res: resDataFilter\n      },\n      salary_detail: {\n        sal_range: salary_range,\n        type: stateProps.salaryTypeField,\n        currency: 'Dollar',\n        visible: true\n      },\n      exp: experience,\n      _selected_industry: stateProps.industryField[0].id,\n      _selected_function: stateProps.functionField[0].id,\n      employment_type: stateProps.employmenTypeField[0].value,\n      positions: parseInt(stateProps.positionField),\n      remote_work: stateProps.remoteWorkingField,\n      qualification: stateProps.QualificationField[0].value,\n      address: stateProps.AddressField,\n      _selected_skills: _selected_skills,\n      _selected_languages: _selected_languages\n    };\n    dispatchProps.loginandSubmitTemplateHandler(stateProps.fields.EmailField.value, stateProps.fields.PasswordField.value, data);\n  },\n  submitTemplateHandler: () => {\n    let savedTempId = ls.get('suggestedTempId');\n    let paramVal = stateProps.templateId ? stateProps.templateId : savedTempId;\n    var selectedSummary = stateProps.dataList.filter(item => {\n      return item.isActive == true;\n    }).map(item => item.id);\n    let data = {\n      job_code: stateProps.jobCodeField,\n      template_id: paramVal,\n      title: stateProps.jobTitle,\n      _selected_summary: {\n        htmlstring: stateProps.rawContentSummaryAsHTML,\n        s_Id: selectedSummary\n      }\n    };\n    dispatchProps.submitTemplateHandler(data);\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(JobSummary);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/Summary/container.js"],"names":["handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","connect","JobSummary","headerPathActiveHandler","pathChangeHandler","submitTemplateHandler","fetchDataSummary","loginandSubmitTemplateHandler","showLoginPopupHandler","instance","BASE_URL","ls","mapStateToProps","state","templateId","JDLANDING","data","fields","LOGIN","forms","loginForm","login","JOBSUMMARY","UISettings","selectedSkills","ADDITIONALINFO","skillsData","selectedLanguages","languagesData","jobOpeningFields","JOBOPENING","jobOpeningForm","rawContentSummaryAsHTML","templateSpecId","isLogin","UISetting","jobTitle","jobTitleField","value","industryField","functionField","employmenTypeField","minYearField","maxYearField","positionField","AddressField","QualificationField","remoteWorkingField","showSalaryField","salaryTypeField","hourlyMaxRateField","monthlySalaryRangField","monthlyCurrencyField","yearlySalaryRangField","yearlyCurrencyField","rolesResHTMLData","rolesData","resData","jobCodeField","dataList","activePath","JDBUILDING","mapDispatchToProps","dispatch","props","submitbutton","val","JOindustryField","JOfunctionField","EmailField","PasswordField","savedTempId","get","paramVal","then","res","catch","error","mergeProps","stateProps","dispatchProps","ownProps","experience","rolesDataFilter","filter","item","isActive","map","id","resDataFilter","salary_range","min_sal","max_sal","min_max","split","parseInt","_selected_skills","_id","level","importance","title","_selected_languages","job_code","template_id","_selected_rr","htmlstring","rol","salary_detail","sal_range","type","currency","visible","exp","_selected_industry","_selected_function","employment_type","positions","remote_work","qualification","address","selectedSummary","_selected_summary","s_Id"],"mappings":"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","sourcesContent":["import {\r\n    handleLoadingSpinnerClose,\r\n    handleLoadingSpinnerOpenWithOptions\r\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport JobSummary from \"./component\";\r\nimport {\r\n    headerPathActiveHandler,\r\n    pathChangeHandler\r\n} from \"../actions\";\r\nimport {\r\n    submitTemplateHandler,\r\n    fetchDataSummary,\r\n    loginandSubmitTemplateHandler,\r\n    showLoginPopupHandler\r\n} from \"./actions\";\r\nimport instance, { BASE_URL } from \"../../../../api/config\";\r\nimport ls from 'local-storage'\r\n\r\nconst mapStateToProps = state => ({\r\n    templateId: state.JDLANDING.data.templateId,\r\n    fields: state.LOGIN.forms.loginForm.fields,\r\n    login: state.JOBSUMMARY.UISettings.login,\r\n    selectedSkills: state.ADDITIONALINFO.data.skillsData,\r\n    selectedLanguages: state.ADDITIONALINFO.data.languagesData,\r\n    jobOpeningFields: state.JOBOPENING.forms.jobOpeningForm.fields,\r\n    rawContentSummaryAsHTML: state.JOBSUMMARY.data.rawContentSummaryAsHTML,\r\n    templateSpecId: state.JDLANDING.data.templateSpecId,\r\n    isLogin: state.LOGIN.UISetting.isLogin,\r\n    jobTitle:state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField.value,\r\n    industryField:state.JOBOPENING.forms.jobOpeningForm.fields.industryField.value,\r\n    functionField:state.JOBOPENING.forms.jobOpeningForm.fields.functionField.value,\r\n    employmenTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.employmenTypeField.value,\r\n    minYearField:state.JOBOPENING.forms.jobOpeningForm.fields.minYearField.value,\r\n    maxYearField:state.JOBOPENING.forms.jobOpeningForm.fields.maxYearField.value,\r\n    positionField:state.JOBOPENING.forms.jobOpeningForm.fields.positionField.value,\r\n    AddressField:state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\r\n    QualificationField:state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\r\n    remoteWorkingField:state.JOBOPENING.forms.jobOpeningForm.fields.remoteWorkingField.value,\r\n    showSalaryField:state.JOBOPENING.forms.jobOpeningForm.fields.showSalaryField.value,\r\n    salaryTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.salaryTypeField.value,\r\n    hourlyMaxRateField:state.JOBOPENING.forms.jobOpeningForm.fields.hourlyMaxRateField.value,\r\n    monthlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlySalaryRangField.value,\r\n    monthlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\r\n    yearlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlySalaryRangField.value,\r\n    yearlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\r\n    rolesResHTMLData:state.JOBOPENING.data.rolesResHTMLData,\r\n    rolesData:state.JOBOPENING.data.rolesData,\r\n    resData:state.JOBOPENING.data.resData,\r\n    jobCodeField:state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField.value,\r\n    QualificationField:state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\r\n    AddressField:state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\r\n    monthlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\r\n    yearlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\r\n    dataList:state.JOBSUMMARY.data.dataList,\r\n    activePath:state.JDBUILDING.data.activePath,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, props) => ({\r\n\r\n    submitbutton :(val,templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML) =>{\r\n       debugger\r\n        dispatch(headerPathActiveHandler(val));\r\n        dispatch(submitTemplateHandler(templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML));\r\n\r\n    },\r\n    headerPathActiveHandler: (val) => {\r\n        dispatch(headerPathActiveHandler(val));\r\n        dispatch(pathChangeHandler(\"/create/advertise\"))\r\n    },\r\n    submitTemplateHandler: (templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML) => {\r\n        dispatch(submitTemplateHandler(templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML));\r\n    },\r\n\r\n\r\n    loginandSubmitTemplateHandler: (EmailField, PasswordField, templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML) => {\r\n        let data = {\r\n            \"Email\": EmailField,\r\n            \"Password\": PasswordField,\r\n            \"FromJD\": true\r\n    }\r\n        dispatch(loginandSubmitTemplateHandler(data, templateId, selectedSkills, selectedLanguages, JOindustryField, JOfunctionField, rolesResHTMLData, rawContentSummaryAsHTML));\r\n    },\r\n    fetchDataSummary: (templateId) => {\r\n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Summary...\", \"large\"));\r\n        let savedTempId = ls.get('suggestedTempId')\r\n        let paramVal = templateId ? templateId : savedTempId\r\n\r\n        instance.get(BASE_URL+'Templates?templateId='+paramVal+'&sectionId=TS3')\r\n        .then(res => {\r\n            dispatch(fetchDataSummary(res.data));\r\n            dispatch(handleLoadingSpinnerClose());\r\n        })\r\n        .catch(error => {\r\n            dispatch(handleLoadingSpinnerClose());\r\n        })\r\n    },\r\n    showLoginPopupHandler: (value) => {\r\n        dispatch(showLoginPopupHandler(value));\r\n    }\r\n})\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\r\n    ...stateProps,\r\n    ...dispatchProps,\r\n    fetchDataSummary: () => {\r\n        dispatchProps.fetchDataSummary(stateProps.templateId);\r\n    },\r\n    loginandSubmitTemplateHandler: () => {\r\n\r\n        \r\n        var experience = { \"min_exp\": stateProps.minYearField, \"max_exp\":  stateProps.maxYearField }\r\n        var rolesDataFilter =  stateProps.rolesData.filter((item) => {\r\n            return item.isActive == true\r\n        }).map(item => item.id)\r\n\r\n        var resDataFilter =  stateProps.resData.filter((item) => {\r\n            return item.isActive == true\r\n        }).map(item => item.id)\r\n        \r\n   \r\n\r\n\r\n        let salary_range = {\r\n            min_sal: null,\r\n            max_sal: null\r\n        };\r\n        if ( stateProps.salaryTypeField === \"yearly\") {\r\n          \r\n            let min_max =  stateProps.yearlySalaryRangField[0].value.split('-');\r\n            salary_range.min_sal = parseInt(min_max[0]);\r\n            salary_range.max_sal = parseInt(min_max[1]);\r\n\r\n        }\r\n        else if ( stateProps.salaryTypeField === \"hourly\") {\r\n            let min_max =  stateProps.hourlyMaxRateField[0].value.split('-');\r\n           salary_range.min_sal = parseInt(min_max[0]);\r\n            salary_range.max_sal = parseInt(min_max[1]);\r\n        }\r\n        else if ( stateProps.salaryTypeField === \"monthly\") {\r\n            \r\n            let min_max =  stateProps.monthlySalaryRangField[0].value.split('-');\r\n            salary_range.min_sal = parseInt(min_max[0]);\r\n            salary_range.max_sal = parseInt(min_max[1]);\r\n           \r\n        }\r\n        let savedTempId = ls.get('suggestedTempId')\r\n        let paramVal =  stateProps.templateId ?  stateProps.templateId : savedTempId\r\n\r\n        let _selected_skills = stateProps.selectedSkills ? stateProps.selectedSkills.map(item => {\r\n            return {\r\n                _id: item.id,\r\n                level: item.level,\r\n                importance: item.importance,\r\n                title: item.title\r\n            }\r\n        }) : []\r\n\r\n        let _selected_languages = stateProps.selectedLanguages ? stateProps.selectedLanguages.map(item => {\r\n            return {\r\n                _id: item.id,\r\n                level: item.level,\r\n                importance: item.importance,\r\n                title: item.title\r\n            }\r\n        }) : []\r\n        let data = {\r\n\r\n            job_code:  stateProps.jobCodeField,\r\n            template_id: paramVal,\r\n            title:  stateProps.jobTitle,\r\n            _selected_rr: {\r\n                htmlstring:  stateProps.rolesResHTMLData,\r\n                rol: rolesDataFilter,\r\n                res: resDataFilter\r\n            },\r\n            salary_detail: {\r\n                sal_range: salary_range,\r\n                type:  stateProps.salaryTypeField,\r\n                currency: 'Dollar',\r\n                visible: true\r\n            },\r\n            exp: experience,\r\n            _selected_industry:  stateProps.industryField[0].id,\r\n            _selected_function:  stateProps.functionField[0].id,\r\n            employment_type:  stateProps.employmenTypeField[0].value,\r\n            positions: parseInt( stateProps.positionField),\r\n            remote_work:  stateProps.remoteWorkingField,\r\n            qualification: stateProps.QualificationField[0].value,\r\n            address:  stateProps.AddressField,\r\n            _selected_skills: _selected_skills,\r\n           _selected_languages:_selected_languages,\r\n\r\n        } \r\n        dispatchProps.loginandSubmitTemplateHandler(stateProps.fields.EmailField.value, stateProps.fields.PasswordField.value,\r\n            data)\r\n                \r\n    },\r\n    submitTemplateHandler: () => {\r\n        let savedTempId = ls.get('suggestedTempId')\r\n        let paramVal =  stateProps.templateId ?  stateProps.templateId : savedTempId\r\n        var selectedSummary = stateProps.dataList.filter((item) => {\r\n            return item.isActive == true\r\n        }).map(item => item.id)\r\n\r\n       let data={\r\n        job_code:  stateProps.jobCodeField,\r\n        template_id: paramVal,\r\n        title: stateProps.jobTitle,\r\n        _selected_summary:{\r\n            htmlstring: stateProps.rawContentSummaryAsHTML,\r\n            s_Id:selectedSummary\r\n       },\r\n\r\n       }\r\n        dispatchProps.submitTemplateHandler(data)\r\n    },\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(JobSummary);\r\n"]},"metadata":{},"sourceType":"module"}