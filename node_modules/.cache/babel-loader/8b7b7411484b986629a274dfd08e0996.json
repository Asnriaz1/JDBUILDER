{"ast":null,"code":"import { connect } from \"react-redux\";\nimport JobOpeningMetaFields from \"./component\";\nimport { textFieldChangeHandler, toggleAddRoleExpansionPanel, toggleAddResExpansionPanel, radioChangeHandler, switchChangeHandler, selectFieldChangeHandler, rolesActiveHandler, resActiveHandler, saveUpdatedRolesResEditor, saveUpdatedRolesResAsHTML } from \"../actions\";\nimport instance, { BASE_URL } from \"../../../../../api/config\";\n\nconst mapStateToProps = state => ({\n  fields: state.JOBOPENING.forms.jobOpeningForm.fields,\n  addRoleIsExpanded: state.JOBOPENING.UISettings.addRoleIsExpanded,\n  addResIsExpanded: state.JOBOPENING.UISettings.addResIsExpanded,\n  rolesData: state.JOBOPENING.data.rolesData,\n  resData: state.JOBOPENING.data.resData,\n  rawContentRolesRes: state.JOBOPENING.data.rawContentRolesRes,\n  rolesResHTMLData: state.JOBOPENING.data.rolesResHTMLData\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  textFieldChangeHandler: (name, e) => {\n    if (typeof e.value !== \"string\") {\n      e.value = \"\";\n      console.log(value);\n    }\n\n    dispatch(textFieldChangeHandler(name, e.value));\n  },\n  toggleAddRoleExpansionPanel: val => {\n    dispatch(toggleAddRoleExpansionPanel(val));\n  },\n  toggleAddResExpansionPanel: val => {\n    dispatch(toggleAddResExpansionPanel(val));\n  },\n  radioChangeHandler: e => {\n    dispatch(radioChangeHandler(e.target.value));\n  },\n  switchChangeHandler: (name, e) => {\n    dispatch(switchChangeHandler(name, e.target.checked));\n  },\n  selectFieldChangeHandler: (name, e) => {\n    dispatch(selectFieldChangeHandler(name, e));\n  },\n  rolesActiveHandler: value => {\n    dispatch(rolesActiveHandler(value));\n  },\n  resActiveHandler: value => {\n    dispatch(resActiveHandler(value));\n  },\n  fetchDataIfNeeded: () => {\n    instance.get('https://dev.specialisedjobs.com:5005/Templates?jobId=5fbe0370dfb2eef85a7b0a82').then(res => {}).catch(error => {});\n  },\n  saveUpdatedRolesResEditor: rawContent => {\n    dispatch(saveUpdatedRolesResEditor(rawContent));\n  },\n  saveUpdatedRolesResAsHTML: content => {\n    dispatch(saveUpdatedRolesResAsHTML(content));\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(JobOpeningMetaFields);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/MetaFields/container.js"],"names":["connect","JobOpeningMetaFields","textFieldChangeHandler","toggleAddRoleExpansionPanel","toggleAddResExpansionPanel","radioChangeHandler","switchChangeHandler","selectFieldChangeHandler","rolesActiveHandler","resActiveHandler","saveUpdatedRolesResEditor","saveUpdatedRolesResAsHTML","instance","BASE_URL","mapStateToProps","state","fields","JOBOPENING","forms","jobOpeningForm","addRoleIsExpanded","UISettings","addResIsExpanded","rolesData","data","resData","rawContentRolesRes","rolesResHTMLData","mapDispatchToProps","dispatch","props","name","e","value","console","log","val","target","checked","fetchDataIfNeeded","get","then","res","catch","error","rawContent","content","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport JobOpeningMetaFields from \"./component\";\nimport {\n    textFieldChangeHandler,\n    toggleAddRoleExpansionPanel,\n    toggleAddResExpansionPanel,\n    radioChangeHandler,\n    switchChangeHandler,\n    selectFieldChangeHandler,\n    rolesActiveHandler,\n    resActiveHandler,\n    saveUpdatedRolesResEditor,\n    saveUpdatedRolesResAsHTML\n} from \"../actions\";\nimport instance, { BASE_URL } from \"../../../../../api/config\";\n\nconst mapStateToProps = state => ({\n    fields: state.JOBOPENING.forms.jobOpeningForm.fields,\n    addRoleIsExpanded: state.JOBOPENING.UISettings.addRoleIsExpanded,\n    addResIsExpanded: state.JOBOPENING.UISettings.addResIsExpanded,\n    rolesData: state.JOBOPENING.data.rolesData,\n    resData: state.JOBOPENING.data.resData,\n    rawContentRolesRes: state.JOBOPENING.data.rawContentRolesRes,\n    rolesResHTMLData: state.JOBOPENING.data.rolesResHTMLData\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    textFieldChangeHandler: (name, e) => {\n        if (typeof e.value !== \"string\") {\n            e.value = \"\";\n            console.log(value)\n        }\n        dispatch(textFieldChangeHandler(name, e.value));\n    },\n    toggleAddRoleExpansionPanel: (val) => {\n        dispatch(toggleAddRoleExpansionPanel(val));\n    },\n    toggleAddResExpansionPanel: (val) => {\n        dispatch(toggleAddResExpansionPanel(val));\n    },\n    radioChangeHandler: (e) => {\n        dispatch(radioChangeHandler(e.target.value));\n    },\n    switchChangeHandler: (name, e) => {\n        dispatch(switchChangeHandler(name, e.target.checked))\n    },\n    selectFieldChangeHandler: (name, e) => {\n        dispatch(selectFieldChangeHandler(name, e));\n    },\n    rolesActiveHandler: (value) => {\n        dispatch(rolesActiveHandler(value));\n    },\n    resActiveHandler: (value) => {\n        dispatch(resActiveHandler(value));\n    },\n    fetchDataIfNeeded: () => {\n        instance.get('https://dev.specialisedjobs.com:5005/Templates?jobId=5fbe0370dfb2eef85a7b0a82')\n        .then(res => {\n        })\n        .catch(error => {\n            \n        })\n    },\n    saveUpdatedRolesResEditor: (rawContent) => {\n        dispatch(saveUpdatedRolesResEditor(rawContent))\n    },\n    saveUpdatedRolesResAsHTML: (content) => {\n        dispatch(saveUpdatedRolesResAsHTML(content));\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(JobOpeningMetaFields);"]},"metadata":{},"sourceType":"module"}