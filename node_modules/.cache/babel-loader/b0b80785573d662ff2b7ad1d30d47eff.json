{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\JD\\\\JDBuilding\\\\JobOpening\\\\component.js\";\nimport React, { Component } from 'react';\nimport { styles } from \"./styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport JobOpeningMetaFields from \"./MetaFields/container\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport AlertDialog from \"../../../common/ReduxBased/confirmationDialog/container\";\nimport Login from \"../../../Login/container\";\nimport CollaboratorAndPreview from \"../CollaboratorAndPreview/container\";\nimport { getAppStoreValue } from \"../../../common/Helpers\";\nimport ls from 'local-storage';\n\nclass JobOpening extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      const userId = getAppStoreValue('user_id');\n      const userName = getAppStoreValue('nameTitle');\n      let isLogin = userId && userName ? true : false;\n\n      if (isLogin) {\n        this.props.getJobCode();\n      }\n\n      this.props.fetchDataSuggestedTemplate();\n    };\n\n    this.SubmitHandler = () => {\n      this.props.history.push('/create/info');\n      this.props.headerPathActiveHandler(0);\n    };\n\n    this.saveJobOpening = () => {\n      var experience = { ...this.props.minYearField,\n        ...this.props.maxYearField\n      };\n      var rolesDataFilter = this.props.rolesData.filter(item => {\n        return item.isActive == true;\n      }).map(item => item.id);\n      var resDataFilter = this.props.resData.filter(item => {\n        return item.isActive == true;\n      }).map(item => item.id);\n      let salary_range = {\n        min_sal: null,\n        max_sal: null\n      };\n\n      if (this.props.salaryTypeField === \"yearly\") {\n        let min_max = this.props.yearlySalaryRangField.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      } else if (this.props.salaryTypeField === \"hourly\") {\n        let min_max = this.props.hourlyMaxRateField.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      } else if (this.props.salaryTypeField === \"monthly\") {\n        let min_max = this.props.monthlySalaryRangField.split('-');\n        salary_range.min_sal = min_max[0];\n        salary_range.max_sal = min_max[1];\n      }\n\n      let data = {\n        job_code: this.props.jobCodeField,\n        template_id: this.templateId,\n        title: this.props.jobTitle,\n        _selected_rr: {\n          htmlstring: this.props.rolesResHTMLData,\n          rol: rolesDataFilter,\n          res: resDataFilter\n        },\n        salary_detail: {\n          sal_range: salary_range,\n          type: this.props.salaryTypeField,\n          currency: '',\n          visible: ''\n        },\n        exp: experience,\n        _selected_industry: this.props.industryField,\n        _selected_function: this.props.functionField,\n        employment_type: this.props.employmenTypeField,\n        positions: this.props.positionField,\n        remote_work: this.props.remoteWorkingField,\n        hourlyMaxRateField: this.props.hourlyMaxRateField,\n        monthlySalaryRangField: this.props.monthlySalaryRangField,\n        monthlyCurrencyField: this.props.monthlyCurrencyField,\n        yearlySalaryRangField: this.props.yearlySalaryRangField,\n        yearlyCurrencyField: this.props.yearlyCurrencyField\n      };\n      console.log(data); // axios.post(BASE_URL+'', data)\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      headerPathActiveHandler,\n      isLogin\n    } = this.props;\n    const userText = getAppStoreValue(\"userText\");\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.jobopeningwrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(CollaboratorAndPreview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.SubmitHandler // autoComplete=\"off\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(JobOpeningMetaFields, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), userText ? React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.saveJobOpening,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Save & Next\") : React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Next\"))));\n  }\n\n}\n\nexport default withStyles(styles)(withRouter(JobOpening));","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/component.js"],"names":["React","Component","styles","withStyles","Button","AddIcon","JobOpeningMetaFields","ValidatorForm","NavLink","withRouter","AlertDialog","Login","CollaboratorAndPreview","getAppStoreValue","ls","JobOpening","componentDidMount","userId","userName","isLogin","props","getJobCode","fetchDataSuggestedTemplate","SubmitHandler","history","push","headerPathActiveHandler","saveJobOpening","experience","minYearField","maxYearField","rolesDataFilter","rolesData","filter","item","isActive","map","id","resDataFilter","resData","salary_range","min_sal","max_sal","salaryTypeField","min_max","yearlySalaryRangField","split","hourlyMaxRateField","monthlySalaryRangField","data","job_code","jobCodeField","template_id","templateId","title","jobTitle","_selected_rr","htmlstring","rolesResHTMLData","rol","res","salary_detail","sal_range","type","currency","visible","exp","_selected_industry","industryField","_selected_function","functionField","employment_type","employmenTypeField","positions","positionField","remote_work","remoteWorkingField","monthlyCurrencyField","yearlyCurrencyField","console","log","render","classes","userText","jobopeningwrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { styles } from \"./styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport JobOpeningMetaFields from \"./MetaFields/container\";\r\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport AlertDialog from \"../../../common/ReduxBased/confirmationDialog/container\";\r\nimport Login from \"../../../Login/container\";\r\nimport CollaboratorAndPreview from \"../CollaboratorAndPreview/container\";\r\nimport { getAppStoreValue } from \"../../../common/Helpers\";\r\nimport ls from 'local-storage';\r\nclass JobOpening extends Component {\r\n\r\n    componentDidMount = () => {\r\n        const userId = getAppStoreValue('user_id');\r\n        const userName = getAppStoreValue('nameTitle')\r\n        let isLogin = userId && userName ? true : false\r\n        if (isLogin) {\r\n            this.props.getJobCode();\r\n        }\r\n        this.props.fetchDataSuggestedTemplate();\r\n    }\r\n\r\n    SubmitHandler = () => {\r\n        this.props.history.push('/create/info');\r\n        this.props.headerPathActiveHandler(0);\r\n    }\r\n\r\n\r\n\r\n    saveJobOpening =() =>{\r\n        \r\n\r\n        var experience = {...this.props.minYearField, ...this.props.maxYearField } \r\n\r\n        var rolesDataFilter = this.props.rolesData.filter((item)=>{\r\n            return item.isActive==true\r\n        }).map(item=>item.id)\r\n\r\n        var resDataFilter = this.props.resData.filter((item)=>{\r\n            return item.isActive==true\r\n        }).map(item=>item.id)\r\n\r\n        let salary_range = {\r\n            min_sal : null ,\r\n            max_sal: null\r\n        };\r\n        if(this.props.salaryTypeField===\"yearly\")\r\n        {\r\n            let min_max = this.props.yearlySalaryRangField.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n        }\r\n        else if(this.props.salaryTypeField===\"hourly\")\r\n        {\r\n            let min_max = this.props.hourlyMaxRateField.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n        }\r\n        else if (this.props.salaryTypeField===\"monthly\")\r\n        {\r\n            let min_max = this.props.monthlySalaryRangField.split('-');\r\n            salary_range.min_sal = min_max[0];\r\n            salary_range.max_sal = min_max[1];\r\n        }\r\n       \r\n        let data={\r\n\r\n            job_code:this.props.jobCodeField,\r\n            template_id:this.templateId,\r\n            title:this.props.jobTitle,\r\n            _selected_rr :{\r\n                htmlstring:this.props.rolesResHTMLData,\r\n                rol:rolesDataFilter,\r\n                res:resDataFilter\r\n            },\r\n            salary_detail:{\r\n                sal_range:salary_range,\r\n                type:this.props.salaryTypeField,\r\n                currency:'',\r\n                visible:''\r\n            },\r\n            exp:experience,\r\n            _selected_industry:this.props.industryField,\r\n            _selected_function:this.props.functionField,\r\n            employment_type:this.props.employmenTypeField,\r\n            positions:this.props.positionField,\r\n            remote_work:this.props.remoteWorkingField, \r\n\r\n\r\n       \r\n            hourlyMaxRateField:this.props.hourlyMaxRateField,\r\n            monthlySalaryRangField:this.props.monthlySalaryRangField,\r\n            monthlyCurrencyField:this.props.monthlyCurrencyField,\r\n            yearlySalaryRangField:this.props.yearlySalaryRangField,\r\n            yearlyCurrencyField:this.props.yearlyCurrencyField,\r\n\r\n            \r\n\r\n        }\r\n     \r\n    console.log(data)\r\n\r\n     \r\n        // axios.post(BASE_URL+'', data)\r\n    \r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            headerPathActiveHandler,\r\n            isLogin\r\n        } = this.props;\r\n        const userText = getAppStoreValue(\"userText\");\r\n\r\n        return (\r\n            <>\r\n                <div className={classes.jobopeningwrapper}>\r\n\r\n                    <CollaboratorAndPreview />\r\n\r\n                    <ValidatorForm\r\n                        onSubmit={this.SubmitHandler}\r\n                    // autoComplete=\"off\"\r\n                    >\r\n                        <JobOpeningMetaFields />\r\n\r\n                        {/* <NavLink\r\n                            to=\"/create/info\"\r\n                            className={classes.jdbuildingnextbtn}\r\n                            onClick={() => headerPathActiveHandler(0)}\r\n                        > */}\r\n                        {userText  ?\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.saveJobOpening}>\r\n                                Save & Next\r\n                            </Button>\r\n                            :\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Next\r\n                            </Button>\r\n                        }\r\n                        {/* </NavLink> */}\r\n                    </ValidatorForm>\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withRouter(JobOpening));"]},"metadata":{},"sourceType":"module"}