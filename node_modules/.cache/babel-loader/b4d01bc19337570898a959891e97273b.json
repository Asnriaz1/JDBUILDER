{"ast":null,"code":"import { connect } from \"react-redux\";\nimport JDHomeSearchForm from \"./component\";\nimport { selectFieldChangeHandler, saveUpdatedJobTitle, saveUpdatedJobSpec, saveUpdatedTemplateJobId, saveUpdatedTemplateSpecId, saveUpdatedTemplates } from \"../../actions\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport ls from 'local-storage';\n\nconst mapStateToProps = state => ({\n  fields: state.JDLANDING.forms.landingSearchForm.fields,\n  templateJobId: state.JDLANDING.data.templateJobId,\n  templateSpecId: state.JDLANDING.data.templateSpecId\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  selectFieldChangeHandler: (name, e) => {\n    dispatch(selectFieldChangeHandler(name, e));\n\n    if (name === \"lookingField\") {\n      dispatch(selectFieldChangeHandler(\"forField\", null));\n      dispatch(saveUpdatedJobSpec(e.spec));\n      dispatch(saveUpdatedTemplateJobId(e));\n      ls.set('jobId', e ? e.id : null);\n      ls.set('jobIdLabel', e ? e.label : null);\n      ls.set('specId', null);\n      ls.set('specIdLabel', null); //in case we only have job id\n\n      dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n      let paramVal = e.id;\n      instance.get(BASE_URL + 'Templates?jobId=' + paramVal).then(res => {\n        dispatch(saveUpdatedTemplates(res.data));\n        dispatch(handleLoadingSpinnerClose());\n      }).catch(error => {\n        dispatch(handleLoadingSpinnerClose());\n      });\n    }\n\n    if (name === \"forField\") {\n      dispatch(saveUpdatedTemplateSpecId(e ? e.id : null));\n      ls.set('specId', e ? e.id : null);\n      ls.set('specIdLabel', e ? e.label : null); //in case we sepecid\n\n      dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n\n      if (e) {\n        let paramVal = e.id;\n        instance.get(BASE_URL + 'Templates?specId=' + paramVal).then(res => {\n          dispatch(saveUpdatedTemplates(res.data));\n          dispatch(handleLoadingSpinnerClose());\n        }).catch(error => {\n          dispatch(handleLoadingSpinnerClose());\n        });\n      } else {\n        dispatch(handleLoadingSpinnerClose());\n      }\n    }\n  },\n  fetchDataIfNeeded: () => {\n    instance.get(BASE_URL + 'Landing').then(res => {\n      dispatch(saveUpdatedJobTitle(res.data));\n    }).catch(error => {});\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(JDHomeSearchForm);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/Templates/SearchForm/container.js"],"names":["connect","JDHomeSearchForm","selectFieldChangeHandler","saveUpdatedJobTitle","saveUpdatedJobSpec","saveUpdatedTemplateJobId","saveUpdatedTemplateSpecId","saveUpdatedTemplates","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","instance","BASE_URL","ls","mapStateToProps","state","fields","JDLANDING","forms","landingSearchForm","templateJobId","data","templateSpecId","mapDispatchToProps","dispatch","props","name","e","spec","set","id","label","paramVal","get","then","res","catch","error","fetchDataIfNeeded","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport JDHomeSearchForm from \"./component\";\nimport {\n    selectFieldChangeHandler,\n    saveUpdatedJobTitle,\n    saveUpdatedJobSpec,\n    saveUpdatedTemplateJobId,\n    saveUpdatedTemplateSpecId,\n    saveUpdatedTemplates\n} from \"../../actions\";\n\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\n\nimport instance, { BASE_URL } from \"../../../../api/config\";\nimport ls from 'local-storage'\n\nconst mapStateToProps = state => ({\n    fields: state.JDLANDING.forms.landingSearchForm.fields,\n    templateJobId: state.JDLANDING.data.templateJobId,\n    templateSpecId: state.JDLANDING.data.templateSpecId,\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    selectFieldChangeHandler: (name, e) => {\n        dispatch(selectFieldChangeHandler(name, e));\n        if(name === \"lookingField\") {\n            dispatch(selectFieldChangeHandler(\"forField\", null));\n            dispatch(saveUpdatedJobSpec(e.spec));\n            dispatch(saveUpdatedTemplateJobId(e));\n            ls.set('jobId', e ? e.id : null);\n            ls.set('jobIdLabel', e ? e.label : null);\n\n            ls.set('specId', null);\n            ls.set('specIdLabel', null);\n            //in case we only have job id\n            dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n\n            let paramVal = e.id\n\n            instance.get(BASE_URL+'Templates?jobId='+paramVal)\n            .then(res => {\n                dispatch(saveUpdatedTemplates(res.data));\n                dispatch(handleLoadingSpinnerClose());\n            })\n            .catch(error => {\n                dispatch(handleLoadingSpinnerClose());\n            })\n        }\n        if(name === \"forField\") {\n            dispatch(saveUpdatedTemplateSpecId(e ? e.id : null));\n            ls.set('specId', e ? e.id : null);\n            ls.set('specIdLabel', e ? e.label : null);\n            \n            //in case we sepecid\n            dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading Templates...\", \"large\"));\n\n            if(e) {\n                let paramVal = e.id\n\n                instance.get(BASE_URL+'Templates?specId='+paramVal)\n                .then(res => {\n                    dispatch(saveUpdatedTemplates(res.data));\n                    dispatch(handleLoadingSpinnerClose());\n                })\n                .catch(error => {\n                    dispatch(handleLoadingSpinnerClose());\n                })\n            }else {\n                dispatch(handleLoadingSpinnerClose());\n            }\n        }\n    },\n    fetchDataIfNeeded: () => {\n        instance.get(BASE_URL+'Landing')\n        .then(res => {\n            dispatch(saveUpdatedJobTitle(res.data));\n        })\n        .catch(error => {\n            \n        })\n    },\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(JDHomeSearchForm);"]},"metadata":{},"sourceType":"module"}