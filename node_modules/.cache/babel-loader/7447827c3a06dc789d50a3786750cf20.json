{"ast":null,"code":"import { connect } from \"react-redux\";\nimport AddCollaboration from \"./component\";\nimport { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../../common/ReduxBased/LoadingSpinner/actions\";\nimport { textFieldChangeHandler, saveAddedCollaborators } from \"../actions\";\nimport ls from 'local-storage';\nimport instance, { BASE_URL_COL } from \"../../../../../api/config\";\n\nconst mapStateToProps = state => ({\n  fields: state.ADD_COLLABORATOR.forms.addCollaboratorForm.fields,\n  EmailField: state.ADD_COLLABORATOR.forms.addCollaboratorForm.fields.EmailField,\n  NameField: state.ADD_COLLABORATOR.forms.addCollaboratorForm.fields.NameField,\n  addedCollaborator: state.ADD_COLLABORATOR.data.addedCollaborator,\n  jobCode: state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField,\n  jobTitle: state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField\n});\n\nconsole.log(fields);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  textFieldChangeHandler: (name, e) => {\n    if (typeof e.value !== \"string\") {\n      e.value = \"\";\n    }\n\n    dispatch(textFieldChangeHandler(name, e));\n  },\n  sendCollaboration: () => {\n    // dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Invite...\", \"large\"));\n    debugger;\n    let data = {\n      Collab_email: \"ahsanriaz16@gmail.com\",\n      Collab_Name: \"Ahsan\",\n      Job_Title: \"Intermediate Node.Js Developer\",\n      Job_Code: \"JDB1569\"\n    };\n    console.log(data);\n    debugger;\n    instance.post(BASE_URL_COL + 'User/SendCollabInvite', data).then(res => {\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  addCollaboratorHandler: () => {\n    dispatchProps.addCollaboratorHandler(stateProps.fields.EmailField.value, stateProps.fields.NameField.value);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(AddCollaboration);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/CollaboratorAndPreview/AddCollaboration/container.js"],"names":["connect","AddCollaboration","handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","textFieldChangeHandler","saveAddedCollaborators","ls","instance","BASE_URL_COL","mapStateToProps","state","fields","ADD_COLLABORATOR","forms","addCollaboratorForm","EmailField","NameField","addedCollaborator","data","jobCode","JOBOPENING","jobOpeningForm","jobCodeField","jobTitle","jobTitleField","console","log","mapDispatchToProps","dispatch","props","name","e","value","sendCollaboration","Collab_email","Collab_Name","Job_Title","Job_Code","post","then","res","catch","error","mergeProps","stateProps","dispatchProps","ownProps","addCollaboratorHandler"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,gBAAP,MAA6B,aAA7B;AACA,SACIC,yBADJ,EAEIC,mCAFJ,QAGO,sDAHP;AAIA,SACIC,sBADJ,EAEIC,sBAFJ,QAGO,YAHP;AAIA,OAAOC,EAAP,MAAe,eAAf;AACA,OAAOC,QAAP,IAAmBC,YAAnB,QAAuC,2BAAvC;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,MAAM,EAAED,KAAK,CAACE,gBAAN,CAAuBC,KAAvB,CAA6BC,mBAA7B,CAAiDH,MAD3B;AAE9BI,EAAAA,UAAU,EAAEL,KAAK,CAACE,gBAAN,CAAuBC,KAAvB,CAA6BC,mBAA7B,CAAiDH,MAAjD,CAAwDI,UAFtC;AAG9BC,EAAAA,SAAS,EAAEN,KAAK,CAACE,gBAAN,CAAuBC,KAAvB,CAA6BC,mBAA7B,CAAiDH,MAAjD,CAAwDK,SAHrC;AAI9BC,EAAAA,iBAAiB,EAAEP,KAAK,CAACE,gBAAN,CAAuBM,IAAvB,CAA4BD,iBAJjB;AAK9BE,EAAAA,OAAO,EAAET,KAAK,CAACU,UAAN,CAAiBP,KAAjB,CAAuBQ,cAAvB,CAAsCV,MAAtC,CAA6CW,YALxB;AAM9BC,EAAAA,QAAQ,EAACb,KAAK,CAACU,UAAN,CAAiBP,KAAjB,CAAuBQ,cAAvB,CAAsCV,MAAtC,CAA6Ca;AANxB,CAAL,CAA7B;;AASAC,OAAO,CAACC,GAAR,CAAYf,MAAZ;;AAEA,MAAMgB,kBAAkB,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AAC7CzB,EAAAA,sBAAsB,EAAE,CAAC0B,IAAD,EAAOC,CAAP,KAAa;AACjC,QAAI,OAAOA,CAAC,CAACC,KAAT,KAAmB,QAAvB,EAAiC;AAC7BD,MAAAA,CAAC,CAACC,KAAF,GAAU,EAAV;AACH;;AACDJ,IAAAA,QAAQ,CAACxB,sBAAsB,CAAC0B,IAAD,EAAOC,CAAP,CAAvB,CAAR;AACH,GAN4C;AAO7CE,EAAAA,iBAAiB,EAAE,MAAM;AACrB;AACA;AACA,QAAIf,IAAI,GAAG;AACPgB,MAAAA,YAAY,EAAE,uBADP;AAEPC,MAAAA,WAAW,EAAE,OAFN;AAGPC,MAAAA,SAAS,EAAE,gCAHJ;AAIPC,MAAAA,QAAQ,EAAE;AAJH,KAAX;AAMAZ,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA;AAEAX,IAAAA,QAAQ,CAAC+B,IAAT,CAAc9B,YAAY,GAAC,uBAA3B,EAAoDU,IAApD,EACCqB,IADD,CACMC,GAAG,IAAI;AACTZ,MAAAA,QAAQ,CAAC1B,yBAAyB,EAA1B,CAAR;AACH,KAHD,EAICuC,KAJD,CAIOC,KAAK,IAAI;AACZd,MAAAA,QAAQ,CAAC1B,yBAAyB,EAA1B,CAAR;AACH,KAND;AAOH;AA1B4C,CAAtB,CAA3B;;AA8BA,MAAMyC,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,MAA0C,EACzD,GAAGF,UADsD;AAEzD,KAAGC,aAFsD;AAGzDE,EAAAA,sBAAsB,EAAE,MAAM;AAC1BF,IAAAA,aAAa,CAACE,sBAAd,CAAqCH,UAAU,CAACjC,MAAX,CAAkBI,UAAlB,CAA6BiB,KAAlE,EAAyEY,UAAU,CAACjC,MAAX,CAAkBK,SAAlB,CAA4BgB,KAArG;AACH,GALwD;AAMzD,KAAGc;AANsD,CAA1C,CAAnB;;AASA,eAAe9C,OAAO,CAClBS,eADkB,EAElBkB,kBAFkB,EAGlBgB,UAHkB,CAAP,CAIb1C,gBAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport AddCollaboration from \"./component\";\nimport {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../../common/ReduxBased/LoadingSpinner/actions\";\nimport {\n    textFieldChangeHandler,\n    saveAddedCollaborators\n} from \"../actions\";\nimport ls from 'local-storage';\nimport instance, { BASE_URL_COL } from \"../../../../../api/config\";\nconst mapStateToProps = state => ({\n    fields: state.ADD_COLLABORATOR.forms.addCollaboratorForm.fields,\n    EmailField: state.ADD_COLLABORATOR.forms.addCollaboratorForm.fields.EmailField,\n    NameField: state.ADD_COLLABORATOR.forms.addCollaboratorForm.fields.NameField,\n    addedCollaborator: state.ADD_COLLABORATOR.data.addedCollaborator,\n    jobCode :state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField,\n    jobTitle:state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField,\n\n})\nconsole.log(fields)\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    textFieldChangeHandler: (name, e) => {\n        if (typeof e.value !== \"string\") {\n            e.value = \"\";\n        }\n        dispatch(textFieldChangeHandler(name, e));\n    },\n    sendCollaboration: () => {\n        // dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Sending Invite...\", \"large\"));\n        debugger\n        let data = {\n            Collab_email: \"ahsanriaz16@gmail.com\",\n            Collab_Name: \"Ahsan\",\n            Job_Title: \"Intermediate Node.Js Developer\",\n            Job_Code: \"JDB1569\",\n        }\n        console.log(data)\n        debugger\n       \n        instance.post(BASE_URL_COL+'User/SendCollabInvite', data)\n        .then(res => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    }\n\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    addCollaboratorHandler: () => {\n        dispatchProps.addCollaboratorHandler(stateProps.fields.EmailField.value, stateProps.fields.NameField.value)\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(AddCollaboration);"]},"metadata":{},"sourceType":"module"}