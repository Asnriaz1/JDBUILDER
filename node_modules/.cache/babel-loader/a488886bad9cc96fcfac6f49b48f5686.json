{"ast":null,"code":"import { handleLoadingSpinnerClose, handleLoadingSpinnerOpenWithOptions } from \"../../../common/ReduxBased/LoadingSpinner/actions\";\nimport { connect } from \"react-redux\";\nimport JobOpening from \"./component\";\nimport { headerPathActiveHandler, pathChangeHandler } from \"../actions\";\nimport { fetchDataSuggestedTemplate, textFieldChangeHandler } from \"./actions\";\nimport ls from 'local-storage';\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\n\nconst mapStateToProps = state => ({\n  // templateSpecId: state.JDLANDING.data.templateSpecId,\n  // templateId: state.JDLANDING.data.templateId,\n  isLogin: state.LOGIN.UISetting.isLogin // templateId: state.JDLANDING.data.templateId,\n  // jobTitle:state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField.value,\n  // industryField:state.JOBOPENING.forms.jobOpeningForm.fields.industryField.value,\n  // functionField:state.JOBOPENING.forms.jobOpeningForm.fields.functionField.value,\n  // employmenTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.employmenTypeField.value,\n  // minYearField:state.JOBOPENING.forms.jobOpeningForm.fields.minYearField.value,\n  // maxYearField:state.JOBOPENING.forms.jobOpeningForm.fields.maxYearField.value,\n  // positionField:state.JOBOPENING.forms.jobOpeningForm.fields.positionField.value,\n  // AddressField:state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\n  // QualificationField:state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n  // remoteWorkingField:state.JOBOPENING.forms.jobOpeningForm.fields.remoteWorkingField.value,\n  // showSalaryField:state.JOBOPENING.forms.jobOpeningForm.fields.showSalaryField.value,\n  // salaryTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.salaryTypeField.value,\n  // hourlyMaxRateField:state.JOBOPENING.forms.jobOpeningForm.fields.hourlyMaxRateField.value,\n  // monthlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlySalaryRangField.value,\n  // monthlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\n  // yearlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlySalaryRangField.value,\n  // yearlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\n  // rolesResHTMLData:state.JOBOPENING.data.rolesResHTMLData,\n  // rolesData:state.JOBOPENING.data.rolesData,\n  // resData:state.JOBOPENING.data.resData,\n  // jobCodeField:state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField.value,\n\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  headerPathActiveHandler: val => {\n    dispatch(headerPathActiveHandler(val));\n    dispatch(pathChangeHandler(\"/create/info\"));\n  },\n  fetchDataSuggestedTemplate: templateId => {\n    dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading...\", \"large\"));\n    let savedTempId = ls.get('suggestedTempId');\n    let paramVal = templateId ? templateId : savedTempId;\n    instance.get(BASE_URL + 'Templates?templateId=' + paramVal).then(res => {\n      dispatch(fetchDataSuggestedTemplate(res.data));\n      dispatch(handleLoadingSpinnerClose());\n    }).catch(error => {\n      dispatch(handleLoadingSpinnerClose());\n    });\n  },\n  getJobCode: () => {\n    if (ls.get('jobCode')) {\n      dispatch(textFieldChangeHandler('jobCodeField', ls.get('jobCode')));\n    } else {\n      instance.get(BASE_URL_SQL + 'GetJobCode').then(res => {\n        ls.set('jobCode', res.data);\n        dispatch(textFieldChangeHandler('jobCodeField', res.data));\n      }).catch(error => {});\n    }\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({ ...stateProps,\n  ...dispatchProps,\n  fetchDataSuggestedTemplate: () => {\n    dispatchProps.fetchDataSuggestedTemplate(stateProps.templateId);\n  },\n  ...ownProps\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(JobOpening);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/JD/JDBuilding/JobOpening/container.js"],"names":["handleLoadingSpinnerClose","handleLoadingSpinnerOpenWithOptions","connect","JobOpening","headerPathActiveHandler","pathChangeHandler","fetchDataSuggestedTemplate","textFieldChangeHandler","ls","instance","BASE_URL","BASE_URL_SQL","mapStateToProps","state","isLogin","LOGIN","UISetting","mapDispatchToProps","dispatch","props","val","templateId","savedTempId","get","paramVal","then","res","data","catch","error","getJobCode","set","mergeProps","stateProps","dispatchProps","ownProps"],"mappings":"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","sourcesContent":["import {\n    handleLoadingSpinnerClose,\n    handleLoadingSpinnerOpenWithOptions\n} from \"../../../common/ReduxBased/LoadingSpinner/actions\";\n\nimport { connect } from \"react-redux\";\nimport JobOpening from \"./component\";\nimport {\n    headerPathActiveHandler,\n    pathChangeHandler,\n} from \"../actions\";\nimport {\n    fetchDataSuggestedTemplate,\n    textFieldChangeHandler\n} from \"./actions\";\nimport ls from 'local-storage'\n\nimport instance, { BASE_URL, BASE_URL_SQL } from \"../../../../api/config\";\n\nconst mapStateToProps = state => ({\n    // templateSpecId: state.JDLANDING.data.templateSpecId,\n    // templateId: state.JDLANDING.data.templateId,\n    isLogin: state.LOGIN.UISetting.isLogin,\n    // templateId: state.JDLANDING.data.templateId,\n    // jobTitle:state.JOBOPENING.forms.jobOpeningForm.fields.jobTitleField.value,\n    // industryField:state.JOBOPENING.forms.jobOpeningForm.fields.industryField.value,\n    // functionField:state.JOBOPENING.forms.jobOpeningForm.fields.functionField.value,\n    // employmenTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.employmenTypeField.value,\n    // minYearField:state.JOBOPENING.forms.jobOpeningForm.fields.minYearField.value,\n    // maxYearField:state.JOBOPENING.forms.jobOpeningForm.fields.maxYearField.value,\n    // positionField:state.JOBOPENING.forms.jobOpeningForm.fields.positionField.value,\n    // AddressField:state.JOBOPENING.forms.jobOpeningForm.fields.AddressField.value,\n    // QualificationField:state.JOBOPENING.forms.jobOpeningForm.fields.QualificationField.value,\n    // remoteWorkingField:state.JOBOPENING.forms.jobOpeningForm.fields.remoteWorkingField.value,\n    // showSalaryField:state.JOBOPENING.forms.jobOpeningForm.fields.showSalaryField.value,\n    // salaryTypeField:state.JOBOPENING.forms.jobOpeningForm.fields.salaryTypeField.value,\n    // hourlyMaxRateField:state.JOBOPENING.forms.jobOpeningForm.fields.hourlyMaxRateField.value,\n    // monthlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlySalaryRangField.value,\n    // monthlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.monthlyCurrencyField.value,\n    // yearlySalaryRangField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlySalaryRangField.value,\n    // yearlyCurrencyField:state.JOBOPENING.forms.jobOpeningForm.fields.yearlyCurrencyField.value,\n    // rolesResHTMLData:state.JOBOPENING.data.rolesResHTMLData,\n    // rolesData:state.JOBOPENING.data.rolesData,\n    // resData:state.JOBOPENING.data.resData,\n    // jobCodeField:state.JOBOPENING.forms.jobOpeningForm.fields.jobCodeField.value,\n\n})\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    headerPathActiveHandler: (val) => {\n        dispatch(headerPathActiveHandler(val));\n        dispatch(pathChangeHandler(\"/create/info\"))\n    },\n    fetchDataSuggestedTemplate: (templateId) => {\n        \n        dispatch(handleLoadingSpinnerOpenWithOptions(true, \"Loading...\", \"large\"));\n        let savedTempId = ls.get('suggestedTempId')\n        let paramVal = templateId ? templateId : savedTempId\n\n        instance.get(BASE_URL+'Templates?templateId='+paramVal)\n        .then(res => {\n            dispatch(fetchDataSuggestedTemplate(res.data));\n            dispatch(handleLoadingSpinnerClose());\n        })\n        .catch(error => {\n            dispatch(handleLoadingSpinnerClose());\n        })\n    },\n    getJobCode: () => {\n        if(ls.get('jobCode')) {\n            dispatch(textFieldChangeHandler('jobCodeField', ls.get('jobCode')))\n        }\n        else {\n            instance.get(BASE_URL_SQL+'GetJobCode')\n            .then(res => {\n                ls.set('jobCode', res.data);\n                dispatch(textFieldChangeHandler('jobCodeField', res.data))\n            })\n            .catch(error => {\n            })\n        }\n    }\n})\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    fetchDataSuggestedTemplate: () => {\n        dispatchProps.fetchDataSuggestedTemplate(stateProps.templateId);\n    },\n    ...ownProps,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(JobOpening);"]},"metadata":{},"sourceType":"module"}