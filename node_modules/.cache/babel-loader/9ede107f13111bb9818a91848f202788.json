{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan Riaz\\\\Desktop\\\\frontend-master (new)\\\\frontend-master\\\\src\\\\components\\\\common\\\\ReduxBased\\\\confirmationDialog\\\\component.js\";\nimport React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { styles } from \"./styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Prompt, Redirect } from \"react-router-dom\";\n\nclass AlertDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.show = allowTransitionCallback => {\n      // we are immediately preventing any transitions here\n      // but could just as easily base this off a user interaction\n      // or other state\n      this.setState({\n        open: true\n      }, () => allowTransitionCallback(false));\n      this.props.showAlertDialogWithOptions(\"There is unsaved data on the form, if you navigate, data will be lost. Are you sure you want to continue?\", true, null, \"warning\");\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleTransition = location => {\n      // example: allow transitions to /two\n      // if (location.pathname === \"/addPermanentPatient/camera\" || location.pathname === \"/addPermanentPatient\") {\n      // \treturn true;\n      // }\n      if (!!this.props.allowedURIs) {\n        if (this.props.allowedURIs.indexOf(location.pathname) !== -1) {\n          return true;\n        }\n      }\n\n      this.props.allowRedirectTo(location);\n      return Symbol.keyFor(this.__trigger);\n    };\n\n    this.__trigger = Symbol.for(`__PreventTransitionPrompt_${Date.now()}`);\n  }\n\n  componentDidMount() {\n    window[this.__trigger] = this.show;\n  }\n\n  componentWillUnmount() {\n    delete window[this.__trigger];\n  }\n\n  render() {\n    const {\n      classes,\n      open,\n      showTitle,\n      title,\n      message,\n      cancelButtonText,\n      applyButtonText,\n      isChanged,\n      redirect,\n      closeAlertDialog,\n      cancelAlertDialog,\n      applyAlertDialog,\n      maxWidth,\n      customClass,\n      hideApplyButton,\n      hideCancelButton,\n      disableBackdropClick\n    } = this.props;\n    return React.createElement(React.Fragment, null, React.createElement(Prompt, {\n      when: isChanged,\n      message: this.handleTransition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), !!redirect && !!redirect.status && redirect.status === true ? React.createElement(Redirect, {\n      to: redirect.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }) : React.createElement(Dialog, {\n      open: open,\n      keepMounted: true,\n      disableBackdropClick: disableBackdropClick || true,\n      onClose: () => {},\n      \"aria-labelledby\": \"alert-dialog-slide-title\",\n      \"aria-describedby\": \"alert-dialog-slide-description\",\n      maxWidth: maxWidth,\n      fullWidth: true,\n      PaperProps: {\n        square: true,\n        elevation: 24\n      },\n      className: `${classes.confirmationDialog} ${!!customClass ? customClass : ''}` // scroll={'body'}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, showTitle ? React.createElement(DialogTitle, {\n      id: 'dialogtitle',\n      disableTypography: true,\n      classes: {\n        root: classes.dialogTitle\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, title) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(DialogContent, {\n      id: 'dialogcontent',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      id: 'dialogcontenttext',\n      component: \"div\",\n      className: classes.contentText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, message)))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, !!cancelButtonText && !hideCancelButton && React.createElement(Button, {\n      onClick: cancelAlertDialog,\n      color: this.props.cancelButtonColor || \"secondary\",\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, cancelButtonText), !!applyButtonText && !hideApplyButton && React.createElement(Button, {\n      onClick: applyAlertDialog,\n      color: this.props.applyButtonColor || \"primary\",\n      variant: \"contained\",\n      styles: {\n        fontFamily: \"inherit\"\n      },\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, applyButtonText))));\n  }\n  /**\n   * Show the dialog. Invoked primarily from React Router transition\n   * handler getUserConfirmation.\n   *\n   * @param allowTransitionCallback A function that accepts a flag whether or not to allow the route transition\n   */\n\n\n}\n\nAlertDialog.propTypes = {};\nexport default withStyles(styles)(AlertDialog);","map":{"version":3,"sources":["C:/Users/Ahsan Riaz/Desktop/frontend-master (new)/frontend-master/src/components/common/ReduxBased/confirmationDialog/component.js"],"names":["React","Component","withStyles","styles","Button","Dialog","DialogContent","DialogTitle","DialogContentText","DialogActions","Grid","Prompt","Redirect","AlertDialog","constructor","props","show","allowTransitionCallback","setState","open","showAlertDialogWithOptions","handleClose","handleTransition","location","allowedURIs","indexOf","pathname","allowRedirectTo","Symbol","keyFor","__trigger","for","Date","now","componentDidMount","window","componentWillUnmount","render","classes","showTitle","title","message","cancelButtonText","applyButtonText","isChanged","redirect","closeAlertDialog","cancelAlertDialog","applyAlertDialog","maxWidth","customClass","hideApplyButton","hideCancelButton","disableBackdropClick","status","path","square","elevation","confirmationDialog","root","dialogTitle","contentText","cancelButtonColor","applyButtonColor","fontFamily","propTypes"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport {styles} from \"./styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {Prompt, Redirect} from \"react-router-dom\";\n\nclass AlertDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.__trigger = Symbol.for(`__PreventTransitionPrompt_${Date.now()}`);\n    }\n\n    componentDidMount() {\n        window[this.__trigger] = this.show;\n    }\n\n    componentWillUnmount() {\n        delete window[this.__trigger];\n    }\n\n    render() {\n        const {\n            classes,\n            open,\n            showTitle,\n            title,\n            message,\n            cancelButtonText,\n            applyButtonText,\n            isChanged,\n            redirect,\n            closeAlertDialog,\n            cancelAlertDialog,\n            applyAlertDialog,\n            maxWidth,\n            customClass,\n            hideApplyButton,\n            hideCancelButton,\n            disableBackdropClick\n        } = this.props;\n        return (\n            <>\n                <Prompt when={isChanged} message={this.handleTransition}/>\n                {!!redirect && !!redirect.status && redirect.status === true ? (\n                    <Redirect to={redirect.path}/>\n                ) : (\n                    <Dialog\n                        open={open}\n                        keepMounted\n                        disableBackdropClick={disableBackdropClick || true}\n                        onClose={() => {}}\n                        aria-labelledby='alert-dialog-slide-title'\n                        aria-describedby='alert-dialog-slide-description'\n                        maxWidth={maxWidth}\n                        fullWidth={true}\n                        PaperProps={{\n                            square: true,\n                            elevation: 24\n                        }}\n                        className={`${classes.confirmationDialog} ${!!customClass ? customClass : ''}`}\n                        // scroll={'body'}\n                    >\n                        {showTitle ? <DialogTitle id={'dialogtitle'} disableTypography={true}\n                                                  classes={{root: classes.dialogTitle}}>{title}</DialogTitle> : <span/>}\n                        <DialogContent id={'dialogcontent'}>\n                            <Grid container justify={\"center\"}>\n                                <Grid item xs={12}>\n                                    <DialogContentText id={'dialogcontenttext'} component={\"div\"}\n                                                       className={classes.contentText}>{message}</DialogContentText>\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            {!!cancelButtonText && !hideCancelButton && (\n                                <Button onClick={cancelAlertDialog} color={this.props.cancelButtonColor || \"secondary\"}\n                                        variant={\"contained\"}>\n                                    {cancelButtonText}\n                                </Button>\n                            )}\n                            {!!applyButtonText && !hideApplyButton && (\n                                <Button onClick={applyAlertDialog} color={this.props.applyButtonColor || \"primary\"}\n                                        variant={\"contained\"} styles={{fontFamily: \"inherit\"}} type={\"submit\"}>\n                                    {applyButtonText}\n                                </Button>\n                            )}\n                        </DialogActions>\n                    </Dialog>\n                )}\n            </>\n        );\n    }\n\n    /**\n     * Show the dialog. Invoked primarily from React Router transition\n     * handler getUserConfirmation.\n     *\n     * @param allowTransitionCallback A function that accepts a flag whether or not to allow the route transition\n     */\n    show = allowTransitionCallback => {\n        // we are immediately preventing any transitions here\n        // but could just as easily base this off a user interaction\n        // or other state\n        this.setState({open: true}, () => allowTransitionCallback(false));\n        this.props.showAlertDialogWithOptions(\"There is unsaved data on the form, if you navigate, data will be lost. Are you sure you want to continue?\", true, null, \"warning\");\n    };\n\n    /**\n     * Closes the dialog\n     */\n    handleClose = () => {\n        this.setState({open: false});\n    };\n\n    /**\n     * Handles the Router transition. Returns true if allowed\n     * or the dialog trigger key to enable the dialog.\n     *\n     * This would be a good candidate to allow optionally\n     * being passed as a callback prop to let\n     * caller decide if transition is allowed.\n     */\n    handleTransition = location => {\n        // example: allow transitions to /two\n        // if (location.pathname === \"/addPermanentPatient/camera\" || location.pathname === \"/addPermanentPatient\") {\n        // \treturn true;\n        // }\n        if (!!this.props.allowedURIs) {\n            if (this.props.allowedURIs.indexOf(location.pathname) !== -1) {\n                return true;\n            }\n        }\n        this.props.allowRedirectTo(location);\n        return Symbol.keyFor(this.__trigger);\n    };\n}\n\nAlertDialog.propTypes = {};\n\nexport default withStyles(styles)(AlertDialog);\n"]},"metadata":{},"sourceType":"module"}